{"version":3,"file":"static/js/710.8224069c.chunk.js","mappings":"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","sources":["components/utilities/getallTaskElementList.js","components/dynamicscreendefinition/TaskElement.js","components/utilities/getallscreen.js"],"sourcesContent":["import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\n\n\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetAllTaskElementList = async (screenid) => {\n\n\nlet Response;\n\n\n\nconst Tlelst = apiendpoints.Tlelst;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"AllTasKList\", orgid: \"\", vendid: \"0\" };\n const frmData = {cmbScrId:screenid}\n const data = { hdr: frmHdr, body: frmData };\n\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl = Tlelst;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));      \n\n       Response = strResponse ;\n  })\n\n  return  Response;\n\n};\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// import \"font-awesome/css/font-awesome.min.css\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\n\r\nimport { GetAllScreenList } from \"../utilities/getallscreen\";\r\nimport { GetAllTaskElementList } from \"../utilities/getallTaskElementList\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Scrollbar } from \"react-scrollbars-custom\";\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../utilities/utils\";\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nconst CompanyId = localStorage.getItem(\"CompanyId\")\r\n\r\n\r\nconst schema = yup.object().shape({\r\n  txtHeader: yup.string().required(\"Pls provide Header Name\"),\r\n});\r\n\r\n//rfce - command\r\nfunction TaskElement() {\r\n  // Const & Var\r\n\r\n  const [Taskresbody, settasklistresbody] = useState([]);\r\n  const [alert, setAlert] = useState(\"\");\r\n  const [isLoading, setLoanding] = useState(false);\r\n  const [UserStatusMaster, setUserStatusMaster] = useState([]);\r\n  const [UserStatus, setUserStatus] = useState([]);\r\n  const [childelms, setscrchildelms] = useState([]);\r\n  const [Screenid, setScreenid] = useState(0);\r\n  const [IsCustomScr, setIsCustomScr] = useState(false);\r\n  const [screenfilterlist, setscreenfilterlist] = useState([]);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n\r\n\r\n  // General Function\r\n\r\n  const FetchAllScreenList = async () => {\r\n    const ScreenListResponse = await GetAllScreenList(); \r\n    setscreenfilterlist(ScreenListResponse.body.Screens.filter((res) => res.IsActive==true));\r\n  };\r\n\r\n\r\n  const FetchAllTaskList = async (screenid) => {\r\n    \r\n    const TaskListResponse = await GetAllTaskElementList(screenid);\r\n    console.log(JSON.stringify(TaskListResponse.body.tskcols));\r\n     settasklistresbody(TaskListResponse.body.tskcols);\r\n    \r\n  };\r\n\r\n\r\n  //   fetch combo values\r\n\r\n  \r\n  const[resbody,setresbody]= useState([]);\r\n  const LoadCombo = async () => {\r\n      // Update state with incremented value\r\n\r\n      const opt = '|STGTY|';\r\n      const optw = '';\r\n  // \r\n\r\n  const Response = await FetchCombodata(opt,optw);\r\n\r\n      setresbody(Response.body.stgty)\r\n      console.log('rerendering method')\r\n  }; \r\n\r\n\r\n\r\n  \r\n  // Useeffect\r\n\r\n  useEffect(() => {\r\n    LoadCombo();\r\n    FetchAllScreenList();   \r\n  }, []);\r\n\r\n  useEffect(() => {    \r\n  }, [IsCustomScr]);\r\n\r\n\r\n\r\n  // Event function start\r\n\r\n\r\n  const ScreenOnChange = (e) => {  \r\n    \r\n       setScreenid(e.target.value);\r\n      FetchAllTaskList(e.target.value);\r\n      FetchScreenChildElements(0,e.target.value)\r\n\r\n  };\r\n\r\n  const FetchScreenChildElements = async (parentelmid, scrid) => {\r\n    // Update state with incremented value\r\n     const opt = \"|DUELM|\";\r\n\r\n    const optw = {\r\n      DUELM: \"ScreenId=\" + scrid + \" and ParentElementId=\" + parentelmid,\r\n    };\r\n\r\n    const Response = await FetchCombodata(opt, optw);\r\n\r\n    console.log(Response);\r\n\r\n    setscrchildelms(Response.body.duelm);\r\n  };\r\n\r\n\r\n  const onSubmitHandler = async (data) => {\r\n    \r\n     let StageId = data.txtTaskElmentId;\r\n    \r\n       if(data.txtTaskElmentId==undefined)\r\n       StageId = \"0\";\r\n\r\n    let frmData = { txtTLEId:StageId, cmbScrId:Screenid,txtHdr:data.txtHeader,txtOrd:data.txtOrder, cmbElmId :data.cmbStageTypeId};\r\n\r\n    const UpdTaskElement = apiendpoints.UpdTaskElement;\r\n\r\n    console.log(frmData);\r\n\r\n\r\n    setLoanding(true);\r\n\r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"cngusrstus\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n\r\n    console.log(reqdata);\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        UpdTaskElement,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        setLoanding(false);\r\n      } else {\r\n        setTimeout(() => {\r\n          console.log(strResponse.fdr);\r\n          ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n          toast.success(\"Successfully updated\");\r\n          setTimeout(() => {\r\n            setAlert({\r\n              AlertType: \"null\",\r\n              message: \"null\",\r\n            });\r\n          }, 600);\r\n          ResetScreenValue();\r\n          FetchAllTaskList(Screenid);          \r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      ShowAlert(\"Error\", \"Unable to process request\");\r\n      setLoanding(false);\r\n    }\r\n  }\r\n\r\n\r\n  //---------------onSubmitHandler end------\r\n\r\n  \r\n\r\n  \r\n  function SetScreenValue(rowval)  \r\n  {\r\n  \r\n\r\n    console.log(rowval);\r\n\r\n    reset({ txtTaskElmentId: rowval.tleid, txtHeader: rowval.hdr, txtOrder : rowval.ord,\r\n      cmbStageTypeId : rowval.elmid   })  \r\n\r\n     \r\n  \r\n  }\r\n\r\n  function ResetScreenValue()  \r\n  {\r\n    \r\n    reset({ txtTaskElmentId: \"\", txtHeader: \"\",txtOrder:\"\",cmbStageTypeId:\"\"})    \r\n\r\n  }\r\n\r\n  const CheckboxhandleChange = (e) => {\r\n    console.log(e);\r\n  \r\n\r\n\r\n\r\n     if (e.target.value == true) \r\n      {\r\n        setIsCustomScr(true)\r\n      } \r\n    else {\r\n      setIsCustomScr(false)\r\n         }\r\n\r\n\r\n  };\r\n  // Event Function End\r\n\r\n  // Main Function\r\n\r\n  const ShowAlert = (alertType, message) => {\r\n    setAlert({\r\n      AlertType: alertType,\r\n      message: message,\r\n    });\r\n  };\r\n\r\n  try {\r\n    return (\r\n      <>\r\n        <section className=\"vh-100\">\r\n          <div className=\"container h-100\">\r\n            {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\r\n                  <div className=\"col-lg-12 col-xl-11\"> */}\r\n            <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\r\n              <div className=\"card-header\">\r\n                <strong className=\"card-title\">Create Task Element</strong>\r\n              </div>\r\n              <div className=\"card-body p-md-5\">\r\n                {isLoading ? <Spinner></Spinner> : \"\"}\r\n                <Alerts alert={alert} />\r\n\r\n                <form\r\n                  onSubmit={handleSubmit(onSubmitHandler)}\r\n                  autocomplete=\"off\"\r\n                >\r\n                 <div className=\"row\">\r\n                 <div className=\"col-sm\">\r\n                                    <div className=\"mb-3\">\r\n                                        <label htmlFor=\"cmbScreenId\" className=\"form-label\">Screen</label>\r\n                                        <select {...register(\"cmbScreenId\")}  className=\"form-control\"  onChange={ScreenOnChange}> \r\n                                            <option value=\"0\">- Select -</option>\r\n                                            {  //Combo Data binding\r\n                                                        \r\n                                                        screenfilterlist.map((res) => \r\n                                                        (<option key={res.ScreenId} value={res.ScreenId}>{res.ScrName}</option>))\r\n                                            }\r\n                                            \r\n                                        </select>\r\n                                        <p>{errors.cmbScreenId?.message}</p>\r\n                                    </div>\r\n                                </div>\r\n                 <div className=\"col-sm\">\r\n                 <div className=\"mb-3\">\r\n                        <label htmlFor=\"txtTaskElmentId\" className=\"form-label\">\r\n                          {\" \"}\r\n                          Task Element Id\r\n                        </label>\r\n                        <input\r\n                          {...register(\"txtTaskElmentId\")}\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          disabled=\"disabled\"\r\n                          readonly=\"readonly\"\r\n                        />\r\n                      </div>\r\n                 </div>\r\n                 </div>\r\n\r\n                           \r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <label htmlFor=\"txtHeader\" className=\"form-label\">\r\n                          {\" \"}\r\n                          Header\r\n                        </label>\r\n                        <input\r\n                          {...register(\"txtHeader\")}\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                        />\r\n                        <p>{errors.txtHeader?.message}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <label htmlFor=\"ntxtOrd\" className=\"form-label\">\r\n                          {\" \"}\r\n                          Element\r\n                        </label>\r\n                        <select {...register(\"cmbStageTypeId\")}  className=\"form-control\"  onChange={\"\"}> \r\n                                            <option value=\"0\">- Select -</option>\r\n                                            {                                                         \r\n                                                        childelms.map((res) => \r\n                                                        (<option key={res.k} value={res.k}>{res.v}</option>))\r\n                                            }\r\n                                        </select>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                      <label htmlFor=\"txtOrder\" className=\"form-label\">\r\n                          {\" \"}\r\n                          Order\r\n                        </label>\r\n                        <input\r\n                          {...register(\"txtOrder\")}\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                        />\r\n                        <p>{errors.txtOrder?.message}</p>\r\n                   \r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                    \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n\r\n                \r\n                  \r\n                  \r\n                  <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Submit\r\n                  </button>\r\n                </form>\r\n              </div>\r\n\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>       \r\n                    <th>Header</th>                  \r\n                    <th>Element</th>\r\n                    <th>Order</th>                    \r\n                    <th>\r\n                      <button\r\n                        className=\"btn btn-success\"\r\n                        onClick={() => {\r\n                          ResetScreenValue();\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        <i className=\"bi bi-table\"></i> Add{\" \"}\r\n                      </button>\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {Taskresbody && Taskresbody.map((x) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>{x.tleid}</td>\r\n                        <td>{x.hdr}</td>\r\n                        <td>{x.elmid}</td>\r\n                        {/* <td>{ childelms.filter((res) => res.k==x.elmid)}</td> */}\r\n                        <td>{x.ord}</td>\r\n\r\n                         \r\n                       \r\n                           <td>\r\n                          <button\r\n                            className=\"btn btn-primary\"\r\n                            onClick={() => {\r\n                              SetScreenValue(x);\r\n                            }}\r\n                          >\r\n                            {\" \"}\r\n                            <i className=\"bi bi-pen\"></i> Edit\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nexport default TaskElement;","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllScreenList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllScreen = apiendpoints.AllScreen;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllScreen\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllScreen;\r\n\r\n console.log(combonurl); \r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n"],"names":["apiendpoints","appsettings","schema","localStorage","getItem","yup","shape","txtHeader","required","Taskresbody","settasklistresbody","useState","alert","setAlert","isLoading","setLoanding","UserStatusMaster","setUserStatusMaster","UserStatus","setUserStatus","childelms","setscrchildelms","Screenid","setScreenid","IsCustomScr","setIsCustomScr","screenfilterlist","setscreenfilterlist","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","FetchAllTaskList","async","TaskListResponse","Response","Tlelst","data","hdr","convid","generateUUID","tag","orgid","vendid","body","cmbScrId","screenid","reqHdr","headers","Authorization","combonurl","api","post","compressBase64","then","response","strResponse","JSON","parse","decompressBase64","GetAllTaskElementList","console","log","stringify","tskcols","resbody","setresbody","useEffect","FetchCombodata","stgty","LoadCombo","ScreenListResponse","GetAllScreenList","Screens","filter","res","IsActive","FetchAllScreenList","ScreenOnChange","e","target","value","FetchScreenChildElements","parentelmid","scrid","optw","DUELM","duelm","onSubmitHandler","StageId","txtTaskElmentId","undefined","frmData","txtTLEId","txtHdr","txtOrd","txtOrder","cmbElmId","cmbStageTypeId","UpdTaskElement","frmHdr","reqdata","rst","ShowAlert","fdr","rstmsg","setTimeout","toast","success","AlertType","message","ResetScreenValue","err","error","alertType","_errors$cmbScreenId","_errors$txtHeader","_errors$txtOrder","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Spinner","Alerts","onSubmit","autocomplete","htmlFor","onChange","map","ScreenId","ScrName","cmbScreenId","type","disabled","readonly","k","v","Table","striped","bordered","hover","onClick","x","tleid","elmid","ord","rowval","AllScreen"],"sourceRoot":""}