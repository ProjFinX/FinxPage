{"version":3,"file":"static/js/665.703ebbb0.chunk.js","mappings":"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","sources":["components/userrole/convertnodetojson.js","components/userrole/nodechecked.js","components/userrole/nodesourse.js","components/userrole/userrolemapping.js","components/utilities/getbranchlist.js","components/utilities/getrolelist.js","components/utilities/getuserlist.js"],"sourcesContent":["\nimport React  from \"react\";\n\n\nexport   function BranchRoleNodetojson(arr1,nodeselected){\n \n  let obj = \"\";\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let arr2=[];  \n  let nodearr=[];\n\n      arr1.forEach(arr1item => {    \n        \n        child = [];\n       \n        arr2 = nodeselected;\n       \n        arr2.forEach(arr2item => {\n             \n             \n\n                    nodearr = arr2item.split('-') \n\n                    console.log(nodearr)\n\n                    if    (arr1item.BranchId ==  nodearr[1])\n                    {              \n                      child= [...child,nodearr[0]] \n                    }\n      } \n      \n      );\n\n      obj1= {BranchId:arr1item.BranchId,RoleIds:child}\n\n      parent = [...parent,obj1]\n\n  } )\n\n  console.log(parent);\n  \n return parent;\n\n}\n\n\n\n\n\n\nexport   function UserBranchRoleNodetojson(arr1,nodeselected){\n \n  let obj = \"\";\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let arr2=[];  \n  let nodearr=[];\n\n      arr1.forEach(arr1item => {                \n       \n        child = [];\n        arr2 = nodeselected;\n       \n        arr2.forEach(arr2item => {\n             \n                    \n\n                    nodearr = arr2item.split('-') \n\n                    console.log(nodearr)\n\n                    if    (arr1item.BranchId ==  nodearr[1] )\n                    {              \n                      child= [...child,nodearr[0]] \n                    }\n      } \n      \n      );\n\n      obj1= {BranchId:arr1item.BranchId,RoleMapIds:child}\n\n      parent = [...parent,obj1]\n\n  } )\n\n  console.log(parent);\n  \n return parent;\n\n}\n","\nimport React  from \"react\";\n\n\n\n\n\nexport   function BranchRoleNodeChecked(arr1){\n \n  let obj = \"\";\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let arr2=[];\n\n\n      arr1.forEach(arr1item => {\n\n        arr2 = arr1item.Roles;\n       \n      arr2.forEach(arr2item => {\n        obj =  arr2item.RId + '-' + arr1item.BranchId ;  \n        child= [...child,obj]       \n      }  \n      \n      );\n\n  } )\n  \n return child;\n\n}\n\nexport   function UserBranchRoleNodeChecked(arr1,filterbrmap){\n \n  let obj = \"\";\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let arr2=[];\n    \n  console.log(filterbrmap)\n    \n    filterbrmap.forEach(filterbrmapitem=>{\n                        console.log(filterbrmapitem.BRMapId)\n\n                                        arr1.forEach(arr1item => {\n\n                                          arr2 = arr1item.Roles;\n                                        \n                                        arr2.forEach(arr2item => {\n                                          if (filterbrmapitem.BRMapId == arr2item.BRMapId && filterbrmapitem.BRUMapStatusId ==1 )\n                                          {\n                                            obj =  arr2item.BRMapId + '-' + arr1item.BranchId ;  \n                                            child= [...child,obj]   \n\n                                          }\n                                            \n                                        }  \n                                        \n                                        );\n                                  \n                                    } )\n                        }\n                        )\n  \n return child;\n\n}\n\n","\nimport React  from \"react\";\n\n\n\n\n\nexport   function BranchRoleMapNodeSource(arr1,arr2){\n \n  let obj = {};\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n\n\n  console.log(arr1)\n  console.log(arr2)\n\n\n      arr1.forEach(arr1item => {\n\n\n\n      arr2.forEach(arr2item => {\n        obj1 = {'value': arr2item.RoleId +'-' + arr1item.BranchId,'label':arr2item.RoleName};  \n        child= [...child,obj1]       \n      }  \n      \n      );\n  \n      obj = {'value': arr1item.BranchId,'label':arr1item.Name,'children':child};\n      \n      parent = [...parent,obj]\n\n\n\n      child= []  \n\n  } )\n\n return parent;\n\n};\n\n\nexport   function UserBranchRoleMapNodeSource(arr1){\n \n  let obj = {};\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let arr2 = [];\n\n\n  console.log(arr1)\n  console.log(arr2)\n\n\n      arr1.forEach(arr1item => {\n\n       arr2 = arr1item.Roles;\n\n      arr2.forEach(arr2item => {\n        obj1 = {'value': arr2item.BRMapId +'-' + arr1item.BranchId,'label':arr2item.RName};  \n        child= [...child,obj1]       \n      }  \n      \n      );\n  \n      obj = {'value': arr1item.BranchId,'label':arr1item.Name,'children':child};\n      \n      parent = [...parent,obj]\n\n      child= []  \n\n  } )  \n\n return parent;\n\n}\n\n\n\nexport   function statuschangeRoleMapNodeSource(Rolearr){\n \n  let obj = {};\n  let parent=[];\n\n\n\n  console.log('Rolearr',Rolearr)\n\n\n  Rolearr.forEach(arr1item => {\n\n      \n\n        var staus =  arr1item.BRUMapStatus; \n             \n        obj = {'value': arr1item.RoleId ,'label': \" \" +  arr1item.RoleName + ' ('  + staus + ')' , showNodeIcon:false};  \n     \n      \n      parent = [...parent,obj]    \n\n  } )  \n\n return parent;\n\n}\n\n\n","import React from 'react';\r\nimport CheckboxTree from 'react-checkbox-tree';\r\nimport { useState ,useEffect} from 'react';\r\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\r\n// import \"font-awesome/css/font-awesome.min.css\";\r\nimport db from \"./data.json\";\r\nimport {UserBranchRoleMapNodeSource} from \"./nodesourse\"\r\nimport {UserBranchRoleNodeChecked} from \"./nodechecked\"\r\nimport {UserBranchRoleNodetojson} from \"./convertnodetojson\"\r\n\r\n\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from  \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport { generateUUID, compressLZW, decompressLZW, compressBase64, decompressBase64 } from \"../utilities/utils\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nimport { GetRoleList } from \"../utilities/getrolelist\";\r\nimport { GetBranchList } from \"../utilities/getbranchlist\";\r\nimport { GetUserList } from '../utilities/getuserlist';\r\n\r\n\r\n// Yup validation schema \r\n\r\nconst schema = yup.object().shape({\r\n   // txtRoleName: yup.string().required(\"Role name can not be empty\").max(50,\"Role name  Max lenght is 50 \")\r\n});\r\n\r\n\r\n\r\n\r\n\r\n//Ref\r\n\r\n//https://github.com/jakezatecky/react-checkbox-tree/issues/104\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst UserRoleMapping=()=>{\r\n\r\n\r\n  //Fetch Role List from API\r\n\r\n  const[roleresbody,setrolelistresbody]= useState([]);\r\n\r\n  const FetchRoleList = async () => {\r\n\r\n    const RoleListResponse = await GetRoleList();\r\n\r\n    setrolelistresbody(RoleListResponse.body.Roles)\r\n  \r\n   \r\n  }; \r\n\r\n  useEffect(() => {\r\n      FetchRoleList();      \r\n  \r\n  },[])\r\n\r\n  const[branchresbody,setbranchlistresbody]= useState([]);\r\n  const FetchBranchList = async () => {\r\n\r\n    const BranchListResponse = await GetBranchList();\r\n\r\n    setbranchlistresbody(BranchListResponse.body.Branches)  \r\n   \r\n  }; \r\n\r\n  useEffect(() => {\r\n    FetchBranchList();     \r\n  },[])\r\n\r\n  const[userresbody,setuserlistresbody]= useState([]);\r\n  const FetchUserList = async () => {\r\n    const UserListResponse = await GetUserList(); \r\n    setuserlistresbody(UserListResponse.body.Users) \r\n       \r\n    console.log(JSON.stringify(UserListResponse.body.Users));\r\n   \r\n  }; \r\n\r\n  useEffect(() => {\r\n    FetchUserList();       \r\n     \r\n  \r\n  },[])\r\n\r\n//-----------------------------\r\n\r\n\r\n\r\n let newnode = [];  \r\n let nodecheck = []; \r\n if (newnode.length == 0)\r\n {\r\n  newnode = UserBranchRoleMapNodeSource(branchresbody);\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst [checked, setchecked] = useState([]);\r\nconst [expanded, setExpand] = useState([]);\r\nconst [database, setdb] = useState(newnode);\r\nconst [UserId, setUserId] = useState(0);\r\n\r\n \r\n\r\n\r\n    //const [treenode, settreenode] = useState({});\r\n\r\n  \r\n\r\n\r\n    const { register, handleSubmit, formState: { errors }, reset } = useForm({\r\n        resolver: yupResolver(schema),\r\n     });\r\n\r\n     \r\n    const [alert, setAlert] = useState(\"\");\r\n\r\n    const [isLoading , setLoanding]  = useState(false);\r\n\r\n   \r\n    useEffect(() => {        \r\n      }, [database]);\r\n      \r\n    const onChange = (e) => {  \r\n       // setchecked(checked=>[...checked,'manager1'])\r\n           \r\n\r\n        let id = 0;        \r\n            id = e; \r\n        let filterbrmap =[];       \r\n        const filtered = userresbody.filter(user => {          \r\n                         return user.UserId == id;\r\n        });\r\n\r\n        filterbrmap = filtered[0].BRUMap;  \r\n        console.log(filterbrmap);\r\n        console.log(branchresbody);\r\n\r\n        nodecheck= UserBranchRoleNodeChecked(branchresbody,filterbrmap); \r\n\r\n        setchecked(nodecheck);\r\n        setdb(newnode) ; \r\n        setUserId(id);\r\n\r\n      };\r\n\r\n\r\n\r\n\r\n \r\n const navigate = useNavigate();\r\n \r\n const onSubmitHandler = async(data) => {\r\n\r\n\r\n  console.log(\"Enter Button submit\");\r\n  console.log(checked);\r\n  const nodeconvertjsonres= UserBranchRoleNodetojson(branchresbody,checked);\r\n\r\n \r\n\r\n  const frmData = {BRUMap:{ UserId:UserId, Branches:nodeconvertjsonres}};\r\n\r\n  console.log(frmData);\r\n  \r\n\r\n  setLoanding(true);\r\n\r\n  //e.preventDefault();\r\n  /* Header */\r\n  const convID = generateUUID();\r\n  const frmHdr = {\r\n        convid: convID,\r\n        tag: \"rolusrmap\",\r\n        orgid: \"\",\r\n        vendid: \"0\",\r\n  };    \r\n\r\n  const reqdata = { hdr: frmHdr, body: frmData }  \r\n  const token =    localStorage.getItem('token');\r\n  const reqHdr = { headers: { Authorization: `Bearer ${token}` } };    \r\n  const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n  const createroleurl =  \"/cmpstp/rolusrmap\";\r\n  console.log(reqHdr)\r\n  try {\r\n    //debugger;\r\n    const response = await api.post(createroleurl, compressBase64(reqdata),reqHdr);\r\n   // const response = await PostCallHeader(createbranchnurl, compressBase64(reqdata),reqHdr);\r\n   \r\n     const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n    console.log(strResponse);\r\n\r\n    if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {             \r\n         ShowAlert(\"Error\", JSON.stringify(strResponse.fdr));\r\n         setLoanding(false);\r\n    } else {\r\n          console.log(strResponse.fdr);    \r\n          ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n          setLoanding(false);\r\n          navigate(\"/UserRoleMapping\");\r\n    }\r\n  } catch (err) {\r\n  \r\n    console.log(err.message);     \r\n    ShowAlert(\"Error\", \"Unable to process request\")\r\n    setLoanding(false);\r\n    \r\n  }\r\n};\r\n\r\n\r\n\r\nconst ShowAlert = (alertType, message) => {\r\nsetAlert({\r\n  AlertType: alertType,\r\n  message: message,\r\n});\r\n};\r\n\r\n\r\ntry {\r\n  \r\n\r\n\r\n\r\n    return (\r\n\r\n        \r\n        <>\r\n          <section className=\"vh-100\">\r\n            <div className=\"container h-100\">\r\n       \r\n                      <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\r\n                      <div className=\"card-header\">\r\n                        <strong className=\"card-title\">User Role mapping</strong>\r\n                      </div>\r\n                      <div className=\"card-body p-md-5\">                  \r\n\r\n                      {isLoading?(<Spinner></Spinner>) :\"\"}                        \r\n                       <Alerts alert={alert} />                 \r\n\r\n                     <form onSubmit={handleSubmit(onSubmitHandler)} autocomplete=\"off\">\r\n\r\n                     <div className=\"row\">\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                               \r\n                                    <label  className=\"form-label\"> User List</label>\r\n                                    \r\n                                        <select                                        \r\n                                        name=\"list-box\"\r\n                                        size={20} \r\n\r\n                                        className=\"form-control\"\r\n                                        onChange= {e => onChange(e.target.value)}                                        \r\n                                        >                                  \r\n                                        {  //Combo Data binding\r\n                                        userresbody.map((res) => \r\n                                        (\r\n                                        <option key={res.UserId} value={res.UserId}>{res.Username}</option>\r\n                                        ))\r\n                                        }\r\n                                        \r\n                                    </select> \r\n                                    </div>\r\n                              </div>\r\n                                   \r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"txtConformPassword\" className=\"form-label\"> Branch and Role</label>\r\n                                                <CheckboxTree                      \r\n                                            //nodes={nodes}                        \r\n                                            nodes={database}\r\n                                            checked={checked}\r\n                                            expanded={expanded}\r\n                                            onCheck={(checked) => setchecked(checked)}\r\n                                            onExpand={(expanded) => setExpand(expanded)}\r\n                                            // onClick={(nodes) => settreenode(nodes)}\r\n                                            />\r\n                                   \r\n                                  </div>\r\n                                  \r\n                              </div>                             \r\n                            </div>\r\n                            \r\n\r\n\r\n                             \r\n                                <br></br>\r\n                                                 \r\n                         \r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary\">\r\n                            Submit\r\n                            </button>\r\n                        </form>\r\n\r\n                          {console.log(checked)}\r\n\r\n                      </div>\r\n                  </div>\r\n                </div>\r\n  \r\n          </section>\r\n          </>\r\n      );\r\n\r\n    } catch (error) {\r\n\r\n      console.log(error.message)\r\n  \r\n    }\r\n}\r\n\r\n\r\nexport default UserRoleMapping;","import React, { useState, useEffect } from \"react\";\r\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\n export const GetBranchList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\nconst BranchList = apiendpoints.BranchList;\r\n\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl =  BranchList;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));\r\n    console.log(strResponse);    \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetRoleList = async () => {\r\n\r\n\r\nlet Response;\r\nconst RoleList = apiendpoints.RoleList;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = RoleList;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));\r\n    console.log(strResponse);    \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n\r\n","import React, { useState, useEffect } from \"react\";\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetUserList = async () => {\n\n\nlet Response;\nconst UserList = apiendpoints.UserList;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl = UserList;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n export const GetAllUserList = async () => {\n\n\nlet Response;\nconst AllUserList = apiendpoints.AllUserList;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl =AllUserList;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n"],"names":["BranchRoleNodetojson","arr1","nodeselected","obj1","parent","child","arr2","nodearr","forEach","arr1item","arr2item","split","console","log","BranchId","RoleIds","UserBranchRoleNodetojson","RoleMapIds","BranchRoleNodeChecked","obj","Roles","RId","UserBranchRoleNodeChecked","filterbrmap","filterbrmapitem","BRMapId","BRUMapStatusId","BranchRoleMapNodeSource","RoleId","RoleName","Name","UserBranchRoleMapNodeSource","RName","schema","yup","shape","UserRoleMapping","roleresbody","setrolelistresbody","useState","useEffect","async","RoleListResponse","GetRoleList","body","FetchRoleList","branchresbody","setbranchlistresbody","BranchListResponse","GetBranchList","Branches","FetchBranchList","userresbody","setuserlistresbody","UserListResponse","GetUserList","Users","JSON","stringify","FetchUserList","newnode","nodecheck","length","checked","setchecked","expanded","setExpand","database","setdb","UserId","setUserId","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","alert","setAlert","isLoading","setLoanding","navigate","useNavigate","onSubmitHandler","nodeconvertjsonres","frmData","BRUMap","reqdata","hdr","convid","generateUUID","tag","orgid","vendid","reqHdr","headers","Authorization","localStorage","getItem","response","api","post","compressBase64","strResponse","parse","decompressBase64","data","rst","ShowAlert","fdr","rstmsg","err","message","alertType","AlertType","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Spinner","Alerts","onSubmit","autocomplete","name","size","onChange","e","id","filter","user","target","value","map","res","Username","htmlFor","CheckboxTree","nodes","onCheck","onExpand","type","error","Response","BranchList","appsettings","combonurl","then","apiendpoints","RoleList","UserList","GetAllUserList","AllUserList"],"sourceRoot":""}