{"version":3,"file":"static/js/180.57ee54ea.chunk.js","mappings":"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","sources":["components/utilities/GetStgElmEvntCmb.js","components/dynamicscreendefinition/EventExpGroupMapping.js","components/utilities/GetStgScrElements.js","components/utilities/getScrexpresiontree.js","components/utilities/getallscreen.js","components/utilities/getallstage.js","components/utilities/geteventexpression.js"],"sourcesContent":["import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\n\n\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetStgElmEvntCmb = async (screenid,Stgid,StgElmDsigId) => {\n\n\nlet Response;\n\n\n\nconst StgElmEvntCmb = apiendpoints.StgElmEvntCmb;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"StageElementlist\", orgid: \"\", vendid: \"0\" };\n const frmData = {cmbScrId:screenid,cmbStgId:Stgid,cmbStgElmDsigId:StgElmDsigId}\n const data = { hdr: frmHdr, body: frmData };\n\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const url = StgElmEvntCmb;\n\n console.log(reqHdr);\n\n await api.post(url, compressBase64(data)).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));      \n\n    console.log(strResponse);\n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// import \"font-awesome/css/font-awesome.min.css\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\n\r\nimport { GetAllScreenList } from \"../utilities/getallscreen\";\r\nimport { GetAllStageList } from \"../utilities/getallstage\";\r\nimport { GetStgEleCmb,GetEvntExGrpMap } from \"../utilities/GetStgScrElements\";\r\nimport { GetExpGrpLst } from \"../utilities/geteventexpression\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Scrollbar } from \"react-scrollbars-custom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { GetExpressiontree,GetEventTree } from \"../utilities/getScrexpresiontree\";\r\nimport { GetStgElmEvntCmb } from \"../utilities/GetStgElmEvntCmb\";\r\n\r\n\r\n\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../utilities/utils\";\r\n\r\nimport appsettings from \"../../appsettings.json\";\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nconst CompanyId = localStorage.getItem(\"CompanyId\");\r\n\r\nconst schema = yup.object().shape({\r\n  cmbScrId: yup.string().required(\"Pls Select  Secreen \"),\r\n});\r\n\r\n//rfce - command\r\nfunction EventExpGroupMapping() {\r\n  // Const & Var\r\n\r\n  console.log(\"Page rendered\");\r\n\r\n  const [stageresbody, setstagelistresbody] = useState([]);\r\n  const [StageElementresbody, setStageElementlistresbody] = useState([]);\r\n  const [Stageid, setStageid] = useState(0);\r\n  const [stagefilterlist, setstagefilterlist] = useState([]);\r\n  const [ExpGrpresbody, setExpGrpresbody] = useState([]);\r\n  const [alert, setAlert] = useState(\"\");\r\n  const [isLoading, setLoanding] = useState(false);\r\n\r\n  const [Screenid, setScreenid] = useState(0);\r\n  const [screenfilterlist, setscreenfilterlist] = useState([]);\r\n  const [treedata, settreedata] = useState([]);\r\n  const [actualtreedata, setactualtreedata] = useState([]);\r\n  const [GroupExpid, setGroupExpid] = useState(0);\r\n\r\n  const [selectedGrpExp, setselectedGrpExp] = useState([]);\r\n  const [EvntList, setEvntList] = useState([]);\r\n  const [Elementid, setElementid] = useState(0);\r\n\r\n  \r\n  \r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  // General Function\r\n\r\n  \r\n  const FetchStageElementList = async (stagid) => {\r\n    const ElementListResponse = await GetStgEleCmb(Screenid,stagid);\r\n    //setStageElementlistresbody(ElementListResponse.body.stgelm);\r\n\r\n    setstagefilterlist(ElementListResponse.body.stgelm);\r\n  };\r\n\r\n  const FetchStageElmEvntCmb = async (ElementId) => {\r\n    const ElementListResponse = await GetStgElmEvntCmb(Screenid,Stageid,ElementId);\r\n   \r\n    const obj = ElementListResponse.body.elmevnt;\r\n\r\n    setEvntList( Array.isArray(obj)?obj:null);\r\n  };\r\n\r\n  \r\n\r\n  const FetchEvntExGrpMap = async (EventId) => {\r\n    \r\n    const ElementListResponse = await GetEvntExGrpMap(Screenid,Stageid,Elementid,EventId);   \r\n\r\n    console.log(ElementListResponse);\r\n    \r\n    const obj = ElementListResponse.body.expgrps;\r\n\r\n    console.log(ElementListResponse.body.expgrps);\r\n\r\n    console.log(obj);\r\n    \r\n    var mapgrp = [];\r\n    let i;\r\n\r\n\r\n\r\n    for (i = 0; i < obj.length; i += 1) {\r\n     \r\n      var value = [];\r\n       value = ExpGrpresbody.filter(function(item) {\r\n        return item.egid == obj[i].exgrpid\r\n      })\r\n\r\n       mapgrp.push(value[0]);\r\n\r\n      }\r\n      console.log(mapgrp);\r\n      \r\n      setselectedGrpExp(mapgrp)\r\n\r\n      console.log(selectedGrpExp);\r\n\r\n   // setEvntList( Array.isArray(obj)?obj:null);\r\n  };\r\n\r\n\r\n  \r\n\r\n  const FetchAllStageList = async (screenid) => {\r\n    const StageListResponse = await GetAllStageList(screenid);\r\n    setstagelistresbody(StageListResponse.body.Stages);\r\n    console.log(JSON.stringify(StageListResponse.body));\r\n  };\r\n\r\n  const FetchAllScreenList = async () => {\r\n    const ScreenListResponse = await GetAllScreenList();\r\n    setscreenfilterlist(\r\n      ScreenListResponse.body.Screens.filter((res) => res.IsActive == true)\r\n    );\r\n  };\r\n\r\n  const FetchExpGrpList = async (screenid) => {\r\n    const ExpGrpListResponse = await GetExpGrpLst(screenid);\r\n    setExpGrpresbody(ExpGrpListResponse.body.expressions);\r\n  };\r\n\r\n  const FetchEventtree = async (screenid) => {\r\n    const FetchExpGrpListtree = await GetEventTree(screenid);\r\n\r\n    const expreres = FetchExpGrpListtree.data;\r\n    settreedata(expreres.menutree);\r\n    setactualtreedata(expreres.expresponse);\r\n  };\r\n\r\n  //   fetch combo values\r\n\r\n  const [resbody, setresbody] = useState([]);\r\n  const LoadCombo = async () => {\r\n    // Update state with incremented value\r\n\r\n    const opt = \"|SETM|\";\r\n    const optw = \"\";\r\n    // \r\n\r\n    const Response = await FetchCombodata(opt, optw);\r\n\r\n    setresbody(Response.body.setm);\r\n    console.log(Response.body);\r\n  };\r\n\r\n  // Useeffect\r\n\r\n  useEffect(() => {\r\n    LoadCombo();\r\n    FetchAllScreenList();\r\n  }, []);\r\n\r\n  // Event function start\r\n\r\n  const ScreenOnChange = (e) => {\r\n    setScreenid(e.target.value);\r\n    FetchAllStageList(e.target.value);\r\n    FetchExpGrpList(e.target.value);\r\n    FetchEventtree(e.target.value)\r\n    //settreedata([]);\r\n  };\r\n\r\n  const StageOnChange = (e) => {\r\n    let id = \"\";\r\n    id = e.target.value;\r\n\r\n    setStageid(e.target.value);   \r\n    FetchStageElementList(id);\r\n \r\n  };\r\n\r\n  const ElementOnChange = (e) => {\r\n    let id = \"\";\r\n    id = e.target.value;\r\n\r\n    setElementid(e.target.value);   \r\n    FetchStageElmEvntCmb(id);\r\n \r\n  };\r\n\r\n  const getEvntExGrpMap = (e) => {\r\n    let id = \"\";\r\n    id = e.target.value;\r\n\r\n    setElementid(e.target.value);   \r\n    FetchEvntExGrpMap(id);\r\n \r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  //--------------------------------------------------------------------------------------------------------\r\n\r\n\r\n  // - Delete element\r\n\r\n  const onSubmitHandler = async (data) => {\r\n    console.log(data);\r\n\r\n    var Expgrps = [];        \r\n   let i,ord;\r\n\r\n    for (i = 0; i < selectedGrpExp.length; i += 1) {\r\n        ord = i + 1;\r\n         var objgroup = { exgrpid: selectedGrpExp[i].egid, ord: ord };\r\n         Expgrps.push(objgroup);\r\n    }\r\n\r\n\r\n    let frmData = {\r\n      cmbScrId: data.cmbScrId,\r\n      cmbStgId: data.cmbStgId,\r\n      cmbStgElmDsigId: data.cmbStgElmDsigId,\r\n      cmbEvntId: data.cmbEvntId,\r\n      expgrps: Expgrps\r\n    };\r\n\r\n    const Updexgrpmap = apiendpoints.Updexgrpmap;\r\n\r\n    console.log(frmData);\r\n\r\n \r\n    setLoanding(true);\r\n\r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"UpdateExpression\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n\r\n    console.log(reqdata);\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        Updexgrpmap,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        setLoanding(false);\r\n      } else {\r\n        setTimeout(() => {\r\n          console.log(strResponse.fdr);\r\n          ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n          toast.success(\"Successfully expression updated\");\r\n          setTimeout(() => {\r\n            setAlert({\r\n              AlertType: \"null\",\r\n              message: \"null\",\r\n            });\r\n          }, 600);\r\n          ResetScreenValue();\r\n\r\n          setScreenid(data.cmbScreenId);\r\n          FetchExpGrpList(data.txtExprGroupId);\r\n          setselectedGrpExp([]);\r\n\r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      ShowAlert(\"Error\", \"Unable to process request\");\r\n      setLoanding(false);\r\n    }\r\n  };\r\n\r\n \r\n\r\n  //---------------onSubmitHandler end------\r\n\r\n  function AddParentExpression(rowval) {\r\n    reset({\r\n      txtSeExprnId: \"\",\r\n      txtParentSeExprnId: \"0\",\r\n      cmbSeExprType: 0,\r\n      txtExpression: \"\",\r\n    });\r\n  }\r\n\r\n  function Assigngrouplist(rowval) {\r\n    console.log(rowval);\r\n   // FetchExpGrpListtree(Screenid, rowval.egid);\r\n    \r\n\r\n    var objgroup = { egid: rowval.egid, egname: rowval.egname };\r\n\r\n    let  tmpselectedGrpExp = [...selectedGrpExp] ;\r\n   \r\n    tmpselectedGrpExp.push(objgroup);\r\n\r\n    setselectedGrpExp(tmpselectedGrpExp);\r\n\r\n   console.log(selectedGrpExp);\r\n\r\n  \r\n  }\r\n\r\n  const DeleteGroup = async (rowval) => {\r\n    let frmData = { cmbScrId: Screenid, txtExprGroupId: rowval.egid };\r\n\r\n    const idToRemove = rowval.egid;\r\n\r\n    setselectedGrpExp(\r\n      selectedGrpExp.filter((item) => item.egid !== idToRemove)\r\n    );\r\n  };\r\n\r\n//https://codepen.io/itwasmattgregg/pen/OJXXaKR\r\n\r\nconst handleMoveUp = (index) => {\r\n  if (index === 0) return; // Row is already at the top\r\n\r\n  setselectedGrpExp(prevRows => {\r\n    const newRows = [...prevRows];\r\n    const temp = newRows[index];\r\n    newRows[index] = newRows[index - 1];\r\n    newRows[index - 1] = temp;\r\n    return newRows;\r\n  });\r\n};\r\n\r\nconst handleMoveDown = (index) => {\r\n  if (index === selectedGrpExp.length - 1) return; // Row is already at the bottom\r\n\r\n  setselectedGrpExp(prevRows => {\r\n    const newRows = [...prevRows];\r\n    const temp = newRows[index];\r\n    newRows[index] = newRows[index + 1];\r\n    newRows[index + 1] = temp;\r\n    return newRows;\r\n  });\r\n};\r\n\r\n  function ResetScreenValue() {\r\n    reset({\r\n      cmbScrId: \"0\",\r\n      cmbStgId: \"\",\r\n      cmbStgElmDsigId: \"\",\r\n      cmbEvntId: \"\",\r\n     \r\n    });\r\n    settreedata([]);\r\n  }\r\n\r\n  // Event Function End\r\n\r\n  // Main Function\r\n\r\n  const ShowAlert = (alertType, message) => {\r\n    setAlert({\r\n      AlertType: alertType,\r\n      message: message,\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n  const TreeNode = ({ node }) => {\r\n\r\n    const hasChildren = node.children.length > 0;\r\n  \r\n  \r\n    return (\r\n\r\n      <div>\r\n\r\n  \r\n         <div className=\"row\">\r\n         <div className=\"col-sm\">\r\n         \r\n         <span >  <span className=\"content\" dangerouslySetInnerHTML={{__html: node.name}}></span> \r\n         </span>\r\n        \r\n        </div>\r\n       \r\n        </div>\r\n        \r\n\r\n        {hasChildren && (\r\n          <ul>\r\n            {node.children.map(childNode => (\r\n              <li key={childNode.id}>\r\n                <TreeNode node={childNode} />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n       \r\n      </div>\r\n    );\r\n  };\r\n  \r\n \r\n   \r\n\r\n  try {\r\n    return (\r\n      <>\r\n        <section className=\"vh-100\">\r\n          <div className=\"container h-100\">\r\n            {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\r\n                  <div className=\"col-lg-12 col-xl-11\"> */}\r\n            <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\r\n              <div className=\"card-header\">\r\n                <strong className=\"card-title\">\r\n                  Event & Expression Group Mapping{\" \"}\r\n                </strong>\r\n              </div>\r\n              <div className=\"card-body p-md-5\">\r\n                {isLoading ? <Spinner></Spinner> : \"\"}\r\n                <Alerts alert={alert} />\r\n\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <div className=\"mb-3\">\r\n                      <form                      \r\n                        autocomplete=\"off\"\r\n                      >\r\n\r\n                      <div className=\"row\">\r\n                          <div className=\"col-sm\">\r\n                            <div className=\"mb-3\">\r\n\r\n                        <label htmlFor=\"cmbScrId\" className=\"form-label\">\r\n                          Screen\r\n                        </label>\r\n                        <select\r\n                          {...register(\"cmbScrId\")}\r\n                          className=\"form-control\"\r\n                          onChange={ScreenOnChange}\r\n                        >\r\n                          <option value=\"0\">- Select -</option>\r\n                          {\r\n                            //Combo Data binding\r\n\r\n                            screenfilterlist.map((res) => (\r\n                              <option key={res.ScreenId} value={res.ScreenId}>\r\n                                {res.ScrName}\r\n                              </option>\r\n                            ))\r\n                          }\r\n                        </select>\r\n                        <p>{errors.cmbScrId?.message}</p>\r\n                        </div>\r\n                          </div>\r\n                          <div className=\"col-sm\">\r\n                            <div className=\"mb-3\">\r\n                        <label htmlFor=\"cmbStgId\" className=\"form-label\">\r\n                          Stage\r\n                        </label>\r\n                        <select\r\n                          {...register(\"cmbStgId\")}\r\n                          className=\"form-control\"\r\n                          onChange={StageOnChange}\r\n                        >\r\n                          <option value=\"0\">- Select -</option>\r\n                          {\r\n                            //Combo Data binding\r\n                            stageresbody &&\r\n                              stageresbody.map((x) => (\r\n                                <option key={x.StageId} value={x.StageId}>\r\n                                  {x.StageName}\r\n                                </option>\r\n                              ))\r\n                          }\r\n                        </select>\r\n                        <p>{errors.cmbStgId?.message}</p>\r\n                        </div>\r\n                          </div>\r\n                          </div>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-sm\">\r\n                            <div className=\"mb-3\">\r\n                              <label\r\n                                htmlFor=\"cmbStgElmDsigId\"\r\n                                className=\"form-label\"\r\n                              >\r\n                                Stage Element\r\n                              </label>\r\n                              <select\r\n                                {...register(\"cmbStgElmDsigId\")}\r\n                                className=\"form-control\"\r\n                                  onChange={ElementOnChange}\r\n                              >\r\n                                <option value=\"0\">- Select -</option>\r\n                                {\r\n                                  //Combo Data binding\r\n                                  stagefilterlist &&\r\n                                    stagefilterlist.map((x) => (\r\n                                      <option\r\n                                        key={x.k}\r\n                                        value={x.k}\r\n                                      >\r\n                                        {x.v}\r\n                                      </option>\r\n                                    ))\r\n                                }\r\n                              </select>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"col-sm\">\r\n                            <div className=\"mb-3\">\r\n                              <label\r\n                                htmlFor=\"cmbEvntId\"\r\n                                className=\"form-label\"\r\n                              >\r\n                                Element Event\r\n                              </label>\r\n                              <select\r\n                                {...register(\"cmbEvntId\")}\r\n                                className=\"form-control\"\r\n                                onChange={getEvntExGrpMap}\r\n                              >\r\n                                <option value=\"0\">- Select -</option>\r\n                                {\r\n                                  //Combo Data binding\r\n                             \r\n                                  EvntList &&\r\n                                  EvntList.map((x) => (\r\n                                      <option\r\n                                        key={x.k}\r\n                                        value={x.k}\r\n                                      >\r\n                                        {x.v}\r\n                                      </option>\r\n                                    ))\r\n                                } \r\n                              </select>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                          <div className=\"col-sm-6\">\r\n                            <div className=\"mb-3\">\r\n                              <Scrollbar style={{ height: 500 }}>\r\n                                <Table striped bordered hover>\r\n                                  <thead>\r\n                                    <tr>\r\n                                      <th>Select Group Name</th>\r\n                                      <th></th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    {ExpGrpresbody &&\r\n                                      ExpGrpresbody.map((x) => {\r\n                                        return (\r\n                                          <tr>\r\n                                            <td>{x.egname}</td>\r\n\r\n                                            <td>\r\n                                              <button\r\n                                                type = \"button\"\r\n                                                className=\"btn btn-primary\"\r\n                                                onClick={() => {\r\n                                                  Assigngrouplist(x);\r\n                                                }}\r\n                                              >\r\n                                                {\" \"}\r\n                                                <i className=\"bi bi-arrow-right\"></i>\r\n                                              </button>\r\n                                            </td>\r\n                                          </tr>\r\n                                        );\r\n                                      })}\r\n                                  </tbody>\r\n                                </Table>\r\n                              </Scrollbar>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-sm-6\">\r\n                            <div className=\"mb-3\">\r\n                              <Table striped bordered hover>\r\n                                <thead>\r\n                                  <tr>\r\n                                    <th>Selected Group Name</th>\r\n                                    <th></th>\r\n                                  </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                  {selectedGrpExp &&\r\n                                  \r\n                                    selectedGrpExp.map((x,index) => {\r\n                                      \r\n                                      return (\r\n                                        <tr>\r\n                                          <td>{x.egname}</td>\r\n\r\n                                          <td>\r\n                                            <button\r\n                                              className=\"btn btn-success\"\r\n                                              onClick={() => {\r\n                                                handleMoveUp(index);\r\n                                              }}\r\n                                            >\r\n                                              {\" \"}\r\n                                              <i className=\"fa fa-arrow-up\"></i>\r\n                                            </button>\r\n                                          </td>\r\n\r\n                                          <td>\r\n                                            <button\r\n                                              className=\"btn btn-success\"\r\n                                              onClick={() => {\r\n                                                handleMoveDown(index);\r\n                                              }}\r\n                                            >\r\n                                              {\" \"}\r\n                                              <i className=\"fa fa-arrow-down\"></i>\r\n                                            </button>\r\n                                          </td>\r\n                                         \r\n                                          <td>\r\n                                            <button\r\n                                              className=\"btn btn-danger\"\r\n                                              onClick={() => {\r\n                                                DeleteGroup(x);\r\n                                              }}\r\n                                            >\r\n                                              {\" \"}\r\n                                              <i className=\"bi bi-trash\"></i>\r\n                                            </button>\r\n                                          </td>\r\n                                        </tr>\r\n                                      );\r\n                                    })}\r\n                                </tbody>\r\n                              </Table>\r\n\r\n                              <button\r\n                                type=\"submit\"                               \r\n                                class=\"btn btn-primary\"\r\n                                onClick={handleSubmit(onSubmitHandler)}\r\n                              >\r\n                                Save Mapping\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-sm-4\">\r\n                    <div className=\"mb-3\">\r\n                      <button\r\n                        className=\"btn btn-success\"\r\n                        onClick={() => {\r\n                          AddParentExpression();\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        <i className=\"bi bi-table\"></i> Tree Root\r\n                      </button>\r\n                      <div>.</div>\r\n                      <div>\r\n                         <Scrollbar style={{ height: 700 }}>\r\n                          {treedata.map((node) => (\r\n                             <TreeNode key={node.id} node={node} />\r\n                          ))}\r\n                        </Scrollbar> \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\"></div>\r\n                  </div>\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\">\r\n                      <div className=\"row\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\"></div>\r\n                  </div>\r\n\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nexport default EventExpGroupMapping;\r\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetStgScrElements = async (screenid) => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst FetchStgScrElements = apiendpoints.FetchStgScrElements;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"StageElementlist\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {scrid:screenid}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const url = FetchStgScrElements;\r\n\r\n console.log(reqHdr);\r\n\r\n await api.post(url, compressBase64(data)).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n\r\n    console.log(strResponse);\r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n\r\n\r\n\r\n\r\nexport const GetStgEleCmb = async (screenid,StgId) => {\r\n\r\n\r\n   let Response;\r\n   \r\n   \r\n   \r\n   const StgElmCmb = apiendpoints.StgElmCmb;\r\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n   //  /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = { convid: convID, tag: \"StgElmCmb\", orgid: \"\", vendid: \"0\" };\r\n    const frmData = {cmbScrId:screenid,cmbStgId:StgId}\r\n    const data = { hdr: frmHdr, body: frmData };\r\n   \r\n   \r\n    const token =    localStorage.getItem('token');\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n   \r\n    const url = StgElmCmb;\r\n   \r\n    console.log(reqHdr);\r\n   \r\n    await api.post(url, compressBase64(data)).then(function (response) {\r\n       const strResponse = JSON.parse(decompressBase64(response.data));      \r\n   \r\n       console.log(strResponse);\r\n          Response = strResponse ;\r\n   \r\n     })\r\n   \r\n     return  Response;\r\n   \r\n   };\r\n\r\n\r\n   export const GetEvntExGrpMap = async (screenid,StgId,StgElmDsigId,EvntId) => {\r\n\r\n\r\n      let Response;\r\n      \r\n      const ExGrpmap = apiendpoints.ExGrpmap;\r\n       const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n      //  /* Header */\r\n       const convID = generateUUID();\r\n       const frmHdr = { convid: convID, tag: \"StgElmCmb\", orgid: \"\", vendid: \"0\" };\r\n       const frmData = {cmbScrId:screenid,cmbStgId:StgId,cmbStgElmDsigId:StgElmDsigId,cmbEvntId:EvntId}\r\n       const data = { hdr: frmHdr, body: frmData };\r\n      \r\n       console.log(frmData);\r\n       \r\n      \r\n       const token =    localStorage.getItem('token');\r\n       const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n      \r\n       const url = ExGrpmap; \r\n      \r\n       await api.post(url, compressBase64(data)).then(function (response) {\r\n          const strResponse = JSON.parse(decompressBase64(response.data));      \r\n      \r\n          console.log(strResponse);\r\n             Response = strResponse ;\r\n      \r\n        })\r\n      \r\n        return  Response;\r\n      \r\n      };\r\n   \r\n","\r\nimport { generateUUID, compressBase64, decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nexport const GetExpressiontree = async (ScrId, GroupId) => {\r\n\r\n   let Response;\r\n\r\n   const ExpressionTree = apiendpoints.GetExpTree;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Exp Tree\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: ScrId, txtExprGroupId: GroupId }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   const reqHdr = { };\r\n   const combonurl = ExpressionTree;\r\n\r\n   await api.post(combonurl, compressBase64(data), reqHdr).then(function (response) {\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n      Response = strResponse;\r\n   })\r\n\r\n\r\n   // var indent = '~~~~~~~~~~~~~~~~~~~~';\r\n\r\n   // const listToTree = (arr = []) => {\r\n   //    let map = {}, node, node1, res = [], i, arr1 = [], obj = {}, children = [];\r\n\r\n   //    for (i = 0; i < arr.length; i += 1) {\r\n\r\n   //       var exprStr = \"\";\r\n\r\n   //       var indentSpace = indent.substring(0, arr[i].lvl).replace(/~/gi, \"&nbsp;&nbsp;&nbsp;\")\r\n\r\n   //       if (arr[i].exprntyid != 1) {\r\n   //          exprStr += \"<span style='color:blue;' >\" + indentSpace + arr[i].exprnty + \"</span>\";\r\n   //          if (arr[i].exprntyid != 3) {\r\n   //             exprStr += \"(\"\r\n   //          }\r\n   //          exprStr += \"<span style='color:maroon;' >\" + arr[i].exprn + \"</span>\";\r\n\r\n   //          if (arr[i].exprntyid == 21) {\r\n   //             exprStr += '-' + arr[i].stgname\r\n   //          }\r\n\r\n   //          if (arr[i].exprntyid != 3) {\r\n   //             exprStr += \")\"\r\n   //          }\r\n   //       }\r\n   //       else {\r\n   //          exprStr += indentSpace + arr[i].exprn;\r\n   //       }\r\n\r\n\r\n   //       map[arr[i].exprnid] = i;\r\n\r\n\r\n   //       obj = { id: arr[i].exprnid, name: exprStr, fixMenu: true, children: children }\r\n   //       arr1 = [...arr1, obj]\r\n   //       arr1[i].children = [];\r\n   //       if (arr[i].prexprnid == null) {\r\n   //          arr[i].prexprnid = 0;\r\n   //       }\r\n\r\n\r\n   //    };\r\n\r\n\r\n   //    for (i = 0; i < arr.length; i += 1) {\r\n   //       node = arr[i];\r\n   //       node1 = arr1[i];\r\n   //       if (node.prexprnid !== 0) {\r\n   //          console.log(arr1[i]);\r\n   //          arr1[map[node.prexprnid]].fixMenu = false;\r\n   //          arr1[map[node.prexprnid]].children.push(node1);\r\n   //       }\r\n   //       else {\r\n   //          res.push(node1);\r\n   //       };\r\n   //    };\r\n   //    return res;\r\n   // };\r\n\r\n\r\n   // const menutree = listToTree(Response.body.expressions)\r\n\r\n   // console.log(menutree)\r\n\r\n   return Response;\r\n\r\n};\r\n\r\nexport const GetEventTree = async (ScrId) => {\r\n\r\n   let Response;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Event Tree\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: ScrId }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   console.log('frmData', frmData)\r\n   const reqHdr = {  };\r\n\r\n   await api.post(apiendpoints.Evtree, compressBase64(data), reqHdr).then(function (response) {\r\n      Response = JSON.parse(decompressBase64(response.data));\r\n   })\r\n\r\n   var indent = '~~~~~~~~~~~~~~~~~~~~';\r\n\r\n   const listToTree = (arr = []) => {\r\n      let map = {}, node, node1, res = [], i, arr1 = [], obj = {}, children = [];\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n\r\n         var exprStr = \"\";\r\n\r\n         var indentSpace = indent.substring(0, arr[i].lvl).replace(/~/gi, \"&nbsp;&nbsp;&nbsp;\")\r\n\r\n         exprStr += indentSpace + \"<span style='color:blue;'>\";\r\n\r\n\r\n         if (arr[i].flag == 1)\r\n            exprStr += \"Stg-\";\r\n         else if (arr[i].flag == 2)\r\n            exprStr += \"Evn-\";\r\n         else if (arr[i].flag == 3)\r\n            exprStr += \"ExGr-\";\r\n         else\r\n            exprStr += \"\";\r\n\r\n         exprStr += \"</span>\" + arr[i].leaf;\r\n\r\n         map[arr[i].id] = i;\r\n\r\n         obj = { id: arr[i].id, name: exprStr, fixMenu: true, children: children }\r\n         arr1 = [...arr1, obj]\r\n         arr1[i].children = [];\r\n         if (arr[i].prntid == null) {\r\n            arr[i].prntid = 0;\r\n         }\r\n\r\n      };\r\n\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n         node = arr[i];\r\n         node1 = arr1[i];\r\n         if (node.prntid !== 0) {\r\n            console.log(arr1[i]);\r\n            arr1[map[node.prntid]].fixMenu = false;\r\n            arr1[map[node.prntid]].children.push(node1);\r\n         }\r\n         else {\r\n            res.push(node1);\r\n         };\r\n      };\r\n      return res;\r\n   };\r\n\r\n\r\n   const menutree = listToTree(Response.body.expressions)\r\n\r\n   console.log(menutree)\r\n\r\n   return { data: { menutree: menutree, expresponse: Response.body.expressions } };\r\n\r\n\r\n\r\n};\r\n\r\n\r\nexport const GetUIDesignTree = async (ScrId, StgId) => {\r\n\r\n   let Response;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Get Stg UI Design\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: ScrId, cmbStgId: StgId }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   console.log('frmData', frmData)\r\n   const reqHdr = { };\r\n\r\n   await api.post(apiendpoints.uidsgn, compressBase64(data), reqHdr).then(function (response) {\r\n      Response = JSON.parse(decompressBase64(response.data));\r\n   })\r\n\r\n   var indent = '~~~~~~~~~~~~~~~~~~~~';\r\n\r\n   const listToTree = (arr = []) => {\r\n      let map = {}, node, node1, res = [], i, arr1 = [], obj = {}, children = [];\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n\r\n         var exprStr = \"\";\r\n\r\n         var indentSpace = indent.substring(0, arr[i].lvl).replace(/~/gi, \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\")\r\n\r\n         exprStr += indentSpace + arr[i].uiexprn;\r\n\r\n         map[arr[i].uidsgnid] = i;\r\n\r\n         obj = { id: arr[i].uidsgnid, name: exprStr, fixMenu: true, children: children }\r\n         arr1 = [...arr1, obj]\r\n         arr1[i].children = [];\r\n         if (arr[i].prntid == null) {\r\n            arr[i].prntid = 0;\r\n         }\r\n\r\n      };\r\n\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n         node = arr[i];\r\n         node1 = arr1[i];\r\n         if (node.prntid !== 0) {\r\n            console.log(arr1[i]);\r\n            arr1[map[node.prntid]].fixMenu = false;\r\n            arr1[map[node.prntid]].children.push(node1);\r\n         }\r\n         else {\r\n            res.push(node1);\r\n         };\r\n      };\r\n      return res;\r\n   };\r\n\r\n   const uitree  = listToTree(Response.body.uidsgn)\r\n   return { data: { uitree: uitree, actualUiTree : Response.body.uidsgn } };\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const data = [\r\n//   {\r\n//     id: 1,\r\n//     name: 'Node 1',\r\n//     children: [\r\n//       {\r\n//         id: 2,\r\n//         name: 'Node 1.1',\r\n//         children: [\r\n//           {\r\n//             id: 3,\r\n//             name: 'Node 1.1.1',\r\n//             children: []\r\n//           }\r\n//         ]\r\n//       },\r\n//       {\r\n//         id: 4,\r\n//         name: 'Node 1.2',\r\n//         children: []\r\n//       }\r\n//     ]\r\n//   },\r\n//   {\r\n//     id: 5,\r\n//     name: 'Node 2',\r\n//     children: [\r\n//       {\r\n//         id: 6,\r\n//         name: 'Node 2.1',\r\n//         children: []\r\n//       },\r\n//       {\r\n//         id: 7,\r\n//         name: 'Node 2.2',\r\n//         children: []\r\n//       }\r\n//     ]\r\n//   }\r\n// ];","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllScreenList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllScreen = apiendpoints.AllScreen;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllScreen\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllScreen;\r\n\r\n console.log(combonurl); \r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllStageList = async (screenid) => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllStage = apiendpoints.AllStage;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllStage\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {txtScreenId:screenid}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllStage;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n\r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n","import { generateUUID, compressBase64, decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nexport const GetExpGrpLst = async (screenid) => {\r\n\r\n   let Response;\r\n\r\n   /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Expgroup\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: screenid }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   const reqHdr = {};\r\n\r\n   try {\r\n\r\n      await api.post(apiendpoints.GetExpGrpLst, compressBase64(data), reqHdr).then(function (response) {\r\n         const strResponse = JSON.parse(decompressBase64(response.data));\r\n         Response = strResponse;\r\n      })\r\n\r\n      return Response;\r\n   }\r\n   catch (error) {\r\n      console.log(error); // Network E\r\n   }\r\n};\r\n"],"names":["apiendpoints","appsettings","schema","localStorage","getItem","yup","shape","cmbScrId","required","console","log","stageresbody","setstagelistresbody","useState","StageElementresbody","setStageElementlistresbody","Stageid","setStageid","stagefilterlist","setstagefilterlist","ExpGrpresbody","setExpGrpresbody","alert","setAlert","isLoading","setLoanding","Screenid","setScreenid","screenfilterlist","setscreenfilterlist","treedata","settreedata","actualtreedata","setactualtreedata","GroupExpid","setGroupExpid","selectedGrpExp","setselectedGrpExp","EvntList","setEvntList","Elementid","setElementid","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","FetchStageElmEvntCmb","async","obj","screenid","Stgid","StgElmDsigId","Response","StgElmEvntCmb","data","hdr","convid","generateUUID","tag","orgid","vendid","body","cmbStgId","cmbStgElmDsigId","reqHdr","headers","Authorization","url","api","post","compressBase64","then","response","strResponse","JSON","parse","decompressBase64","GetStgElmEvntCmb","ElementId","elmevnt","Array","isArray","FetchExpGrpList","ExpGrpListResponse","GetExpGrpLst","expressions","resbody","setresbody","useEffect","FetchCombodata","setm","LoadCombo","ScreenListResponse","GetAllScreenList","Screens","filter","res","IsActive","FetchAllScreenList","ScreenOnChange","e","target","value","StageListResponse","GetAllStageList","Stages","stringify","FetchAllStageList","expreres","GetEventTree","menutree","expresponse","FetchEventtree","StageOnChange","id","ElementListResponse","GetStgEleCmb","stagid","stgelm","FetchStageElementList","ElementOnChange","getEvntExGrpMap","GetEvntExGrpMap","EventId","expgrps","mapgrp","i","length","item","egid","exgrpid","push","FetchEvntExGrpMap","onSubmitHandler","Expgrps","ord","objgroup","frmData","cmbEvntId","Updexgrpmap","frmHdr","reqdata","rst","ShowAlert","fdr","rstmsg","setTimeout","toast","success","AlertType","message","cmbScreenId","txtExprGroupId","err","error","alertType","TreeNode","_ref","node","hasChildren","children","_jsxs","_jsx","className","dangerouslySetInnerHTML","__html","name","map","childNode","_errors$cmbScrId","_errors$cmbStgId","_Fragment","style","borderRadius","Spinner","Alerts","autocomplete","htmlFor","onChange","ScreenId","ScrName","x","StageId","StageName","k","v","Scrollbar","height","Table","striped","bordered","hover","egname","type","onClick","rowval","tmpselectedGrpExp","Assigngrouplist","index","prevRows","newRows","temp","handleMoveUp","handleMoveDown","idToRemove","DeleteGroup","class","txtSeExprnId","txtParentSeExprnId","cmbSeExprType","txtExpression","GetStgScrElements","FetchStgScrElements","scrid","StgId","StgElmCmb","EvntId","ExGrpmap","GetExpressiontree","ScrId","GroupId","ExpressionTree","GetExpTree","combonurl","Evtree","node1","arr","arguments","undefined","arr1","exprStr","substring","lvl","replace","flag","leaf","fixMenu","prntid","listToTree","GetUIDesignTree","uidsgn","uitree","uiexprn","uidsgnid","actualUiTree","AllScreen","AllStage","txtScreenId"],"sourceRoot":""}