{"version":3,"file":"static/js/351.f7e2a590.chunk.js","mappings":"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","sources":["components/userrole/userstatuschange.js","components/utilities/getuserlist.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// import \"font-awesome/css/font-awesome.min.css\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport { GetAllUserList } from \"../utilities/getuserlist\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Scrollbar } from \"react-scrollbars-custom\";\r\n\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../utilities/utils\";\r\n\r\nconst schema = yup.object().shape({\r\n  cmbStatus: yup.string().required(\"Pls select the role status\"),\r\n});\r\n\r\n//rfce - command\r\nfunction UserstatusChange() {\r\n  // Const & Var\r\n\r\n  const [userresbody, setuserlistresbody] = useState([]);\r\n  const [alert, setAlert] = useState(\"\");\r\n  const [isLoading, setLoanding] = useState(false);\r\n  const [UserStatusMaster, setUserStatusMaster] = useState([]);\r\n  const [UserStatus, setUserStatus] = useState([]);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  // General Function\r\n\r\n  const FetchUserList = async () => {\r\n    const UserListResponse = await GetAllUserList();\r\n    setuserlistresbody(UserListResponse.body.Users);\r\n\r\n    console.log(JSON.stringify(UserListResponse.body.Users));\r\n  };\r\n\r\n  //   fetch combo values\r\n\r\n  const LoadCombo = async () => {\r\n    const opt = \"|USRS|\";\r\n    const optw = \"\";\r\n    const ComboResponse = await FetchCombodata(opt, optw);\r\n\r\n    console.log(JSON.stringify(ComboResponse.body.usrs));\r\n\r\n    setUserStatusMaster(ComboResponse.body.usrs);  \r\n    \r\n   \r\n\r\n  };\r\n\r\n  // Useeffect\r\n\r\n  useEffect(() => {\r\n    FetchUserList();\r\n    LoadCombo();\r\n  }, []);\r\n\r\n  // Event function start\r\n\r\n  const onSubmitHandler = async (data) => {\r\n\r\n\r\n    let frmData = { txtNewStatusId:data.cmbStatus,txtUserIds:UserStatus};\r\n\r\n    let createmenuurl = \"/cmpstp/cngusrstus\";\r\n    console.log(frmData);\r\n\r\n\r\n    setLoanding(true);\r\n\r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"cngusrstus\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n\r\n    console.log(reqdata);\r\n\r\n    try {\r\n      //debugger;\r\n      const response = await api.post(\r\n        createmenuurl,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        setLoanding(false);\r\n      } else {\r\n        setTimeout(() => {\r\n          console.log(strResponse.fdr);\r\n          ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n          setTimeout(() => {\r\n            setAlert({\r\n              AlertType: \"null\",\r\n              message: \"null\",\r\n            });\r\n          }, 600);\r\n          FetchUserList();          \r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      ShowAlert(\"Error\", \"Unable to process request\");\r\n      setLoanding(false);\r\n    }\r\n  }\r\n\r\n\r\n  //---------------onSubmitHandler end------\r\n\r\n  const CheckboxhandleChange = (e, x) => {\r\n    console.log(e);\r\n    console.log(x);\r\n\r\n    let ustatus = UserStatus;\r\n\r\n    if (e.target.value == true) ustatus.push(x.UserId);\r\n    else {\r\n      const index = ustatus.indexOf(x.UserId);\r\n      if (index > -1) {\r\n        ustatus.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    setUserStatus(ustatus);\r\n\r\n    console.log(UserStatus);\r\n  };\r\n\r\n  // Event Function End\r\n\r\n  // Main Function\r\n\r\n  const ShowAlert = (alertType, message) => {\r\n    setAlert({\r\n      AlertType: alertType,\r\n      message: message,\r\n    });\r\n  };\r\n\r\n  try {\r\n    return (\r\n      <>\r\n        <section className=\"vh-100\">\r\n          <div className=\"container h-100\">\r\n            <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\r\n              <div className=\"card-header\">\r\n                <strong className=\"card-title\">User Status Change</strong>\r\n              </div>\r\n     \r\n              <Scrollbar style={{ width: 1200, height: 550 }}>\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"text-center\">Select</th>\r\n                    <th className=\"text-center\">Id</th>\r\n                    <th className=\"text-center\">User Id</th>\r\n                    <th className=\"text-center\">Name</th>\r\n                    <th className=\"text-center\">Status</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {userresbody.map((x) => {\r\n                    return (\r\n                      <tr>\r\n                        <td align=\"center\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            onChange={(e) => {\r\n                              CheckboxhandleChange(\r\n                                {\r\n                                  target: {\r\n                                    value: e.target.checked,\r\n                                  },\r\n                                },\r\n                                x\r\n                              );\r\n                            }}\r\n                          ></input>\r\n                        </td>\r\n                        <td>{x.UserId}</td>\r\n                        <td>{x.Username}</td>\r\n                        <td>{x.FName + \" \" + x.LName}</td>\r\n                        <td>\r\n                            \r\n                           {\r\n                            UserStatusMaster.find((res) => (res.k == x.StatusId))\r\n                              .v\r\n                          } \r\n\r\n\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </Table>\r\n              </Scrollbar>\r\n\r\n              <div className=\"card-body p-md-5\">\r\n                {isLoading ? <Spinner></Spinner> : \"\"}\r\n                <Alerts alert={alert} />\r\n\r\n                <form\r\n                  onSubmit={handleSubmit(onSubmitHandler)}\r\n                  autocomplete=\"off\"\r\n                >\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <label htmlFor=\"cmbStatus\" className=\"form-label\">\r\n                          Status\r\n                        </label>\r\n                        <select\r\n                          {...register(\"cmbStatus\")}\r\n                          className=\"form-control\"\r\n                          id=\"cmbStatus\"\r\n                        >\r\n                          <option value=\"\">- Select -</option>\r\n                          {\r\n                            //Combo Data binding\r\n\r\n                            UserStatusMaster.map((res) => (\r\n                              <option key={res.k} value={res.k}>\r\n                                {res.v}\r\n                              </option>\r\n                            ))\r\n                          }\r\n                        </select>\r\n                        <p>{errors.cmbStatus?.message}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\"><br></br> \r\n                        <button type=\"submit\" className=\"btn btn-primary\">\r\n                          Submit\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n\r\n            </div>\r\n            {/* </div>\r\n              </div> */}\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nexport default UserstatusChange;\r\n","import React, { useState, useEffect } from \"react\";\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetUserList = async () => {\n\n\nlet Response;\nconst UserList = apiendpoints.UserList;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl = UserList;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n export const GetAllUserList = async () => {\n\n\nlet Response;\nconst AllUserList = apiendpoints.AllUserList;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl =AllUserList;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n"],"names":["schema","yup","shape","cmbStatus","required","userresbody","setuserlistresbody","useState","alert","setAlert","isLoading","setLoanding","UserStatusMaster","setUserStatusMaster","UserStatus","setUserStatus","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","FetchUserList","async","UserListResponse","GetAllUserList","body","Users","console","log","JSON","stringify","useEffect","ComboResponse","FetchCombodata","usrs","LoadCombo","onSubmitHandler","frmData","txtNewStatusId","data","txtUserIds","frmHdr","convid","generateUUID","tag","orgid","vendid","reqHdr","headers","Authorization","localStorage","getItem","reqdata","hdr","response","api","post","compressBase64","strResponse","parse","decompressBase64","rst","ShowAlert","fdr","rstmsg","setTimeout","AlertType","message","err","alertType","_errors$cmbStatus","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Scrollbar","width","height","Table","striped","bordered","hover","map","x","align","type","onChange","e","CheckboxhandleChange","ustatus","target","value","push","UserId","index","indexOf","splice","checked","Username","FName","LName","find","res","k","StatusId","v","Spinner","Alerts","onSubmit","autocomplete","htmlFor","id","error","apiendpoints","appsettings","GetUserList","Response","UserList","combonurl","then","AllUserList"],"sourceRoot":""}