{"version":3,"file":"static/js/143.8e7a88b5.chunk.js","mappings":"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","sources":["components/userrole/nodesourse.js","components/userrole/rolestatuschange.js","components/utilities/getrolelist.js"],"sourcesContent":["\nimport React  from \"react\";\n\n\n\n\n\nexport   function BranchRoleMapNodeSource(arr1,arr2){\n \n  let obj = {};\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n\n\n  console.log(arr1)\n  console.log(arr2)\n\n\n      arr1.forEach(arr1item => {\n\n\n\n      arr2.forEach(arr2item => {\n        obj1 = {'value': arr2item.RoleId +'-' + arr1item.BranchId,'label':arr2item.RoleName};  \n        child= [...child,obj1]       \n      }  \n      \n      );\n  \n      obj = {'value': arr1item.BranchId,'label':arr1item.Name,'children':child};\n      \n      parent = [...parent,obj]\n\n\n\n      child= []  \n\n  } )\n\n return parent;\n\n};\n\n\nexport   function UserBranchRoleMapNodeSource(arr1){\n \n  let obj = {};\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let arr2 = [];\n\n\n  console.log(arr1)\n  console.log(arr2)\n\n\n      arr1.forEach(arr1item => {\n\n       arr2 = arr1item.Roles;\n\n      arr2.forEach(arr2item => {\n        obj1 = {'value': arr2item.BRMapId +'-' + arr1item.BranchId,'label':arr2item.RName};  \n        child= [...child,obj1]       \n      }  \n      \n      );\n  \n      obj = {'value': arr1item.BranchId,'label':arr1item.Name,'children':child};\n      \n      parent = [...parent,obj]\n\n      child= []  \n\n  } )  \n\n return parent;\n\n}\n\n\n\nexport   function statuschangeRoleMapNodeSource(Rolearr){\n \n  let obj = {};\n  let parent=[];\n\n\n\n  console.log('Rolearr',Rolearr)\n\n\n  Rolearr.forEach(arr1item => {\n\n      \n\n        var staus =  arr1item.BRUMapStatus; \n             \n        obj = {'value': arr1item.RoleId ,'label': \" \" +  arr1item.RoleName + ' ('  + staus + ')' , showNodeIcon:false};  \n     \n      \n      parent = [...parent,obj]    \n\n  } )  \n\n return parent;\n\n}\n\n\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport { GetRoleList } from \"../utilities/getrolelist\";\r\nimport { statuschangeRoleMapNodeSource } from \"./nodesourse\";\r\nimport {FetchCombodata} from '../utilities/combodata';\r\nimport { Scrollbar } from \"react-scrollbars-custom\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../utilities/utils\";\r\n\r\n\r\n \r\n\r\n\r\nconst schema = yup.object().shape({\r\n       cmbStatus: yup.string().required(\"Pls select the role status\")\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //------------------------------------------Main function--------------------------------------------------------------\r\n\r\n\r\n//main function start\r\n\r\nfunction RoleStatusChange() {\r\n\r\n\r\n\r\n// Variable declaration\r\n\r\n// const & Use state \r\n\r\nconst [isLoading, setLoanding] = useState(false);\r\nconst [alert, setAlert] = useState(\"\");\r\nconst [roleresbody, setrolelistresbody] = useState([]);\r\nconst [BRUMapStatusMaster,setBRUMapStatusMaster]= useState([]);\r\nconst [RoleSelected,setRoleSelected]=useState([]);\r\n\r\n\r\nconst {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },  \r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n//General function\r\n\r\n// Get Rle List\r\n\r\n\r\nconst FetchRoleList = async () => {\r\n    const RoleListResponse = await GetRoleList();\r\n    setrolelistresbody(RoleListResponse.body.Roles);\r\n  };\r\n\r\n\r\n  //   fetch combo values\r\n \r\n const LoadCombo = async () => {\r\n\r\n  const opt = '|BRUS|';\r\n  const optw = '';\r\n  const ComboResponse = await FetchCombodata(opt,optw);\r\n        setBRUMapStatusMaster(ComboResponse.body.brus)\r\n\r\n  }\r\n\r\n\r\nconst ShowAlert = (alertType, message) => {\r\n    setAlert({\r\n      AlertType: alertType,\r\n      message: message,\r\n    });\r\n  };\r\n\r\n//General end\r\n\r\n// Event Function start\r\n\r\n//--------------------CheckboxhandleChange------------------------\r\n\r\nconst CheckboxhandleChange = (e, x) => {\r\n  console.log(e);\r\n  console.log(x);\r\n\r\n  let ustatus = RoleSelected;\r\n\r\n  if (e.target.value == true) ustatus.push(x.RoleId);\r\n  else {\r\n    const index = ustatus.indexOf(x.RoleId);\r\n    if (index > -1) {\r\n      ustatus.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  console.log(RoleSelected);\r\n};\r\n\r\n\r\n//-----------------CheckboxhandleChange end------\r\n\r\n\r\n\r\n//---------------onSubmitHandler start------\r\nconst onSubmitHandler = async (data, e) => {    \r\n     \r\n\r\n    \r\n     let frmData = { txtNewStatusId:data.cmbStatus,txtRoleIds:RoleSelected};\r\n\r\n     let createmenuurl = \"/cmpstp/cngrolstus\";\r\n     console.log(frmData);\r\n \r\n\r\n     setLoanding(true);\r\n\r\n     //e.preventDefault();\r\n     /* Header */\r\n     const convID = generateUUID();\r\n     const frmHdr = {\r\n       convid: convID,\r\n       tag: \"cngrolstus\",\r\n       orgid: \"\",\r\n       vendid: \"0\",\r\n     };\r\n\r\n     const token = localStorage.getItem(\"token\");\r\n     const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n     const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n     const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n\r\n     console.log(reqdata);\r\n\r\n     try {\r\n       //debugger;\r\n       const response = await api.post(\r\n         createmenuurl,\r\n         compressBase64(reqdata),\r\n         reqHdr\r\n       );\r\n\r\n       const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n       console.log(strResponse);\r\n\r\n       if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n         ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n         setLoanding(false);\r\n       } else {\r\n         setTimeout(() => {\r\n           console.log(strResponse.fdr);\r\n           ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n           setTimeout(() => {\r\n             setAlert({\r\n               AlertType: \"null\",\r\n               message: \"null\",\r\n             });\r\n           }, 600);\r\n           FetchRoleList();          \r\n           setLoanding(false);\r\n         }, 300);\r\n       }\r\n     } catch (err) {\r\n       console.log(err.message);\r\n       ShowAlert(\"Error\", \"Unable to process request\");\r\n       setLoanding(false);\r\n     }\r\n   }\r\n\r\n\r\n//---------------onSubmitHandler end------\r\n\r\n// Event Fnction end\r\n\r\n\r\n\r\n\r\n// use effect\r\n\r\nuseEffect(() => {\r\n    LoadCombo();\r\n    FetchRoleList();\r\n  }, []);\r\n\r\n\r\n // HTML part\r\n\r\n    try {\r\n\r\n      return (\r\n        <>\r\n          <section className=\"vh-100\">\r\n            <div className=\"container h-100\">\r\n              <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\r\n                <div className=\"card-header\">\r\n                  <strong className=\"card-title\">Role Status Change</strong>\r\n                </div>\r\n               \r\n\r\n                <Scrollbar style={{ width: 1200, height: 550 }}>\r\n                <Table striped bordered hover>\r\n                  <thead>\r\n                    <tr>\r\n                      <th className=\"text-center\">Select</th>\r\n                      <th className=\"text-center\">Id</th>\r\n                      <th className=\"text-center\">Role</th>                  \r\n                      <th className=\"text-center\">Status</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {roleresbody.map((x) => {\r\n                      return (\r\n                        <tr>\r\n                          <td align=\"center\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              onChange={(e) => {\r\n                                CheckboxhandleChange(\r\n                                  {\r\n                                    target: {\r\n                                      value: e.target.checked,\r\n                                    },\r\n                                  },\r\n                                  x\r\n                                );\r\n                              }}\r\n                            ></input>\r\n                          </td>\r\n                          <td>{x.RoleId}</td>\r\n                          <td>{x.RoleName}</td>      \r\n                          <td>{x.BRUMapStatus}</td>                      \r\n                          <td>\r\n                           \r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n                </Scrollbar>\r\n\r\n\r\n                <div className=\"card-body p-md-5\">\r\n                  {isLoading ? <Spinner></Spinner> : \"\"}\r\n                  <Alerts alert={alert} />\r\n  \r\n                  <form\r\n                    onSubmit={handleSubmit(onSubmitHandler)}\r\n                    autocomplete=\"off\"\r\n                  >\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm\">\r\n                        <div className=\"mb-3\">\r\n                          <label htmlFor=\"cmbStatus\" className=\"form-label\">\r\n                            Status\r\n                          </label>\r\n                          <select\r\n                            {...register(\"cmbStatus\")}\r\n                            className=\"form-control\"\r\n                            id=\"cmbStatus\"\r\n                          >\r\n                            <option value=\"\">- Select -</option>\r\n                            {\r\n                              //Combo Data binding\r\n  \r\n                              BRUMapStatusMaster.map((res) => (\r\n                                <option key={res.k} value={res.k}>\r\n                                  {res.v}\r\n                                </option>\r\n                              ))\r\n                            }\r\n                          </select>\r\n                          <p>{errors.cmbStatus?.message}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-sm\">\r\n                        <div className=\"mb-3\"><br></br> \r\n                          <button type=\"submit\" className=\"btn btn-primary\">\r\n                            Submit\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n                \r\n              </div>\r\n             \r\n              {/* </div>\r\n                </div> */}\r\n            </div>\r\n          </section>\r\n        </>\r\n      );\r\n\r\n      \r\n    } catch (error) {\r\n      \r\n    }\r\n\r\n\r\n    \r\n\r\n}\r\n\r\nexport default RoleStatusChange;","import React, { useState, useEffect } from \"react\";\r\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetRoleList = async () => {\r\n\r\n\r\nlet Response;\r\nconst RoleList = apiendpoints.RoleList;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = RoleList;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));\r\n    console.log(strResponse);    \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n\r\n"],"names":["BranchRoleMapNodeSource","arr1","arr2","obj","obj1","parent","child","console","log","forEach","arr1item","arr2item","RoleId","BranchId","RoleName","Name","UserBranchRoleMapNodeSource","Roles","BRMapId","RName","schema","yup","shape","cmbStatus","required","isLoading","setLoanding","useState","alert","setAlert","roleresbody","setrolelistresbody","BRUMapStatusMaster","setBRUMapStatusMaster","RoleSelected","setRoleSelected","register","handleSubmit","formState","errors","useForm","resolver","yupResolver","FetchRoleList","async","RoleListResponse","GetRoleList","body","ShowAlert","alertType","message","AlertType","onSubmitHandler","data","e","frmData","txtNewStatusId","txtRoleIds","frmHdr","convid","generateUUID","tag","orgid","vendid","reqHdr","headers","Authorization","localStorage","getItem","reqdata","hdr","response","api","post","compressBase64","strResponse","JSON","parse","decompressBase64","rst","stringify","fdr","rstmsg","setTimeout","err","useEffect","ComboResponse","FetchCombodata","brus","LoadCombo","_errors$cmbStatus","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Scrollbar","width","height","Table","striped","bordered","hover","map","x","align","type","onChange","CheckboxhandleChange","ustatus","target","value","push","index","indexOf","splice","checked","BRUMapStatus","Spinner","Alerts","onSubmit","autocomplete","htmlFor","id","res","k","v","error","apiendpoints","appsettings","Response","RoleList","combonurl","then"],"sourceRoot":""}