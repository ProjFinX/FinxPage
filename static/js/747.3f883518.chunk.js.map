{"version":3,"file":"static/js/747.3f883518.chunk.js","mappings":"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","sources":["components/dynamicscreendefinition/EvntExprGroup.js","components/utilities/geteventexpression.js","components/utilities/getscrengrpelms.js"],"sourcesContent":["import React, { Children } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport { GetExpGrpLst } from \"../utilities/geteventexpression\";\r\nimport { GetExpressiontree } from \"../utilities/getScrexpresiontree\";\r\nimport { generateUUID, compressBase64, decompressBase64, } from \"../utilities/utils\";\r\nimport appsettings from \"../../appsettings.json\"\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport { GetScreenGroupElms } from \"../utilities/getscrengrpelms\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { ModalBody, ModalTitle } from \"react-bootstrap\";\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nconst schema = yup.object().shape({\r\n  txtExpGroupName: yup.string().required(\"Please enter expression group\"),\r\n});\r\n\r\n\r\n\r\nfunction EvntExprGroup({ ScrId }) {\r\n\r\n  const [exprGroup, setExprGroup] = useState([]);\r\n  const { register, handleSubmit, getValues, setValue, formState: { errors }, reset, } = useForm({ resolver: yupResolver(schema) });\r\n  const [expressionTree, setExpressionTree] = useState([]);\r\n\r\n  const [selectedexprn, setSelectedExprn] = useState('');\r\n\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n\r\n  const [dbConnId, setDbConnId] = useState(0);\r\n  const [elementGroupId, setElementGroupId] = useState(-1);\r\n\r\n  const [dbConn, setDbConn] = useState([]);\r\n  const [mapType, setMapType] = useState(1);\r\n  const [uniqueField, setUniqueField] = useState(null);\r\n  const [elementGroups, setElementGroups] = useState([]);\r\n  const [chileElements, setChileElements] = useState([]);\r\n  const [elementMap, setElementMap] = useState([]);\r\n\r\n  const [exprnId, setExprnId] = useState(0);\r\n  const [parentExprnId, setPrntExprnId] = useState(0);\r\n  const [exprnTypeId, setExprnTypeId] = useState(0);\r\n\r\n \r\n\r\n\r\n  const callServer = async (frmData, tag, endPoint, refreshFlag) => {\r\n\r\n    const frmHdr = { convid: generateUUID(), tag: tag, orgid: \"\", vendid: \"0\", };\r\n\r\n    const reqHdr = {};\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    try {\r\n      const response = await api.post(endPoint, compressBase64(reqdata), reqHdr);\r\n      const resData = JSON.parse(decompressBase64(response.data));\r\n\r\n      if (resData.hdr.rst == \"SUCCESS\") {\r\n        setTimeout(() => {\r\n          toast.success(\"Successfully updated\");\r\n          if (refreshFlag == 1) {\r\n            resetExprGroup();\r\n            FetchExpGrpList(ScrId);\r\n          }\r\n          else if (refreshFlag == 2) {\r\n            resetExpression();\r\n            FetchExpTree(frmData.txtExprGroupId);\r\n            setModalVisible(false);\r\n          }\r\n        }, 300);\r\n      }\r\n      else {\r\n        setTimeout(() => {\r\n          toast.error(JSON.stringify(resData.fdr[0].rstmsg));\r\n        }, 300);\r\n      }\r\n\r\n    } catch (err) {\r\n      setTimeout(() => {\r\n        toast.error(\"Unable to process request\");\r\n      }, 300);\r\n    }\r\n\r\n  };\r\n\r\n\r\n  const resetExprGroup = () => {\r\n    reset({ txtExprGroupId: \"\", txtExpGroupName: \"\" });\r\n  };\r\n\r\n  const LoadCombo = async () => {\r\n    const opt = '|DBCN|';\r\n    const optw = '';\r\n    const Response = await FetchCombodata(opt, optw);\r\n\r\n    setDbConn(Response.body.dbcn);\r\n\r\n  };\r\n\r\n  const FetchExpGrpList = async (ScrId) => {\r\n    const response = await GetExpGrpLst(ScrId);\r\n    setExprGroup(response.body.expressions);\r\n  };\r\n\r\n  const FetchElementGroups = async () => {\r\n    const Response = await GetScreenGroupElms(ScrId);\r\n    setElementGroups(Response.body.elements);\r\n  };\r\n\r\n\r\n  const FetchExpTree = async (ExprGroupId) => {\r\n    const response = await GetExpressiontree(ScrId, ExprGroupId);\r\n    setExpressionTree(response.body.expressions);\r\n  };\r\n\r\n\r\n\r\n\r\n  const ExprGroupList = () => {\r\n\r\n    const editExprGroup = (data) => {\r\n      reset({\r\n        txtExprGroupId: data.egid, txtExpGroupName: data.egname\r\n      })\r\n    }\r\n\r\n    const delExprGroup = (id) => {\r\n      if (window.confirm(\"Are you sure\")) {\r\n        let frmData = { cmbScrId: ScrId, txtExprGroupId: id };\r\n        callServer(frmData, \"Delete Expression Group\", apiendpoints.Delexprngrp, 1);\r\n      }\r\n    }\r\n\r\n    const setExprGroupName = (data) => {\r\n      document.getElementById(\"lblExprGroup\").innerHTML = data.egid + \" / \" + data.egname;\r\n\r\n      reset({\r\n        txtExprGrpId: data.egid, txtParentExprnId: \"\", txtSeExprTypeId: \"\", txtExprnId: \"\", txtExpression: \"\"\r\n      });\r\n\r\n      FetchExpTree(data.egid);\r\n    };\r\n\r\n\r\n    return (\r\n\r\n      <>\r\n\r\n        {(exprGroup) ?\r\n\r\n          exprGroup.map((data, index) => {\r\n\r\n            return (\r\n              <tr key={index}>\r\n                <td>{data.egid}</td>\r\n                <td> <button onClick={() => (setExprGroupName(data))} className=\"btn btn-link\">{data.egname}</button></td>\r\n                <td>\r\n                  <button onClick={() => (editExprGroup(data))} className=\"btn btn-light clr-gray\"><i className=\"fa fa-edit\"></i></button>\r\n                  <button onClick={() => (delExprGroup(data.egid))} className=\"btn btn-light clr-gray\"><i className=\"fa fa-trash-o\"></i></button>\r\n                </td>\r\n              </tr>\r\n            )\r\n          })\r\n\r\n          : <></>}\r\n\r\n      </>\r\n\r\n    )\r\n\r\n  };\r\n\r\n\r\n  const ExpTree = ({ expTreeLst }) => {\r\n\r\n    if (expTreeLst) {\r\n\r\n      let root = expTreeLst.filter((x) => x.prexprnid == null);\r\n\r\n      return (\r\n        <>\r\n          {(root.length > 0) ?\r\n            <ul>\r\n              {(root.map((node) => {\r\n                return (\r\n                  <>\r\n                    <ExpNode expTreeLst={expTreeLst} treenode={node} />\r\n                  </>\r\n                )\r\n              }))}\r\n            </ul>\r\n            : <></>}\r\n        </>\r\n      )\r\n\r\n    }\r\n  };\r\n\r\n\r\n  const ExpNode = ({ expTreeLst, treenode }) => {\r\n\r\n\r\n    let lstNode = expTreeLst.filter(x => x.prexprnid == treenode.exprnid)\r\n    if (lstNode.length > 0) {\r\n\r\n      return (\r\n        <li>\r\n          <details open>\r\n            <summary id={'id' + treenode.exprnid}>\r\n              <input type=\"checkbox\" />\r\n              <button type=\"button\" id={'ui' + treenode.exprnid} className=\"btn btn-light\"  >\r\n                <span dangerouslySetInnerHTML={{ __html: treenode.exprn }} ></span>\r\n              </button>\r\n              <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => setParentExprnId(treenode.exprnid)} ><i className=\"fa fa-plus\"></i></button>\r\n              <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => editExpression(treenode)}><i className=\"fa fa-edit\"></i></button>\r\n              <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => deleteExpression(treenode.exprnid)} ><i className=\"fa fa-trash-o\"></i></button>\r\n              <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => reorderExpression(treenode.exprnid, 'U')} ><i className=\"fa fa-arrow-up\"></i></button>\r\n              <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => reorderExpression(treenode.exprnid, 'D')}><i className=\"fa fa-arrow-down\"></i></button>\r\n\r\n            </summary>\r\n            <ul>\r\n              {lstNode.map((node) => {\r\n                return (\r\n                  <ExpNode expTreeLst={expTreeLst} treenode={node} />\r\n                )\r\n              })}\r\n            </ul>\r\n          </details>\r\n        </li>\r\n      );\r\n\r\n    }\r\n    else {\r\n\r\n      return (\r\n        <li id={'id' + treenode.exprnid}>\r\n          <span>&nbsp;</span>\r\n          <input type=\"checkbox\" />\r\n          &nbsp;\r\n          <span dangerouslySetInnerHTML={{ __html: treenode.exprn }}></span>\r\n          \r\n          {\r\n            ( treenode.exprntyid==2 || treenode.exprntyid==3 || treenode.exprntyid==4 || treenode.exprntyid==6 ) ?\r\n            <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => setParentExprnId(treenode.exprnid)} ><i className=\"fa fa-plus\"></i></button>\r\n            :<></>\r\n          }\r\n          \r\n          <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => editExpression(treenode)}><i className=\"fa fa-edit\"></i></button>\r\n          <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => deleteExpression(treenode.exprnid)} ><i className=\"fa fa-trash-o\"></i></button>\r\n          <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => reorderExpression(treenode.exprnid, 'U')} ><i className=\"fa fa-arrow-up\"></i></button>\r\n          <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => reorderExpression(treenode.exprnid, 'D')}><i className=\"fa fa-arrow-down\"></i></button>\r\n        </li>\r\n      );\r\n\r\n    }\r\n  };\r\n\r\n\r\n  const resetExpression = () => {\r\n    reset({\r\n      txtParentExprnId: \"\", txtSeExprTypeId: \"\", txtExprnId: \"\", txtExpression: \"\",\r\n      cmbDbConnId: \"0\", MapType1: \"\", MapType2: \"\", cmbGrpElementId: \"-1\", txtIndexName: \"\",\r\n      uniqueField:\"\"\r\n    });\r\n\r\n    setExprnId('');\r\n    setPrntExprnId('');\r\n    setExprnTypeId('');\r\n\r\n    setChileElements([]);\r\n    setModalVisible(false);\r\n    setElementGroupId(-1);\r\n    setDbConnId(0);\r\n    setElementMap([]);\r\n    setUniqueField('');\r\n  };\r\n\r\n\r\n  const clearParentExprnId = () => {\r\n    setValue('txtParentExprnId', '');\r\n    setValue('txtSeExprTypeId', '');\r\n  };\r\n\r\n\r\n  const setParentExprnId = (id) => {\r\n    setValue('txtParentExprnId', id);\r\n    setPrntExprnId(id);\r\n  }\r\n\r\n  const onChangeDbConn = (e) => {\r\n    setDbConnId(e.target.value)\r\n  };\r\n\r\n  const onChangeMapType = (e) => {\r\n    setMapType(e.target.value)\r\n  };\r\n\r\n\r\n  const onChangeElmGroup = (e) => {\r\n    setElementMap([]);\r\n    setElementGroupId(e.target.value);\r\n    FetchScreenChildElements(e.target.value, ScrId);\r\n    loadMapTable();\r\n  };\r\n\r\n  const FetchScreenChildElements = async (grpelmid) => {\r\n    let opt = \"|CHELM|\";\r\n    let optw = {\r\n      CHELM: \"ScreenId=\" + ScrId + \" and ParentElementId=\" + grpelmid,\r\n    };\r\n    const Response = await FetchCombodata(opt, optw);\r\n    setChileElements(Response.body.chelm);\r\n  };\r\n\r\n\r\n  const onSubmitExprGroup = async (data) => {\r\n\r\n    if (data.txtExpGroupName == undefined)\r\n      return;\r\n\r\n    let frmData = { cmbScrId: ScrId, txtExprGroupId: data.txtExprGroupId, txtSeExpGroupName: data.txtExpGroupName };\r\n    callServer(frmData, \"Update Expression Group\", apiendpoints.UpdExpressionGroup, 1);\r\n  };\r\n\r\n\r\n  const onSubmitExpression = () => {\r\n\r\n    let expression = getValues(\"txtExpression\");\r\n    let dbConnectiond = getValues(\"cmbDbConnId\");\r\n    let grpElmId = getValues(\"cmbGrpElementId\");\r\n    let exprGrpId = getValues(\"txtExprGrpId\");\r\n    let uniqueCol = (exprnTypeId==17) ? getValues(\"txtUniqueCol\") : null;\r\n    let maptype  = (exprnTypeId==5) ? getValues(\"cmbMapType\") : 2;\r\n\r\n    let frmData = {\r\n      cmbScrId: ScrId, txtSeExprnId: exprnId, txtExprGroupId: exprGrpId, txtSeExprTypeId: exprnTypeId,\r\n      txtParentSeExprnId: parentExprnId, txtExpression: expression, cmbCompDbId: dbConnectiond, txtUniqueCol:uniqueCol,\r\n      cmbElmGrpId: grpElmId, cmbBindTy:maptype, map : elementMap\r\n    };\r\n\r\n    callServer(frmData, \"Update Expression\", apiendpoints.UpdateExpression, 2);\r\n\r\n  };\r\n\r\n\r\n  const editExpression = (treenode) => {\r\n\r\n    // setValue('txtExprnId', treenode.exprnid);\r\n    // setValue('txtParentExprnId', treenode.prexprnid);\r\n    // setValue('txtSeExprTypeId', treenode.exprntyid);\r\n\r\n    setExprnId(treenode.exprnid);\r\n    setPrntExprnId(treenode.prexprnid);\r\n    setExprnTypeId(treenode.exprntyid);\r\n\r\n    setValue('txtExprnId', treenode.exprnid);\r\n    setValue('txtParentExprnId', treenode.prexprnid);\r\n    setValue('txtSeExprTypeId', treenode.exprntyid);\r\n\r\n    setValue('txtExpression', treenode.expression);\r\n    let exprnName = getExprnTypeName(treenode.exprntyid);\r\n    setSelectedExprn(exprnName);\r\n\r\n    if (treenode.exprntyid == 5 && treenode.dbqry) {\r\n      setDbConnId(treenode.dbqry.dbconn);\r\n      setMapType(treenode.dbqry.bt);\r\n      setElementGroupId(treenode.dbqry.elmgrpid);\r\n      FetchScreenChildElements(treenode.dbqry.elmgrpid);\r\n\r\n      if (treenode.dbqry.colmap) {\r\n        var map = [...treenode.dbqry.colmap];\r\n        setElementMap(map);\r\n      }\r\n\r\n    }\r\n\r\n    if (treenode.exprntyid == 17 && treenode.msrcqry) {\r\n      setDbConnId(treenode.msrcqry.dbconn);\r\n      setMapType(treenode.msrcqry.bt);\r\n      setElementGroupId(treenode.msrcqry.elmgrpid);\r\n      setUniqueField(treenode.msrcqry.ucol);\r\n      FetchScreenChildElements(treenode.msrcqry.elmgrpid);\r\n      var map = [...treenode.msrcqry.colmap];\r\n      setElementMap(map);\r\n    }\r\n\r\n    setModalVisible(true);\r\n\r\n  };\r\n\r\n\r\n  const onEnterdModel = () => {\r\n    reset({ cmbDbConnId: dbConnId, cmbGrpElementId: elementGroupId });\r\n  }\r\n\r\n  const deleteExpression = (id) => {\r\n    if (window.confirm(\"Are you sure, do you want delete ?\")) {\r\n      let exprGrpId = getValues(\"txtExprGrpId\");\r\n      let frmData = { cmbScrId: ScrId, txtExprGroupId: exprGrpId, txtSeExprnId: id };\r\n      callServer(frmData, \"Delete Expression\", apiendpoints.Delexprn, 2);\r\n    }\r\n  };\r\n\r\n\r\n  const reorderExpression = (id, dir) => {\r\n    let exprGrpId = getValues(\"txtExprGrpId\");\r\n    let frmData = { cmbScrId: ScrId, txtExprGroupId: exprGrpId, txtSeExprnId: id, txtDirection: dir };\r\n    callServer(frmData, \"ReOrder Expression\", apiendpoints.Reord, 2);\r\n  };\r\n\r\n\r\n  const selectExprnType = (id) => {\r\n\r\n    setValue('txtSeExprTypeId', id);\r\n\r\n    let exprnid = getValues('txtExprnId');\r\n    let prexprnid = getValues('txtParentExprnId');\r\n    \r\n    setExprnTypeId(id);\r\n    setExprnId(exprnid);\r\n    setPrntExprnId(prexprnid);\r\n\r\n    setElementMap([]);\r\n\r\n    let exprnName = getExprnTypeName(id);\r\n    setSelectedExprn(exprnName);\r\n\r\n    if (id == 3 || id == 9) {\r\n      onSubmitExpression();\r\n    }\r\n    else{\r\n      setModalVisible(true);\r\n    }\r\n\r\n  };\r\n\r\n\r\n  const getExprnTypeName = (id) => {\r\n\r\n    let exprnName;\r\n    switch (id) {\r\n\r\n      case 1:\r\n        exprnName = 'Assign value';\r\n        break;\r\n\r\n      case 2:\r\n        exprnName = 'IF';\r\n        break;\r\n\r\n      case 3:\r\n        exprnName = 'Else';\r\n        break;\r\n\r\n      case 4:\r\n        exprnName = 'Loop';\r\n        break;\r\n\r\n      case 5:\r\n        exprnName = 'DB Query';\r\n        break;\r\n\r\n      case 6:\r\n        exprnName = 'Else If';\r\n        break;\r\n\r\n      case 7:\r\n        exprnName = 'Set Property';\r\n        break;\r\n\r\n      case 8:\r\n        exprnName = 'Domain Data';\r\n        break;\r\n\r\n      case 9:\r\n        exprnName = 'Stop';\r\n        break;\r\n\r\n      case 10:\r\n        exprnName = 'Message';\r\n        break;\r\n\r\n      case 11:\r\n        exprnName = 'Count(condition)';\r\n        break;\r\n\r\n      case 12:\r\n        exprnName = 'Count(group)';\r\n        break;\r\n\r\n      case 13:\r\n        exprnName = 'Sum(condition)';\r\n        break;\r\n\r\n      case 14:\r\n        exprnName = 'Sum(group)';\r\n        break;\r\n\r\n      case 15:\r\n        exprnName = 'Re-Load Combo';\r\n        break;\r\n\r\n      case 16:\r\n        exprnName = 'External Link';\r\n        break;\r\n\r\n      case 17:\r\n        exprnName = 'Multi Search';\r\n        break;\r\n\r\n      case 21:\r\n        exprnName = 'Move Stage';\r\n        break;\r\n\r\n      case 101:\r\n        exprnName = 'Expression Group';\r\n        break;\r\n\r\n      case 102:\r\n        exprnName = 'Custome Code';\r\n        break;\r\n\r\n      default:\r\n        break;\r\n\r\n    }\r\n\r\n    return exprnName;\r\n\r\n  };\r\n\r\n\r\n  const updateElmMapp = () => {\r\n    let mapElmId = getValues('cmbMapElementId')\r\n    let mapIdxName = getValues('txtIndexName');\r\n    let maps = elementMap;\r\n    let va = maps.find(x => x.elmid == mapElmId);\r\n    if (va) {\r\n      va[\"idxname\"] = mapIdxName\r\n    }\r\n    else {\r\n      maps.push({ elmid: mapElmId, idxname: mapIdxName });\r\n    }\r\n    setElementMap(maps);\r\n    loadMapTable();\r\n  };\r\n\r\n\r\n  const deleteMap = (elmid) =>{\r\n    let maps = elementMap;\r\n    let nLoc = maps.indexOf(maps.find(x => x.elmid == elmid));\r\n    maps.splice(nLoc, 1);\r\n    setElementMap(maps);\r\n    loadMapTable();\r\n  };\r\n\r\n  const loadMapTable = () => {\r\n\r\n    let mappedElm = document.getElementById(\"divMappedElm\");\r\n\r\n    mappedElm.innerHTML = '';\r\n\r\n    var tbl = document.createElement(\"table\");\r\n\r\n    tbl.className = \"lst-grid\";\r\n\r\n    var tbh = document.createElement(\"thead\");\r\n    tbl.appendChild(tbh);\r\n\r\n    var htr = document.createElement(\"tr\");\r\n    tbh.appendChild(htr);\r\n\r\n    var th = document.createElement(\"th\");\r\n    htr.append(th);\r\n    th.append(\"Element\");\r\n\r\n    var th = document.createElement(\"th\");\r\n    htr.append(th);\r\n    th.append(\"Index / Name\");\r\n\r\n    var th = document.createElement(\"th\");\r\n    htr.append(th);\r\n    th.append(\"Manage\");\r\n\r\n    mappedElm.appendChild(tbl);\r\n\r\n    elementMap.map((node) => {\r\n\r\n      let elm = chileElements.find(x => x.k == node.elmid);\r\n\r\n      var tr = document.createElement(\"tr\");\r\n      tbl.appendChild(tr);\r\n\r\n      var td = document.createElement(\"td\");\r\n      tr.append(td);\r\n\r\n      var lbl = document.createElement(\"label\");\r\n      lbl.append(elm[\"v\"]);\r\n      td.append(lbl);\r\n\r\n      var td = document.createElement(\"td\");\r\n      td.style = \"text-align:center\";\r\n      tr.append(td);\r\n      var lbl = document.createElement(\"label\");\r\n      lbl.append(node.idxname);\r\n      td.append(lbl);\r\n\r\n      var td = document.createElement(\"td\");\r\n      tr.append(td);\r\n\r\n      var btnDel = document.createElement(\"button\");\r\n      btnDel.append('delete');\r\n      btnDel.className = \"btn btn-link\";\r\n      btnDel.onclick = () => { deleteMap(node.elmid) };\r\n      td.append(btnDel);\r\n\r\n    });\r\n\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    LoadCombo();\r\n    FetchElementGroups();\r\n    FetchExpGrpList(ScrId);\r\n  }, []);\r\n\r\n  return (\r\n\r\n    <>\r\n\r\n      <div className=\"row\">\r\n\r\n        <div className=\"col-md-4\">\r\n\r\n          <form onSubmit={handleSubmit(onSubmitExprGroup)} autoComplete=\"off\">\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-md-10\">\r\n                <label htmlFor=\"txtExpGroupName\" className=\"form-label\">Expression Group</label>\r\n                <input {...register(\"txtExprGroupId\")} type=\"text\" readOnly=\"readonly\" className=\"dispNone\" />\r\n                <input {...register(\"txtExpGroupName\")} type=\"text\" className=\"form-control\" />\r\n                <p className=\"err-msg\" >{errors.txtExpGroupName?.message}</p>\r\n              </div>\r\n\r\n              <div className=\"col-md-2\">\r\n                <button type=\"button\" className=\"btn-link pad-bottom-0-5em\" onClick={resetExprGroup}>Reset</button>\r\n                <button type=\"submit\" className=\"btn btn-primary\" >Save</button>\r\n              </div>\r\n            </div>\r\n\r\n          </form>\r\n\r\n          <div>\r\n\r\n            <table className=\"lst-grid\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Id</th>\r\n                  <th>Expression Group</th>\r\n                  <th>Manage</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <ExprGroupList />\r\n              </tbody>\r\n            </table>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"col-md-8\">\r\n\r\n          <div className=\"pad-bottom-0-5em\">\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(1)} >Assign value</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(2)} >IF</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(3)} >Else</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(6)} >Else If</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(7)} >Set Property</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(5)} >DB Qry & Bind</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(17)} >Multi Search</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(15)} >Re-Load Combo</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(10)} >Message</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(9)} >Stop</button>\r\n          </div>\r\n\r\n          <div className=\"pad-bottom-0-5em\">\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(4)} >Loop</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(11)} >Count(condition)</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(12)} >Count(group)</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(13)} >Sum(condi)</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(14)} >Sum(group)</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(8)} >Domain Data</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(21)} >Move Stage</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(102)} >Custome Code</button>\r\n          </div>\r\n\r\n          {/* <div className=\"pad-bottom-0-5em\">\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(16)} >External Link</button>\r\n            &nbsp;&nbsp;\r\n            <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={() => selectExprnType(101)} >Expression Group</button>\r\n          </div> */}\r\n\r\n          <div className=\"border-bottom-1px\" >\r\n\r\n            <input {...register(\"txtParentExprnId\")} type=\"text\" className=\"wd-80\" disabled=\"disabled\" readOnly=\"readonly\" />\r\n            <button type=\"button\" className=\"btn-link\" onClick={() => clearParentExprnId()} >Clear</button>\r\n            &nbsp;\r\n            Expresion Group : <b><label id=\"lblExprGroup\"></label></b>\r\n            <input {...register(\"txtExprGrpId\")} type=\"text\" readOnly=\"readonly\" className=\"dispNone\" />\r\n            <input {...register(\"txtExprnId\")} type=\"text\" className=\"dispNone\" disabled=\"disabled\" readOnly=\"readonly\" />\r\n            <input {...register(\"txtSeExprTypeId\")} type=\"text\" className=\"dispNone\" disabled=\"disabled\" readOnly=\"readonly\" />\r\n          </div>\r\n\r\n          <div className=\"tree\">\r\n            {<ExpTree expTreeLst={expressionTree} />}\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n\r\n      <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" top show={modalVisible}\r\n        // onEnter={function () { console.log(\"onEnter   \") }}\r\n        // onEntering={function () { console.log(\"onEntering\") }}\r\n        onEntered={() => onEnterdModel()} >\r\n\r\n        <Modal.Header>\r\n          <ModalTitle><h5>{selectedexprn}</h5></ModalTitle>\r\n        </Modal.Header>\r\n        <ModalBody>\r\n\r\n          <div className=\"pad-bottom-0-5em\" >\r\n            <label htmlFor=\"txtExpression\" className=\"form-label\">Expression</label>\r\n            <textarea {...register(\"txtExpression\")} type=\"textarea\" height={20} className=\"form-control\" />\r\n          </div>\r\n\r\n\r\n          {((exprnTypeId == 5) || (exprnTypeId == 17)) ?\r\n            <>\r\n\r\n              <div className=\"row\">\r\n\r\n                <div className=\"col-md-4\">\r\n                  <label className=\"form-label\">DB Connection</label>\r\n                  <select {...register(\"cmbDbConnId\")} value={dbConnId} className=\"form-control\"\r\n                    onChange={onChangeDbConn} >\r\n                    {<option value=\"0\">-select-</option>}\r\n                    {\r\n                      dbConn.map((res) => (\r\n                        <option key={res.k} value={res.k}>\r\n                          {res.v}\r\n                        </option>\r\n                      ))\r\n                    }\r\n                  </select>\r\n                </div>\r\n\r\n                { (exprnTypeId == 5)?\r\n                  <div className=\"col-md-4\">\r\n                    <label className=\"form-label\">Map Type</label>\r\n                    <select {...register(\"cmbMapType\")} value={mapType} className=\"form-control\"\r\n                      onChange={onChangeMapType} >\r\n                      {<option value=\"1\">Index</option>}\r\n                      {<option value=\"2\">Name</option>}\r\n                    </select>\r\n                  </div>\r\n                  : <></> \r\n                }\r\n\r\n                <div className=\"col-md-4\">\r\n                  <label className=\"form-label\">Element Group</label>\r\n                  <select className=\"form-control\" {...register(\"cmbGrpElementId\")} value={elementGroupId}\r\n                    onChange={onChangeElmGroup} >\r\n                    {<option value=\"999\">-select-</option>}\r\n                    {elementGroups && elementGroups.map((res) => (\r\n                      <option key={res.elna} value={res.elid}>\r\n                        {res.elna}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n\r\n                { (exprnTypeId == 17)?\r\n                  <div className=\"col-md-4\">\r\n                    <label className=\"form-label\">Unique Field</label>\r\n                    <input {...register(\"txtUniqueCol\")} value={uniqueField} type=\"text\" className=\"form-control\" />\r\n                  </div>\r\n                  : <></> \r\n                }\r\n\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n\r\n                <div className=\"col-md-4\">\r\n                  <label className=\"form-label\">Elements</label>\r\n                  <select className=\"form-control\" {...register(\"cmbMapElementId\")} >\r\n                    {<option value=\"-1\">-select-</option>}\r\n                    {chileElements && chileElements.map((elm) => (\r\n                      <option key={elm.k} value={elm.k}>{elm.v}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"col-md-4\">\r\n                  <label className=\"form-label\">Index / Name</label>\r\n                  <input {...register(\"txtIndexName\")} type=\"text\" className=\"form-control\" />\r\n                </div>\r\n\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"pad-top-2-5em\">\r\n                    <button type=\"button\" className=\"btn btn-link\" onClick={() => updateElmMapp()} >Update</button>\r\n                    &nbsp;\r\n                    <button type=\"button\" className=\"btn btn-link\" onClick={() => loadMapTable()} >Refresh</button>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div id=\"divMappedElm\" className=\"pad-top-0-5em\"></div>\r\n              </div>\r\n\r\n            </>\r\n\r\n            : <></>\r\n          }\r\n\r\n          <div className=\"pad-top-0-5em\" >\r\n            <button type=\"button\" onClick={() => onSubmitExpression()} className=\"btn btn-primary\" >Submit</button>\r\n            &nbsp;\r\n            <button type=\"button\" onClick={() => resetExpression()} className=\"btn btn-warning\" >Cancel</button>\r\n          </div>\r\n\r\n        </ModalBody>\r\n\r\n      </Modal>\r\n\r\n    </>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default EvntExprGroup;\r\n","import { generateUUID, compressBase64, decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nexport const GetExpGrpLst = async (screenid) => {\r\n\r\n   let Response;\r\n\r\n   /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Expgroup\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: screenid }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   const reqHdr = {};\r\n\r\n   try {\r\n\r\n      await api.post(apiendpoints.GetExpGrpLst, compressBase64(data), reqHdr).then(function (response) {\r\n         const strResponse = JSON.parse(decompressBase64(response.data));\r\n         Response = strResponse;\r\n      })\r\n\r\n      return Response;\r\n   }\r\n   catch (error) {\r\n      console.log(error); // Network E\r\n   }\r\n};\r\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\n\n\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetScreenGroupElms = async (cmbScrid) => {\n\n\nlet Response;\n\n\n\nconst screengroupelms = apiendpoints.Getscreengrpelms;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"Table List\", orgid: \"\", vendid: \"0\" };\n const frmData = {cmbScrid:cmbScrid}\n const data = { hdr: frmHdr, body: frmData };\n\n console.log(data); \n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n await api.post(screengroupelms, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));      \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n"],"names":["apiendpoints","appsettings","schema","yup","shape","txtExpGroupName","required","_ref","_errors$txtExpGroupNa","ScrId","exprGroup","setExprGroup","useState","register","handleSubmit","getValues","setValue","formState","errors","reset","useForm","resolver","yupResolver","expressionTree","setExpressionTree","selectedexprn","setSelectedExprn","modalVisible","setModalVisible","dbConnId","setDbConnId","elementGroupId","setElementGroupId","dbConn","setDbConn","mapType","setMapType","uniqueField","setUniqueField","elementGroups","setElementGroups","chileElements","setChileElements","elementMap","setElementMap","exprnId","setExprnId","parentExprnId","setPrntExprnId","exprnTypeId","setExprnTypeId","callServer","async","frmData","tag","endPoint","refreshFlag","reqHdr","reqdata","hdr","convid","generateUUID","orgid","vendid","body","response","api","post","compressBase64","resData","JSON","parse","decompressBase64","data","rst","setTimeout","toast","success","resetExprGroup","FetchExpGrpList","resetExpression","FetchExpTree","txtExprGroupId","error","stringify","fdr","rstmsg","err","GetExpGrpLst","expressions","GetExpressiontree","ExprGroupId","ExprGroupList","_jsx","_Fragment","children","map","index","_jsxs","egid","onClick","document","getElementById","innerHTML","egname","txtExprGrpId","txtParentExprnId","txtSeExprTypeId","txtExprnId","txtExpression","setExprGroupName","className","editExprGroup","delExprGroup","id","window","confirm","cmbScrId","Delexprngrp","ExpTree","_ref2","expTreeLst","root","filter","x","prexprnid","length","node","ExpNode","treenode","_ref3","lstNode","exprnid","open","type","dangerouslySetInnerHTML","__html","exprn","setParentExprnId","editExpression","deleteExpression","reorderExpression","exprntyid","cmbDbConnId","MapType1","MapType2","cmbGrpElementId","txtIndexName","FetchScreenChildElements","optw","CHELM","grpelmid","Response","FetchCombodata","chelm","onSubmitExpression","expression","dbConnectiond","grpElmId","exprGrpId","uniqueCol","maptype","txtSeExprnId","txtParentSeExprnId","cmbCompDbId","txtUniqueCol","cmbElmGrpId","cmbBindTy","UpdateExpression","exprnName","getExprnTypeName","dbqry","dbconn","bt","elmgrpid","colmap","msrcqry","ucol","Delexprn","dir","txtDirection","Reord","selectExprnType","loadMapTable","mappedElm","tbl","createElement","tbh","appendChild","htr","th","append","elm","find","k","elmid","tr","lbl","td","style","idxname","btnDel","onclick","maps","nLoc","indexOf","splice","deleteMap","useEffect","dbcn","LoadCombo","GetScreenGroupElms","elements","FetchElementGroups","onSubmit","undefined","txtSeExpGroupName","UpdExpressionGroup","autoComplete","htmlFor","readOnly","message","disabled","Modal","size","top","show","onEntered","Header","ModalTitle","ModalBody","height","value","onChange","e","target","res","v","elid","elna","updateElmMapp","mapElmId","mapIdxName","va","push","screenid","then","strResponse","console","log","screengroupelms","Getscreengrpelms","cmbScrid","headers","Authorization","localStorage","getItem"],"sourceRoot":""}