{"version":3,"file":"static/js/249.9450db30.chunk.js","mappings":"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","sources":["components/userrole/branchrolemapping.js","components/utilities/getbranchrolelist.js","components/userrole/convertnodetojson.js","components/userrole/nodechecked.js","components/userrole/nodesourse.js","components/utilities/getbranchlist.js","components/utilities/getrolelist.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport CheckboxTree from 'react-checkbox-tree';\r\nimport { useState } from 'react';\r\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\r\n// import \"font-awesome/css/font-awesome.min.css\";\r\nimport {BranchRoleMapNodeSource} from \"./nodesourse\"\r\nimport {BranchRoleNodeChecked} from \"./nodechecked\";\r\nimport {BranchRoleNodetojson} from \"./convertnodetojson\"\r\n\r\n\r\n\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport { generateUUID, compressLZW, decompressLZW, compressBase64, decompressBase64 } from \"../utilities/utils\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nimport { GetRoleList } from \"../utilities/getrolelist\";\r\nimport { GetBranchList } from \"../utilities/getbranchlist\";\r\nimport { GetBranchRoleList } from \"../utilities/getbranchrolelist\";\r\nimport { render } from \"@testing-library/react\";\r\n\r\n\r\n// Yup validation schema \r\n\r\nconst schema = yup.object().shape({\r\n    //txtRoleName: yup.string().required(\"Role name can not be empty\").max(50,\"Role name  Max lenght is 50 \")\r\n});\r\n\r\n\r\n\r\nlet flag = false;\r\n\r\n//Ref\r\n\r\n//https://github.com/jakezatecky/react-checkbox-tree/issues/104\r\n\r\n\r\nconst BranchRoleMapping=()=>{\r\n\r\n\r\n  useEffect(() => {  \r\n    flag = false;\r\n  }, []);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   window.addEventListener(\"beforeunload\", alertUser);\r\n  //   return () => {\r\n  //     window.removeEventListener(\"beforeunload\", alertUser);\r\n  //   };\r\n  // }, []);\r\n  // const alertUser = (e) => {\r\n  //   e.preventDefault();\r\n  //   e.returnValue = \"\";\r\n  // };\r\n  \r\n  //Fetch Role List from API\r\n\r\n  const[roleresbody,setrolelistresbody]= useState([]);\r\n\r\n  const FetchRoleList = async () => {\r\n      // Update state with incremented value\r\n\r\n  // debugger;\r\n\r\n    const RoleListResponse = await GetRoleList();\r\n   \r\n    //console.log(JSON.stringify(RoleListResponse.body.Roles));\r\n    setrolelistresbody(RoleListResponse.body.Roles)\r\n  \r\n   \r\n  }; \r\n\r\n  useEffect(() => {\r\n      FetchRoleList();      \r\n  \r\n  },[])\r\n\r\n  const[branchresbody,setbranchlistresbody]= useState([]);\r\n  const FetchBranchList = async () => {\r\n    \r\n    const BranchListResponse = await GetBranchList();\r\n   \r\n    //console.log(JSON.stringify(BranchListResponse.body.Branches));\r\n    setbranchlistresbody(BranchListResponse.body.Branches)\r\n  \r\n   \r\n  }; \r\n\r\n  useEffect(() => {\r\n    FetchBranchList();       \r\n     \r\n  \r\n  },[])\r\n\r\n\r\n  const[branchroleresbody,setbranchrolelistresbody]= useState([]);\r\n  const FetchBranchRoleList = async () => {\r\n    \r\n    const BranchRoleListResponse = await GetBranchRoleList();\r\n   \r\n    console.log(JSON.stringify(BranchRoleListResponse.body));\r\n    setbranchrolelistresbody(BranchRoleListResponse.body)\r\n  \r\n   \r\n  }; \r\n\r\n  useEffect(() => {\r\n    FetchBranchRoleList();       \r\n     \r\n  \r\n  },[])\r\n\r\n//-----------------------------\r\n\r\n\r\n\r\n let newnode = [];  \r\n let nodecheck = []; \r\n\r\n\r\n\r\n\r\n  newnode = BranchRoleMapNodeSource(branchresbody,roleresbody);\r\n  nodecheck= BranchRoleNodeChecked(branchresbody); \r\n  \r\n \r\n\r\nconst [checked, setchecked] = useState([]);\r\nconst [expanded, setExpand] = useState([]);\r\nconst [database, setdb] = useState([]);\r\n\r\n\r\n\r\n\r\n\r\nconsole.log(nodecheck.length)\r\n\r\nif (nodecheck.length>0 && flag == false  )\r\n{\r\n  console.log(\"render\");\r\n  setdb(newnode);\r\n  setchecked(nodecheck);\r\n  flag = true;\r\n}\r\n\r\n    //const [treenode, settreenode] = useState({});\r\n\r\n\r\n    const { register, handleSubmit, formState: { errors }, reset } = useForm({\r\n        resolver: yupResolver(schema),\r\n     });\r\n\r\n     \r\n    const [alert, setAlert] = useState(\"\");\r\n\r\n    const [isLoading , setLoanding]  = useState(false);\r\n\r\n         \r\n \r\n const navigate = useNavigate();\r\n const onSubmitHandler = async(data) => {\r\n\r\n      console.log(\"Enter Button submit\");\r\n      console.log(checked);\r\n      const nodeconvertjsonres= BranchRoleNodetojson(branchresbody,checked);\r\n\r\n     \r\n\r\n      const frmData = {BRM:nodeconvertjsonres};\r\n\r\n      console.log(frmData);\r\n\r\n       setLoanding(true);\r\n\r\n  //e.preventDefault();\r\n  /* Header */\r\n  const convID = generateUUID();\r\n  const frmHdr = {\r\n        convid: convID,\r\n        tag: \"brcrolmap\",\r\n        orgid: \"\",\r\n        vendid: \"0\",\r\n  };    \r\n  \r\n  const reqdata = { hdr: frmHdr, body: frmData }  \r\n  const token =    localStorage.getItem('token');\r\n  const reqHdr = { headers: { Authorization: `Bearer ${token}` } };    \r\n  const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n  const createroleurl =  \"/cmpstp/brcrolmap\";\r\n  console.log(reqHdr)\r\n  try {\r\n    //debugger;\r\n    const response = await api.post(createroleurl, compressBase64(reqdata),reqHdr);\r\n   // const response = await PostCallHeader(createbranchnurl, compressBase64(reqdata),reqHdr);\r\n   \r\n     const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n    console.log(strResponse);\r\n\r\n    if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {             \r\n         ShowAlert(\"Error\", JSON.stringify(strResponse.fdr));\r\n         setLoanding(false);\r\n    } else {\r\n          ShowAlert(\"Error\", JSON.stringify(strResponse.fdr));\r\n          setLoanding(false);\r\n          navigate(\"/Home\");\r\n    }\r\n  } catch (err) {\r\n  \r\n    console.log(err.message);     \r\n    ShowAlert(\"Error\", \"Unable to process request\")\r\n    setLoanding(false);\r\n    \r\n  }\r\n};\r\n\r\n\r\n\r\nconst ShowAlert = (alertType, message) => {\r\nsetAlert({\r\n  AlertType: alertType,\r\n  message: message,\r\n});\r\n};\r\n\r\n\r\n\r\n    return (\r\n\r\n        \r\n        <>\r\n          <section className=\"vh-100\">\r\n            <div className=\"container h-100\">\r\n       \r\n                      <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\r\n                      <div className=\"card-header\">\r\n                        <strong className=\"card-title\">Branch Role mapping</strong>\r\n                      </div>\r\n                      <div className=\"card-body p-md-5\">  \r\n\r\n                      \r\n\r\n                      {isLoading?(<Spinner></Spinner>) :\"\"}                        \r\n                       <Alerts alert={alert} />                 \r\n\r\n                     <form onSubmit={handleSubmit(onSubmitHandler)} autocomplete=\"off\">\r\n                     <CheckboxTree   \r\n                        showExpandAall=\"true\"                  \r\n                      // nodes={newnode}                        \r\n                       nodes={database}\r\n                       checked={checked}\r\n                       // checked={nodecheck}\r\n                    \r\n                        expanded={expanded}\r\n                        onCheck={(checked) => setchecked(checked)}\r\n                        onExpand={(expanded) => setExpand(expanded)}\r\n                       \r\n                        // onClick={(nodes) => settreenode(nodes)}\r\n                         />\r\n\r\n                        <br></br>\r\n                                                 \r\n                         \r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary\">\r\n                            Submit\r\n                            </button>\r\n                        </form>\r\n\r\n                          {console.log(database)}\r\n                          {console.log(checked)}\r\n                          \r\n\r\n                      </div>\r\n                  </div>\r\n                </div>\r\n  \r\n          </section>\r\n          </>\r\n      );\r\n}\r\n\r\n\r\nexport default BranchRoleMapping;","import React, { useState, useEffect } from \"react\";\r\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\n export const GetBranchRoleList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\nconst BranchRoleMapping = apiendpoints.BranchRoleMapping;\r\n\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"brcrolmap\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl =  BranchRoleMapping;\r\n\r\n console.log(combonurl); \r\n console.log(data); \r\n console.log(reqHdr); \r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));\r\n    console.log(strResponse);    \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n\r\n","\nimport React  from \"react\";\n\n\nexport   function BranchRoleNodetojson(arr1,nodeselected){\n \n  let obj = \"\";\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let arr2=[];  \n  let nodearr=[];\n\n      arr1.forEach(arr1item => {    \n        \n        child = [];\n       \n        arr2 = nodeselected;\n       \n        arr2.forEach(arr2item => {\n             \n             \n\n                    nodearr = arr2item.split('-') \n\n                    console.log(nodearr)\n\n                    if    (arr1item.BranchId ==  nodearr[1])\n                    {              \n                      child= [...child,nodearr[0]] \n                    }\n      } \n      \n      );\n\n      obj1= {BranchId:arr1item.BranchId,RoleIds:child}\n\n      parent = [...parent,obj1]\n\n  } )\n\n  console.log(parent);\n  \n return parent;\n\n}\n\n\n\n\n\n\nexport   function UserBranchRoleNodetojson(arr1,nodeselected){\n \n  let obj = \"\";\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let arr2=[];  \n  let nodearr=[];\n\n      arr1.forEach(arr1item => {                \n       \n        child = [];\n        arr2 = nodeselected;\n       \n        arr2.forEach(arr2item => {\n             \n                    \n\n                    nodearr = arr2item.split('-') \n\n                    console.log(nodearr)\n\n                    if    (arr1item.BranchId ==  nodearr[1] )\n                    {              \n                      child= [...child,nodearr[0]] \n                    }\n      } \n      \n      );\n\n      obj1= {BranchId:arr1item.BranchId,RoleMapIds:child}\n\n      parent = [...parent,obj1]\n\n  } )\n\n  console.log(parent);\n  \n return parent;\n\n}\n","\nimport React  from \"react\";\n\n\n\n\n\nexport   function BranchRoleNodeChecked(arr1){\n \n  let obj = \"\";\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let arr2=[];\n\n\n      arr1.forEach(arr1item => {\n\n        arr2 = arr1item.Roles;\n       \n      arr2.forEach(arr2item => {\n        obj =  arr2item.RId + '-' + arr1item.BranchId ;  \n        child= [...child,obj]       \n      }  \n      \n      );\n\n  } )\n  \n return child;\n\n}\n\nexport   function UserBranchRoleNodeChecked(arr1,filterbrmap){\n \n  let obj = \"\";\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let arr2=[];\n    \n  console.log(filterbrmap)\n    \n    filterbrmap.forEach(filterbrmapitem=>{\n                        console.log(filterbrmapitem.BRMapId)\n\n                                        arr1.forEach(arr1item => {\n\n                                          arr2 = arr1item.Roles;\n                                        \n                                        arr2.forEach(arr2item => {\n                                          if (filterbrmapitem.BRMapId == arr2item.BRMapId && filterbrmapitem.BRUMapStatusId ==1 )\n                                          {\n                                            obj =  arr2item.BRMapId + '-' + arr1item.BranchId ;  \n                                            child= [...child,obj]   \n\n                                          }\n                                            \n                                        }  \n                                        \n                                        );\n                                  \n                                    } )\n                        }\n                        )\n  \n return child;\n\n}\n\n","\nimport React  from \"react\";\n\n\n\n\n\nexport   function BranchRoleMapNodeSource(arr1,arr2){\n \n  let obj = {};\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n\n\n  console.log(arr1)\n  console.log(arr2)\n\n\n      arr1.forEach(arr1item => {\n\n\n\n      arr2.forEach(arr2item => {\n        obj1 = {'value': arr2item.RoleId +'-' + arr1item.BranchId,'label':arr2item.RoleName};  \n        child= [...child,obj1]       \n      }  \n      \n      );\n  \n      obj = {'value': arr1item.BranchId,'label':arr1item.Name,'children':child};\n      \n      parent = [...parent,obj]\n\n\n\n      child= []  \n\n  } )\n\n return parent;\n\n};\n\n\nexport   function UserBranchRoleMapNodeSource(arr1){\n \n  let obj = {};\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let arr2 = [];\n\n\n  console.log(arr1)\n  console.log(arr2)\n\n\n      arr1.forEach(arr1item => {\n\n       arr2 = arr1item.Roles;\n\n      arr2.forEach(arr2item => {\n        obj1 = {'value': arr2item.BRMapId +'-' + arr1item.BranchId,'label':arr2item.RName};  \n        child= [...child,obj1]       \n      }  \n      \n      );\n  \n      obj = {'value': arr1item.BranchId,'label':arr1item.Name,'children':child};\n      \n      parent = [...parent,obj]\n\n      child= []  \n\n  } )  \n\n return parent;\n\n}\n\n\n\nexport   function statuschangeRoleMapNodeSource(Rolearr){\n \n  let obj = {};\n  let parent=[];\n\n\n\n  console.log('Rolearr',Rolearr)\n\n\n  Rolearr.forEach(arr1item => {\n\n      \n\n        var staus =  arr1item.BRUMapStatus; \n             \n        obj = {'value': arr1item.RoleId ,'label': \" \" +  arr1item.RoleName + ' ('  + staus + ')' , showNodeIcon:false};  \n     \n      \n      parent = [...parent,obj]    \n\n  } )  \n\n return parent;\n\n}\n\n\n","import React, { useState, useEffect } from \"react\";\r\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\n export const GetBranchList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\nconst BranchList = apiendpoints.BranchList;\r\n\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl =  BranchList;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));\r\n    console.log(strResponse);    \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetRoleList = async () => {\r\n\r\n\r\nlet Response;\r\nconst RoleList = apiendpoints.RoleList;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = RoleList;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));\r\n    console.log(strResponse);    \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n\r\n"],"names":["schema","yup","shape","flag","BranchRoleMapping","useEffect","roleresbody","setrolelistresbody","useState","async","RoleListResponse","GetRoleList","body","Roles","FetchRoleList","branchresbody","setbranchlistresbody","BranchListResponse","GetBranchList","Branches","FetchBranchList","branchroleresbody","setbranchrolelistresbody","FetchBranchRoleList","BranchRoleListResponse","Response","appsettings","data","hdr","convid","generateUUID","tag","orgid","vendid","reqHdr","headers","Authorization","localStorage","getItem","combonurl","console","log","api","post","compressBase64","then","response","strResponse","JSON","parse","decompressBase64","GetBranchRoleList","stringify","newnode","nodecheck","BranchRoleMapNodeSource","BranchRoleNodeChecked","checked","setchecked","expanded","setExpand","database","setdb","length","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","alert","setAlert","isLoading","setLoanding","navigate","useNavigate","ShowAlert","alertType","message","AlertType","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Spinner","Alerts","onSubmit","frmData","BRM","BranchRoleNodetojson","reqdata","rst","fdr","err","autocomplete","CheckboxTree","showExpandAall","nodes","onCheck","onExpand","type","arr1","nodeselected","obj1","parent","child","arr2","nodearr","forEach","arr1item","arr2item","split","BranchId","RoleIds","UserBranchRoleNodetojson","RoleMapIds","obj","RId","UserBranchRoleNodeChecked","filterbrmap","filterbrmapitem","BRMapId","BRUMapStatusId","RoleId","RoleName","Name","UserBranchRoleMapNodeSource","RName","BranchList","apiendpoints","RoleList"],"sourceRoot":""}