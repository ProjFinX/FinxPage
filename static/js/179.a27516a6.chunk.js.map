{"version":3,"file":"static/js/179.a27516a6.chunk.js","mappings":"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","sources":["components/menumngr/mngstagerole.js","components/menumngr/treenodesource.js","components/utilities/getallscreen.js","components/utilities/getallstage.js","components/utilities/getbranchlist.js"],"sourcesContent":["import React from \"react\";\nimport CheckboxTree from \"react-checkbox-tree\";\nimport { useState, useEffect } from \"react\";\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport Alerts from \"../htmlcomponents/Alerts\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport api from \"../api/Webcall\";\nimport Spinner from \"../htmlcomponents/Spinner\";\n\nimport {\n  generateUUID,\n  compressBase64,\n  decompressBase64,\n} from \"../utilities/utils\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { GetAllScreenList } from \"../utilities/getallscreen\";\nimport {GetscreenList,GetScreenRole } from \"../utilities/getmenulist\";\nimport { GetBranchList } from \"../utilities/getbranchlist\";\nimport { GetAllStageList } from \"../utilities/getallstage\";\nimport {\n  StageBranchRoleMapNodeSource\n} from \"./treenodesource\";\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n//Ref\n//https://react-bootstrap.github.io/components/modal//\n\nlet count = 0;\n\nconst getNodeIds = (nodes) => {\n  let ids = [];\n\n  nodes?.forEach(({ value, children }) => {\n    ids = [...ids, value, ...getNodeIds(children)];\n  });\n\n  return ids;\n};\n\nconst schema = yup.object().shape({\n  \n});\n\n\nlet menunode = [];\nlet rolenode = [];\n\nfunction MngStageRole() {\n\n  \n\n\n  var menudetails;\n  let menures;\n  \n\n  let sourcearr = [];\n  let nodecheck = [];\n\n\n  const [roleexpanded, setRoleExpand] = useState([]);\n  const [rolechecked, setRolechecked] = useState([]);\n  const [Screenid, setScreenid] = useState(0);\n  const [StageId, setStageId] = useState('')\n  const [StageName, setStageName] = useState('')\n\n\n\n  const [isLoading, setLoanding] = useState(false);\n\n  // GetScreen and Stage\n  const [ScreenList, setScreenList] = useState([]);\n \n\n  const FetchScreenList = async () => {\n\n    const StageListResponse = await GetscreenList();\n    console.log('StageListResponse',StageListResponse.body.scrstgs)\n     setScreenList(StageListResponse.body.scrstgs);\n\n    // const ScreenListResponse = await GetAllScreenList();\n    // console.log('ScreenListResponse',ScreenListResponse.body.Screens)\n    //  setScreenList(ScreenListResponse.body.Screens.filter((res) => res.IsActive==true));\n  };\n\n\n    \n  // Get Branch List\n\n  const [branchresbody, setbranchlistresbody] = useState([]);\n  const FetchBranchList = async () => {\n    const BranchListResponse = await GetBranchList();\n\n    console.log('BranchListResponse',BranchListResponse.body.Branches)\n    setbranchlistresbody(BranchListResponse.body.Branches);\n  };\n\n  useEffect(() => {\n    FetchScreenList();\n    FetchBranchList();\n    \n  }, []);\n\n\n// Stage Branch Role Map\n  const [SBRMap, setSBRMap] = useState([]);\n  const FetchScreenRole = async (scrid) => {\n    console.log(scrid);\n    const ScreenRoleResponse = await GetScreenRole(scrid);\n    console.log(ScreenRoleResponse);\n    setSBRMap(ScreenRoleResponse.body.SBRMap);\n  };\n  \n\n\n  const [StageList, setStageList] = useState([]);\n  const [stageresbody, setstagelistresbody] = useState([]);\n\n  // rerender the stage list\n  useEffect(() => {  \n    // Role list \n    \n  }, [StageList]);\n\n//  Screen combo change event function\n\n  const onScreenChange=(ScreenId)=>{  \n    \n    \n    if (ScreenId=='')\n    {\n     return;\n    }\n       \n    const  stagelistarr =  ScreenList.find(screenitem => screenitem.ScrId== ScreenId)         \n    setStageList(stagelistarr.Stages) ;\n    \n    let checkednodearr=[]; \n    setRolechecked(checkednodearr)\n\n        \n    console.log(ScreenId);\n       setScreenid(ScreenId);\n      // FetchAllStageList(e.target.value);\n       FetchScreenRole(ScreenId);\n\n  }\n\n  \n \n  const FetchAllStageList = async (screenid) => {\n    console.log(screenid);\n    const StageListResponse = await GetAllStageList(screenid);\n    setstagelistresbody(StageListResponse.body.Screens);\n    console.log(JSON.stringify(StageListResponse.body.Screens));\n  };\n\n\n  // Stage on change event function \n  const onStageChange=(Stageid)=>{        \n      let Rolearr=[]; \n      let checkednodearr=[]; \n      let Expandnodearr=[];\n      console.log(StageList) \n      setStageId(Stageid);\n    \n\n     let stagearr = StageList.filter(stageitem => stageitem.StgId== Stageid);\n      setStageName(stagearr[0].StgName)\n      \n      \n      \n      console.log(SBRMap);\n\n      let  stagerolearr =  SBRMap.filter(stageitem => stageitem.StageId== Stageid);  \n\n      console.log(stagerolearr);\n\n       if (stagerolearr==undefined)\n       {\n        setRolechecked(checkednodearr);\n        return\n       }\n\n      Rolearr = stagerolearr[0].Rights; \n      \n\n\n      Rolearr.forEach(arritem =>{  \n        \n            let BRMapId =   arritem.BRMapId;\n            let RWFlag = arritem.Flag;\n\n            Expandnodearr.push(BRMapId)\n           \n            if (RWFlag == 'WR'||RWFlag == 'RW' )\n            {\n              checkednodearr.push(BRMapId+'-W')\n              checkednodearr.push(BRMapId+'-R')\n            }\n            if (RWFlag == 'W' )\n            {\n              checkednodearr.push(BRMapId+'-W')              \n            }\n            if (RWFlag == 'R' )\n            {\n              checkednodearr.push(BRMapId+'-R')\n            }\n\n      }\n\n     \n      )\n\n      Expandnodearr.push(checkednodearr)\n\n      console.log(checkednodearr) \n      console.log(Expandnodearr) \n      //console.log(getNodeIds(rolenode)) \n\n     //debugger;\n      setRoleExpand(getNodeIds(rolenode));\n      //setRolechecked(getNodeIds(rolenode));\n      \n      setRolechecked(checkednodearr);\n   \n      \n\n\n}\n\n\n\n\n\n  if ( rolenode.length ==0  ) {       \n       rolenode = StageBranchRoleMapNodeSource(branchresbody);\n    console.log(rolenode);\n  }\n\n\n \n\n\n  // Add Role Popup\n  useEffect(() => {    \n    //setRoleExpand(getNodeIds(rolenode));\n  }, [rolechecked]);\n  \n\n\n  //---------------------------------------------\n\n\n\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(schema)\n   \n  });\n\n  const [alert, setAlert] = useState(\"\");\n\n  \n\n  //Update Role change for the selected menu\n\n\n  const onSubmitHandler = async (data, e) => {\n\n    try {\n\n    e.preventDefault();\n    console.log(data);\n    console.log(\"Enter Save role \");\n\n    let frmData = {};\n    let Rights = [];\n\n    let UpdateStageRoleRights = apiendpoints.UpdateStageRoleRights;\n\n       let SBRMap = [];\n      \n     \n       rolechecked.forEach(arritem =>{  \n          \n        let  BRMapId;\n        let  RWFlag;\n        let Right={};\n        let    nodearr =  arritem.split(\"-\");\n            if (nodearr.length == 2) {\n              BRMapId = nodearr[0];\n              RWFlag = nodearr[1];\n            }\n\n           //let preflag = Rights.find((res) => (res.BRMapId == BRMapId)).Flag\n\n           let  objIndex = Rights.findIndex(obj => obj.BRMapId == BRMapId); \n           console.log(\"objIndex \", objIndex)\n           if (objIndex !=-1)\n           {\n            Rights[objIndex].Flag = Rights[objIndex].Flag +  RWFlag;\n           }\n          else\n          {\n            Right = {BRMapId:BRMapId,Flag:RWFlag}\n            Rights.push(Right)\n          }  \n       })\n\n      \n\n       let StgId = {StgId:StageId,Rights:Rights}\n\n       SBRMap.push(StgId);\n\n      frmData = {  SBRMap: SBRMap };\n        \n    console.log(JSON.stringify(frmData) );\n\n    setLoanding(true);\n\n    //e.preventDefault();\n    /* Header */\n    const convID = generateUUID();\n    const frmHdr = {\n      convid: convID,\n      tag: \"UpdateStageRoleRights\",\n      orgid: \"\",\n      vendid: \"0\",\n    };\n\n    const reqdata = { hdr: frmHdr, body: frmData };\n    const token = localStorage.getItem(\"token\");\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n\n    console.log(reqHdr);\n    try {\n      //debugger;\n      const response = await api.post(\n        UpdateStageRoleRights,\n        compressBase64(reqdata),\n        reqHdr\n      );      \n\n      const strResponse = JSON.parse(decompressBase64(response.data));\n\n      console.log(strResponse);\n\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr));\n        setLoanding(false);\n      } else {\n\n        setTimeout(() => {\n          \n       \n        console.log(strResponse.fdr);\n        ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));         \n          setTimeout(() => {\n            setAlert({\n              AlertType: \"null\",\n              message: \"null\",\n            });\n            \n          }, 600);\n       \n          setRolechecked([]);\n          setRoleExpand([]);\n          reset({\n            txtStageId: \"\",\n            txtStagename: \"\",\n          });\n\n          FetchScreenRole(StageId);\n\n        setLoanding(false);\n      }, 300);\n      }\n    } catch (err) {\n      console.log(err.message);\n      ShowAlert(\"Error\", \"Unable to process request\");\n      setLoanding(false);\n    }\n\n  } catch (error) {\n\n    ShowAlert(\"Error\", error.message);\n    setLoanding(false);\n  }\n\n\n\n  };\n\n  const ShowAlert = (alertType, message) => {\n    setAlert({\n      AlertType: alertType,\n      message: message,\n    });\n  };\n\n  try {\n\n    \n    return (\n      <>\n        <section className=\"vh-100\">\n          <div className=\"container h-100\">\n            <div className=\"row d-flex justify-content-center align-items-center h-100\">\n              <div className=\"col-lg-12 col-xl-11\">\n                <div\n                  className=\"card text-black\"\n                  style={{ borderRadius: \"25px\" }}\n                >\n                  <div className=\"card-body p-md-5\">                   \n\n                    <div></div>\n                    <div className=\"row justify-content-center\">\n                      <div className=\"row\">\n                        <div className=\"col-sm\">\n                          <div className=\"mb-3\">\n                            <p className=\"text-left h4 fw-bold mb-5 mx-1 mx-md-4 mt-4\">\n                             Manage Stage role rights\n                            </p>\n\n                            <div className=\"col-sm\">\n                                  <div className=\"mb-3\">                                   \n                                    <label htmlFor=\"cmbScrId\" className=\"form-label\">Screen</label>\n                                    <select {...register(\"cmbScrId\")}  className=\"form-control\" \n                                    // onChange= {onScreenChange}  \n                                    onChange= {e => onScreenChange(e.target.value)}\n                                    > \n                                    <option value=\"0\">- Select -</option>\n                                    {  //Combo Data binding\n                                    ScreenList &&  ScreenList.map((res) => \n                                    (\n                                      <option key={res.ScrId} value={res.ScrId}>\n                                      {res.ScrName}\n                                    </option>\n                                    ))\n                                    }\n                                    </select>\n                                    <p>{errors.cmbScrId?.message}</p>\n                                  </div>\n                              </div>\n\n                              <div className=\"col-sm\">\n                                  <div className=\"mb-3\">\n                               \n                                    <label  className=\"form-label\"> Stage List</label>\n                                    \n                                        <select                                        \n                                        name=\"list-box\"\n                                        size={20} \n\n                                        className=\"form-control\"\n                                        onChange= {e => onStageChange(e.target.value)}                                        \n                                        >                                  \n                                        \n                                      {  //Combo Data binding\n                                        StageList && StageList.map((res) => \n                                        (\n                                        <option key={res.StgId} value={res.StgId}>{res.StgName}</option>\n                                        ))\n                                        }\n                                        \n                                    </select> \n                                    </div>\n                              </div>\n\n                           \n                          </div>\n                        </div>\n                        <div className=\"col-sm\">\n                          <div className=\"mb-3\">\n                            <p className=\"text-center h4 fw-bold mb-5 mx-1 mx-md-4 mt-4\">\n                              Role\n                            </p>\n                            <div>\n                         {isLoading ? <Spinner></Spinner> : \"\"} \n                         </div>\n                            <Alerts alert={alert} />\n                            <form\n                              onSubmit={handleSubmit(onSubmitHandler)}\n                              autocomplete=\"off\"\n                            >\n                              <div className=\"row\">\n                                <div className=\"col-sm\">\n                                  <div className=\"mb-3\">\n                                    <input\n                                      {...register(\"txtStageId\")}\n                                      type=\"text\"\n                                      className=\"form-control\"\n                                      id=\"txtStageId\"\n                                      disabled\n                                      placeholder=\"Stage Id\"\n                                      value={StageId}\n                                    />\n                                    <p>{errors.txtStageId?.message}</p>\n                                  </div>\n                                </div>\n                                <div className=\"col-sm\">\n                                  <div className=\"mb-3\">\n                                    <input\n                                      {...register(\"txtStagename\")}\n                                      type=\"text\"\n                                      className=\"form-control\"\n                                      id=\"txtStagename\"\n                                      disabled\n                                      placeholder=\" Name\"\n                                      value={StageName}\n                                    />\n                                  </div>\n                                </div>\n                              </div>\n\n                              <div className=\"row\">\n                                <div className=\"col-sm\">\n                                  <div className=\"mb-3\">\n                                    <CheckboxTree\n                                      //nodes={nodes}\n                                      nodes={rolenode}\n                                      checked={rolechecked}\n                                      expanded={roleexpanded}\n                                      onCheck={(checked) =>\n                                        setRolechecked(checked)\n                                      }\n                                      onExpand={(expanded) =>\n                                        setRoleExpand(expanded)\n                                      }\n\n                                      // onClick={(nodes) => settreenode(nodes)}\n                                    />\n                                     \n                                  </div>\n                                </div>\n                              </div>\n\n                              <button type=\"submit\" className=\"btn btn-primary\">\n                                Submit\n                              </button>\n                            </form>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </>\n    );\n  } catch (error) {\n    console.log(error.message);\n  }\n\n}\n\nexport default MngStageRole;\n","\nimport React  from \"react\";\n\n\n\n\n\nexport   function BranchRoleMapNodeSource(arr1,arr2){\n \n  let obj = {};\n  let obj1 = {};\n\n  let parent=[];\n  let child=[];\n  let title = '';\n\n\n  console.log(arr1)\n  console.log(arr2)\n\n\n      arr1.forEach(arr1item => {\n     \n\n\n      arr2.forEach(arr2item => {\n        \n        obj1 = {'value': arr2item.RoleId +'-' + arr1item.BranchId,'label':arr2item.RoleName ,showCheckbox: false,title:title };  \n        child= [...child,obj1]       \n      }  \n      \n      );\n      \n      obj = {'value': arr1item.BranchId,'label':arr1item.Name,showCheckbox: false,title:title,'children':child};\n      \n      parent = [...parent,obj]\n\n\n\n      child= []  \n\n  } )\n\n return parent;\n\n};\n\n\nexport   function MenuItemsNodeSource(sourcearr){\n \n  let gropobj = {};\n  let obj1 = {};\n  let Retobj = {};\n\n  let parent=[];\n  let child=[];\n\n  let Retarr = [];\n  let nvalue = ''\n\n  let title = '';\n      \n      let map = {}, node,node1, res = [], i, obj={},children = [], arr=[];\n\n     \n\n     \n      sourcearr.forEach(arr1item => {\n\n       let arr1=[]\n\n        arr = arr1item.MnuItm;\n\n        if (arr != null)\n        {\n          \n \n          \n\n        console.log('sourcearr',sourcearr)\n\n        for (i = 0; i < arr.length; i += 1) {\n          map[arr[i].MnuItmId] = i;\n         \n           nvalue = arr[i].MnuItmId +'-' + arr[i].MnuGrpId +'-'+ arr[i].MnuItmName  +'-'+ arr[i].Ord +'-'+ arr[i].ParentId  + '-' + arr[i].Link\n           Retobj = { value:nvalue,label:arr[i]} \n           \n           obj={value:nvalue,label:arr[i].MnuItmName , showCheckbox:false}\n           arr1=[...arr1,obj]\n          // arr1[i].children = [];\n           if (arr[i].ParentId ==null)\n           {\n             arr[i].ParentId=0;\n           }\n           \n       };\n       \n\n       for (i = 0; i < arr.length; i += 1) {\n          node = arr[i];\n          node1 = arr1[i];\n          if (node.ParentId !== 0) { \n            \n             if (arr1[map[node.ParentId]].children==null)\n             {\n              arr1[map[node.ParentId]].children = [];\n             }             \n             arr1[map[node.ParentId]].children.push(node1);\n          }\n          else {         \n            child.push(node1);\n          };\n       };\n      }\n      console.log('arr1item',arr1item);\n      nvalue='0-'+ arr1item.MnuGrpId +'-'+ arr1item.MnuGrpName +'-'+ arr1item.Ord +'-'+ arr1item.Link\n      gropobj = {'value': nvalue,'label':arr1item.MnuGrpName,showCheckbox: false,'children':child};\n      Retobj = { value:nvalue,label:arr1item } \n      parent = [...parent,gropobj] \n\n      child= []  \n\n  } )  \n\n  console.log('parent',parent);\n return parent;\n //return [parent,Retarr];\n\n}\n\n\nexport   function UserBranchRoleMapNodeSource(arr1){\n \n    let obj = {};\n    let obj1 = {};\n  \n    let parent=[];\n    let child=[];\n    let arr2 = [];\n  \n        arr1.forEach(arr1item => {\n  \n         arr2 = arr1item.Roles;\n  \n        arr2.forEach(arr2item => {\n          obj1 = {'value': arr2item.BRMapId,'label':arr2item.RName};  \n          child= [...child,obj1]       \n        }  \n        \n        );\n    \n        obj = {'value': arr1item.BranchId +'-B','label':arr1item.Name,showCheckbox: false,'children':child};\n        \n        parent = [...parent,obj]\n  \n        child= []  \n  \n    } )  \n  \n   return parent;\n  \n  }\n  \n\n  export   function StageBranchRoleMapNodeSource(arr1){\n \n    let obj = {};\n    let obj1 = {};\n    let obj3= {};\n  \n    let parent=[];\n    let child=[];\n    let RWchild=[];\n    let arr2 = [];\n  \n        arr1.forEach(arr1item => {\n  \n         arr2 = arr1item.Roles;\n  \n        arr2.forEach(arr2item => {\n\n          let RWchild= [{'value': arr2item.BRMapId + '-R','label':'Read'},{'value': arr2item.BRMapId + '-W','label':'Write'}];\n\n          obj1 = {'value': arr2item.BRMapId,'label':arr2item.RName ,'children':RWchild};  \n          child= [...child,obj1]       \n        }  \n        \n        );\n    \n        obj = {'value': arr1item.BranchId +'-B','label':arr1item.Name,showCheckbox: false,'children':child};\n        \n        parent = [...parent,obj]\n  \n        child= []  \n  \n    } )  \n  \n   return parent;\n  \n  }\n\n\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllScreenList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllScreen = apiendpoints.AllScreen;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllScreen\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllScreen;\r\n\r\n console.log(combonurl); \r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllStageList = async (screenid) => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllStage = apiendpoints.AllStage;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllStage\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {txtScreenId:screenid}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllStage;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n\r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\n export const GetBranchList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\nconst BranchList = apiendpoints.BranchList;\r\n\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl =  BranchList;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));\r\n    console.log(strResponse);    \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n\r\n"],"names":["apiendpoints","appsettings","getNodeIds","nodes","ids","forEach","_ref","value","children","schema","yup","shape","rolenode","roleexpanded","setRoleExpand","useState","rolechecked","setRolechecked","Screenid","setScreenid","StageId","setStageId","StageName","setStageName","isLoading","setLoanding","ScreenList","setScreenList","branchresbody","setbranchlistresbody","useEffect","async","StageListResponse","GetscreenList","console","log","body","scrstgs","FetchScreenList","BranchListResponse","GetBranchList","Branches","FetchBranchList","SBRMap","setSBRMap","FetchScreenRole","scrid","ScreenRoleResponse","GetScreenRole","StageList","setStageList","stageresbody","setstagelistresbody","length","StageBranchRoleMapNodeSource","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","alert","setAlert","onSubmitHandler","data","e","preventDefault","frmData","Rights","UpdateStageRoleRights","arritem","BRMapId","RWFlag","Right","nodearr","split","objIndex","findIndex","obj","Flag","push","StgId","JSON","stringify","convID","generateUUID","reqdata","hdr","convid","tag","orgid","vendid","reqHdr","headers","Authorization","localStorage","getItem","response","api","post","compressBase64","strResponse","parse","decompressBase64","rst","ShowAlert","fdr","setTimeout","rstmsg","AlertType","message","txtStageId","txtStagename","err","error","alertType","_errors$cmbScrId","_errors$txtStageId","_jsx","_Fragment","className","style","borderRadius","_jsxs","htmlFor","onChange","ScreenId","stagelistarr","find","screenitem","ScrId","Stages","onScreenChange","target","map","res","ScrName","cmbScrId","name","size","Stageid","Rolearr","checkednodearr","Expandnodearr","stagearr","filter","stageitem","StgName","stagerolearr","undefined","onStageChange","Spinner","Alerts","onSubmit","autocomplete","type","id","disabled","placeholder","CheckboxTree","checked","expanded","onCheck","onExpand","MenuItemsNodeSource","sourcearr","node","node1","i","gropobj","Retobj","parent","child","nvalue","arr","arr1item","arr1","MnuItm","MnuItmId","MnuGrpId","MnuItmName","Ord","ParentId","Link","label","showCheckbox","MnuGrpName","UserBranchRoleMapNodeSource","obj1","arr2","Roles","arr2item","RName","BranchId","Name","RWchild","GetAllScreenList","Response","AllScreen","combonurl","then","GetAllStageList","AllStage","txtScreenId","screenid","BranchList"],"sourceRoot":""}