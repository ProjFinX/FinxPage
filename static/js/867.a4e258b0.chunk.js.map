{"version":3,"file":"static/js/867.a4e258b0.chunk.js","mappings":"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","sources":["components/CommunicationDefiner/SMTPMaster.js","components/utilities/getsmtpmaster.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { FetchCombodata } from \"../utilities/combodata\";\nimport api from \"../api/Webcall\";\nimport {\n  generateUUID,\n  compressLZW,\n  decompressLZW,\n  compressBase64,\n  decompressBase64,\n} from \"../utilities/utils\";\nimport Spinner from \"../htmlcomponents/Spinner\";\nimport Alerts from \"../htmlcomponents/Alerts\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Getsmtplist } from \"../utilities/getsmtpmaster\";\nimport { Scrollbar } from \"react-scrollbars-custom\";\nimport Table from \"react-bootstrap/Table\";\nimport { toast } from 'react-toastify';\nimport appsettings from \"../../appsettings.json\"\nconst apiendpoints = appsettings.ApiEndpoints;\n// Yup validation schema\n\nconst schema = yup.object().shape({\n  txtHostname: yup\n    .string()\n    .required(\"Host name  can not be empty\")\n    .email(\"Pls provide Valid  Email id\") ,\n    txtPassword: yup\n    .string()\n    .required(\"Password can not be empty\")\n    .min(3, \"Password Min length is 3\")\n    .max(20, \"Password. Max lenght is 20 \"),\n});\n\n// Function Component Branch\n\nconst SMTPMaster = () => {\n  // Combo Data fetching------------------------------\n\n  const [smtplst, setsmtplst] = useState([]);\n  const [resbody, setresbody] = useState([]);\n  const LoadCombo = async () => {\n    // Update state with incremented value\n\n    const opt = \"|CUN|\";\n    const optw = \"\";\n    // debugger;\n\n    const Response = await FetchCombodata(opt, optw); // JSON.stringify(await FetchCombodata(opt,optw));\n\n    setresbody(Response.body.cun);\n    console.log(\"rerendering method\");\n  };\n\n  useEffect(() => {\n    LoadCombo();\n    FetchSMTPList();\n  }, []);\n\n  // Useeffect\n\n  //-----------------------------\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const [alert, setAlert] = useState(\"\");\n\n  const [isLoading, setLoanding] = useState(false);\n\n  function SetScreenValue(rowval) {\n    console.log(rowval);\n\n    reset({   \n      txtSMTPId: rowval.id,  \n      txtHostname: rowval.host,\n      txtPort: rowval.portno,\n      txtEmail: rowval.email,\n      txtPassword: \"\",\n      cbIsSSL: rowval.isssl,\n      cbIsActive: rowval.isactive,     \n    });\n  }\n\n\n  function ResetScreenValue() {\n    reset({\n      txtSMTPId: \"\",  \n      txtHostname: \"\",\n      txtPort: \"\",\n      txtEmail: \"\",\n      txtPassword: \"\",\n      cbIsSSL: false,\n      cbIsActive: false, \n    });\n  }\n\n  const navigate = useNavigate();\n\n  const FetchSMTPList = async () => {\n    const SMTPListResponse = await Getsmtplist();\n    console.log(JSON.stringify(SMTPListResponse));\n    setsmtplst(SMTPListResponse.body.smpt);    \n  };\n\n  const onSubmitHandler = async (data) => {   \n\n\n    let SmtpId = 0;\n    if (data.txtSMTPId!=\"\")\n      SmtpId = data.txtSMTPId;\n\n    const convID = generateUUID();\n    const frmHdr = {\n      convid: convID,\n      tag: \"updscr\",\n      orgid: \"\",\n      vendid: \"0\",\n    };\n    const frmData = {  \"txtSmtpId\":SmtpId, \"txtHost\":data.txtHostname, \"cbIsSSL\":data.cbIsSSL, \"txtPortNo\":data.txtPort,\n      \"txtEmail\":data.txtEmail, \"txtPwd\":data.txtPassword, \"cbIsActive\":data.cbIsActive }\n\n    const reqdata = { hdr: frmHdr, body: frmData };\n    const token = localStorage.getItem(\"token\");\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n   const updsmtp  = apiendpoints.updsmtp ;\n    console.log(frmData);\n    try {\n      //debugger;\n      const response = await api.post(\n        updsmtp,\n        compressBase64(reqdata),\n        reqHdr\n      );\n   \n      const strResponse = JSON.parse(decompressBase64(response.data));\n\n      console.log(strResponse);\n  \n       \n\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {        \n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr));\n        toast.error( JSON.stringify(strResponse.fdr));\n        setLoanding(false);\n      } else {\n        setTimeout(() => {\n          console.log(strResponse.fdr);\n          ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\n          toast.success(\"Successfully updated\");\n          setTimeout(() => {\n            setAlert({\n              AlertType: \"null\",\n              message: \"null\",\n            });\n          }, 600);\n            ResetScreenValue();\n            FetchSMTPList();\n            setLoanding(false);\n        }, 300); \n       \n      }\n    } catch (err) {\n      console.log(err.message);\n      ShowAlert(\"Error\", \"Unable to process request\");\n      setLoanding(false);\n    }\n  };\n\n  const ShowAlert = (alertType, message) => {\n    setAlert({\n      AlertType: alertType,\n      message: message,\n    });\n  };\n  \n  try {\n\n  return (\n    <>\n      <section className=\"vh-100\">\n        <div className=\"container h-100\">\n          {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\n                  <div className=\"col-lg-12 col-xl-11\"> */}\n          <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\n            <div className=\"card-header\">\n              <strong className=\"card-title\">SMTP Master</strong>\n            </div>\n            <div className=\"card-body p-md-5\">\n\n            {isLoading?(<Spinner></Spinner>) :\"\"}                        \n            <Alerts alert={alert} />                      \n\n              {isLoading ? <Spinner></Spinner> : \"\"}\n              <Alerts alert={alert} />\n\n              <form onSubmit={handleSubmit(onSubmitHandler)} autocomplete=\"off\">\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtHostname\" className=\"form-label\">\n                        {\" \"}\n                        Host Name\n                      </label>\n                      <input\n                        {...register(\"txtHostname\")}\n                        type=\"email\"\n                        className=\"form-control\"\n                        \n                      />\n                      <p>{errors.txtHostname?.message}</p>\n                    </div>\n                  </div>\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                    <label htmlFor=\"txtSMTPId\" className=\"form-label\">\n                        {\" \"}\n                        SMTP Id\n                      </label>\n                      <input\n                        {...register(\"txtSMTPId\")}\n                        disabled=\"disabled\"\n                        readonly=\"readonly\"\n                        className=\"form-control\"\n                       \n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtPort\" className=\"form-label\">\n                        {\" \"}\n                        Port\n                      </label>\n                      <input\n                        {...register(\"txtPort\")}\n                        type=\"text\"\n                        className=\"form-control\"                      \n                      />\n                      <p>{errors.txtPort?.message}</p>\n                    </div>\n                  </div>\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtEmail\" className=\"form-label\">\n                        Email\n                      </label>\n                      <input\n                        {...register(\"txtEmail\")}\n                        type=\"email\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtEmail?.message}</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtPassword\" className=\"form-label\">\n                        {\" \"}\n                        Password.\n                      </label>\n                      <input\n                        {...register(\"txtPassword\")}\n                        type=\"text\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtPassword?.message}</p>\n                    </div>\n                  </div>\n                 \n                 \n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n\n                    <div className=\"col-md-1\">\n                        <input {...register(\"cbIsSSL\")} type=\"checkbox\"/>\n                        {\" \"}<label htmlFor=\"cbIsSSL\" className=\"form-label\">IsSSL</label>\n                    </div>\n\n                    \n                    \n                    </div>\n                  </div>\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                    <div className=\"col-md-1\">\n                        <input {...register(\"cbIsActive\")} type=\"checkbox\" />\n                        {\" \"}<label htmlFor=\"cbIsActive\" className=\"form-label\">IsActive </label>\n                    </div>\n                    </div>\n                  </div>\n                </div>\n                \n               \n\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Submit\n                </button>\n              </form>\n            </div>\n            <Scrollbar style={{ width: 1200, height: 550 }}>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th className=\"text-center\">Id</th>\n                    <th className=\"text-center\">HOST</th>\n                    <th className=\"text-center\">Port</th>\n                    <th className=\"text-center\">Email.</th>\n                    <th className=\"text-center\">IsSSL</th>                   \n                    <th className=\"text-center\">SMTPStatus</th>\n                   \n                    <th>\n                      <button\n                        className=\"btn btn-success\"\n                        onClick={() => {\n                          ResetScreenValue();\n                        }}\n                      >\n                        {\" \"}\n                        <i className=\"bi bi-table\"></i> Add{\" \"}\n                      </button>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {smtplst &&\n                    smtplst.map((x) => {\n                      return (\n                        <tr>\n                          <td>{x.id}</td>\n                          <td>{x.host}</td>\n                          <td>{x.portno }</td>\n                          <td>{ x.email}</td>\n                          <td>{ x.isssl}</td>\n                          <td>{ x.isactive}</td>\n                          <td>\n                            <button\n                              className=\"btn btn-primary\"\n                              onClick={() => {\n                                SetScreenValue(x);\n                              }}\n                            >\n                              {\" \"}\n                              <i className=\"bi bi-pen\"></i> Edit\n                            </button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </Table>\n            </Scrollbar>\n          </div>\n          {/* </div>\n            </div> */}\n        </div>\n      </section>\n    </>\n  );\n} catch (error) {\n\n  console.log(error.message)\n    \n}\n};\n\nexport default SMTPMaster;\n","import React, { useState, useEffect } from \"react\";\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const UpdSmtpMaster = async (x) => {\n\n\nlet Response;\nconst updscr  = apiendpoints.updscr ;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n\n let SmtpId = 0;\n if (x.txtSMTPId!=\"\")\n   SmtpId = x.txtSMTPId;\n\n\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"updscr\", orgid: \"\", vendid: \"0\" };\n const frmData = {  \"txtSmtpId\":SmtpId, \"txtHost\":x.txtHostname, \"cbIsSSL\":x.cbIsSSL, \"txtPortNo\":x.txtPort,\n                    \"txtEmail\":x.txtEmail, \"txtPwd\":x.txtPassword, \"cbIsActive\":x.cbIsActive }\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl = updscr;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n export const Getsmtplist = async () => {\n\n\nlet Response;\nconst smtplst = apiendpoints.smtplst;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"smtplst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl =smtplst;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n   \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\nexport const GetMailType = async () => {\n\n\n   let Response;\n   const smtplst = apiendpoints.smtplst;\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n   //  /* Header */\n    const convID = generateUUID();\n    const frmHdr = { convid: convID, tag: \"smtplst\", orgid: \"\", vendid: \"0\" };\n    const frmData = {}\n    const data = { hdr: frmHdr, body: frmData };\n   \n    const token =    localStorage.getItem('token');\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n   \n    const combonurl =smtplst;\n   \n    await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n       const strResponse = JSON.parse(decompressBase64(response.data));\n          \n          Response = strResponse ;\n   \n     })\n   \n     return  Response;\n   \n   };\n\n\n   export const GetMailTemplateList = async () => {\n\n\n      let Response;\n      const miltmpltlst = apiendpoints.miltmpltlst;\n       const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n      //  /* Header */\n       const convID = generateUUID();\n       const frmHdr = { convid: convID, tag: \"miltmpltlst\", orgid: \"\", vendid: \"0\" };\n       const frmData = {}\n       const data = { hdr: frmHdr, body: frmData };\n      \n       const token =    localStorage.getItem('token');\n       const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n      \n       const combonurl =miltmpltlst;\n      \n       await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n          const strResponse = JSON.parse(decompressBase64(response.data));\n         \n             Response = strResponse ;\n      \n        })\n      \n        return  Response;\n      \n      };\n\n\n      export const GetMailTemplateAttachmentList = async (MailTemplateId) => {\n\n\n         let Response;\n         const miltmpltlst = apiendpoints.miltmltdoclst;\n          const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n         //  /* Header */\n          const convID = generateUUID();\n          const frmHdr = { convid: convID, tag: \"miltmltdoclst\", orgid: \"\", vendid: \"0\" };\n          const frmData = {cmbMailTemplateId:MailTemplateId}\n          const data = { hdr: frmHdr, body: frmData };\n         \n          const token =    localStorage.getItem('token');\n          const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n         \n          const combonurl =miltmpltlst;\n         \n          await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n             const strResponse = JSON.parse(decompressBase64(response.data));\n            \n                Response = strResponse ;\n         \n           })\n         \n           return  Response;\n         \n         };\n\n         export const DelMailTmpltAttachmentelmt = async (MailTmplAttchelmtId) => {     \n           \n            let Response;\n            const Delmiltmltdoc = apiendpoints.delatchelm ;\n             const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n            //  /* Header */\n             const convID = generateUUID();\n             const frmHdr = { convid: convID, tag: \"delatchelm\", orgid: \"\", vendid: \"0\" };\n             const frmData = {txtMailAttchElmsId:MailTmplAttchelmtId}\n             const data = { hdr: frmHdr, body: frmData };\n             console.log(frmData); \n             \n             const reqHdr = { };  \n            \n             const combonurl =Delmiltmltdoc;   \n             await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    \n               const strResponse = JSON.parse(decompressBase64(response.data));              \n                   Response = strResponse ;\n            \n              })\n            \n              return  Response;\n            \n            };\n\n            export const GetAtchelmlst  = async (MailTemplateId) => {\n\n\n               let Response;\n               const getatchelmlst = apiendpoints.getatchelmlst;\n                const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n               //  /* Header */\n                const convID = generateUUID();\n                const frmHdr = { convid: convID, tag: \"getatchelmlst\", orgid: \"\", vendid: \"0\" };\n                const frmData = {txtMailTemplateId:MailTemplateId}\n                const data = { hdr: frmHdr, body: frmData };\n               \n                const token =    localStorage.getItem('token');\n                const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n               \n                const combonurl =getatchelmlst;\n               \n                await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n                   const strResponse = JSON.parse(decompressBase64(response.data));\n                  \n                      Response = strResponse ;\n               \n                 })\n               \n                 return  Response;\n               \n               };\n      \n   \n\n"],"names":["apiendpoints","appsettings","schema","yup","shape","txtHostname","required","email","txtPassword","min","max","SMTPMaster","smtplst","setsmtplst","useState","resbody","setresbody","useEffect","async","Response","FetchCombodata","body","cun","console","log","LoadCombo","FetchSMTPList","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","alert","setAlert","isLoading","setLoanding","ResetScreenValue","txtSMTPId","txtPort","txtEmail","cbIsSSL","cbIsActive","useNavigate","SMTPListResponse","Getsmtplist","JSON","stringify","smpt","onSubmitHandler","SmtpId","data","frmHdr","convid","generateUUID","tag","orgid","vendid","frmData","reqdata","hdr","reqHdr","headers","Authorization","localStorage","getItem","updsmtp","response","api","post","compressBase64","strResponse","parse","decompressBase64","rst","ShowAlert","fdr","toast","error","setTimeout","rstmsg","success","AlertType","message","err","alertType","_errors$txtHostname","_errors$txtPort","_errors$txtEmail","_errors$txtPassword","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Spinner","Alerts","onSubmit","autocomplete","htmlFor","type","disabled","readonly","Scrollbar","width","height","Table","striped","bordered","hover","onClick","map","x","id","host","portno","isssl","isactive","rowval","combonurl","then","GetMailTemplateList","miltmpltlst","GetMailTemplateAttachmentList","miltmltdoclst","cmbMailTemplateId","MailTemplateId","DelMailTmpltAttachmentelmt","Delmiltmltdoc","delatchelm","txtMailAttchElmsId","MailTmplAttchelmtId","GetAtchelmlst","getatchelmlst","txtMailTemplateId"],"sourceRoot":""}