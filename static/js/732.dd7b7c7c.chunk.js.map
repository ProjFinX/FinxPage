{"version":3,"file":"static/js/732.dd7b7c7c.chunk.js","mappings":"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","sources":["components/CommunicationDefiner/MailTemplate.js","components/utilities/getsmtpmaster.js","components/utilities/getuserlist.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { FetchCombodata } from \"../utilities/combodata\";\nimport {\n  Getsmtplist,\n  GetMailTemplateList,\n} from \"../utilities/getsmtpmaster\";\nimport api from \"../api/Webcall\";\nimport {\n  generateUUID,\n  compressLZW,\n  decompressLZW,\n  compressBase64,\n  decompressBase64,\n} from \"../utilities/utils\";\nimport Spinner from \"../htmlcomponents/Spinner\";\nimport Alerts from \"../htmlcomponents/Alerts\";\nimport { useNavigate } from \"react-router-dom\";\nimport { GetUserList } from \"../utilities/getuserlist\";\nimport { Scrollbar } from \"react-scrollbars-custom\";\nimport Table from \"react-bootstrap/Table\";\n\nimport { toast } from 'react-toastify';\nimport appsettings from \"../../appsettings.json\"\nconst apiendpoints = appsettings.ApiEndpoints;\n\n// Yup validation schema\n\nconst schema = yup.object().shape({\n  txtTemplatename: yup\n    .string()\n    .required(\"Template name  can not be empty\") \n  \n});\n\n// Function Component Branch\n\nconst MailTemplate = () => {\n  // Combo Data fetching------------------------------\n  const [smtplst, setsmtplst] = useState([]);\n  const [miltmpltlsbody, setmiltmpltlsresbody] = useState([]);\n  const [resbody, setresbody] = useState([]);\n  const LoadCombo = async () => {\n    // Update state with incremented value\n\n    const opt = \"|MILTY|\";\n    const optw = \"\";\n    // debugger;\n\n    const Response = await FetchCombodata(opt, optw); // JSON.stringify(await FetchCombodata(opt,optw));\n\n    setresbody(Response.body.milty);\n\n  };\n\n  useEffect(() => {\n    FetchSMTPList();\n    LoadCombo();\n    FetchMailTemplateList();\n  }, []);\n\n  // Useeffect\n\n  //-----------------------------\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const [alert, setAlert] = useState(\"\");\n\n  const [isLoading, setLoanding] = useState(false);\n\n  function SetScreenValue(rowval) {\n    console.log(rowval);\n\n    reset({\n      txtUserId: rowval.UserId,\n      txtUsername: rowval.Username,\n      txtFirstname: rowval.FName,\n      txtLastname: rowval.LName,\n      txtPhone: rowval.tleid,\n      cmbCountryId: rowval.tleid,\n      txtPassword: rowval.tleid,\n      txtConformPassword: rowval.tleid,\n    });\n  }\n\n  function ResetScreenValue() {\n    reset({\n      txtTemplatename: \"\",\n      cmbSMTPId: \"\",\n      cmbMailType: \"\",\n      cbIsHTML: \"\",\n      cbIsActive: \"\",\n      txtSubject: \"\",\n      txtBody: \"\",\n    });\n  }\n\n  const navigate = useNavigate();\n\n  const FetchSMTPList = async () => {\n    const SMTPListResponse = await Getsmtplist();\n    console.log(JSON.stringify(SMTPListResponse));\n    setsmtplst(SMTPListResponse.body.smpt);\n  };\n\n  const FetchMailTemplateList = async () => {\n    const UserListResponse = await GetMailTemplateList();\n    console.log(JSON.stringify(UserListResponse));\n    setmiltmpltlsresbody(UserListResponse.body.smpt);\n\n    console.log(JSON.stringify(UserListResponse.body.Users));\n  };\n\n  const onSubmitHandler = async (data) => {\n    setLoanding(true);\n\n\n    let MailTemplateId = 0;\n    if (data.txtMailTemplateId==undefined)\n      MailTemplateId = 0;\n    else\n      MailTemplateId = data.txtMailTemplateId;\n\n    //e.preventDefault();\n    /* Header */\n    const convID = generateUUID();\n    const frmHdr = {\n      convid: convID,\n      tag: \"NewUser\",\n      orgid: \"\",\n      vendid: \"0\",\n    };\n    const frmData = {\n      txtMailTemplateId: MailTemplateId,\n      txtTemplateName: data.txtTemplatename,\n      cmbMailTypeId: data.cmbMailType,\n      cmbSMTPId: data.cmbSMTPId,\n      txtMailSubject: data.txtSubject,\n      txtMailContent: data.txtBody,\n      cbIsHtml: data.cbIsHTML,\n      cbIsActive: data.cbIsActive,\n    };\n    console.log(frmData);\n    const reqdata = { hdr: frmHdr, body: frmData };\n    const token = localStorage.getItem(\"token\");\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n    const updmiltmplt = apiendpoints.updmiltmplt;\n   \n    try {\n      //debugger;\n      const response = await api.post(updmiltmplt, compressBase64(reqdata), reqHdr);\n\n      const strResponse = JSON.parse(decompressBase64(response.data));\n\n      console.log(strResponse);\n\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr));\n        toast.error(JSON.stringify(strResponse.fdr));\n        setLoanding(false);\n      } else {\n        setTimeout(() => {\n          console.log(strResponse.fdr);\n          ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\n          toast.success(\"Successfully updated\");\n          setTimeout(() => {\n            setAlert({\n              AlertType: \"null\",\n              message: \"null\",\n            });\n          }, 600);\n          ResetScreenValue();\n          FetchMailTemplateList();\n          setLoanding(false);\n        }, 300);\n      }\n    } catch (err) {\n      console.log(err.message);\n      ShowAlert(\"Error\", \"Unable to process request\");\n      setLoanding(false);\n    }\n  };\n\n  const ShowAlert = (alertType, message) => {\n    setAlert({\n      AlertType: alertType,\n      message: message,\n    });\n  };\n\n  return (\n    <>\n      <section className=\"vh-100\">\n        <div className=\"container h-100\">\n          {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\n                  <div className=\"col-lg-12 col-xl-11\"> */}\n          <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\n            <div className=\"card-header\">\n              <strong className=\"card-title\">Mail Template</strong>\n            </div>\n            <div className=\"card-body p-md-5\">\n              {isLoading ? <Spinner></Spinner> : \"\"}\n              <Alerts alert={alert} />\n\n              <form onSubmit={handleSubmit(onSubmitHandler)} autocomplete=\"off\">\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtTemplatename\" className=\"form-label\">\n                        {\" \"}\n                        Template Name\n                      </label>\n                      <input\n                        {...register(\"txtTemplatename\")}\n                        type=\"text\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtTemplatename?.message}</p>\n                    </div>\n                  </div>\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"cmbSMTPId\" className=\"form-label\">\n                        SMTP\n                      </label>\n                      <select\n                        {...register(\"cmbSMTPId\")}\n                        className=\"form-control\"\n                      >\n                        <option value=\"\">- Select -</option>\n                        {\n                          //Combo Data binding\n                          smtplst.map((res) => (\n                            <option key={res.id} value={res.id}>\n                              {res.email}\n                            </option>\n                          ))\n                        }\n                      </select>\n                      <p>{errors.cmbSMTPId?.message}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtMailTemplateId\" className=\"form-label\">\n                        {\" \"}\n                        MailTemplate Id\n                      </label>\n                      <input\n                        {...register(\"txtMailTemplateId\")}\n                        type=\"text\"\n                        disabled=\"disabled\"\n                        readonly=\"readonly\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtMailTemplateId?.message}</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"cmbMailType\" className=\"form-label\">\n                        Mail Type\n                      </label>\n                      <select\n                        {...register(\"cmbMailType\")}\n                        className=\"form-control\"\n                      >\n                        <option value=\"\">- Select -</option>\n                       \n                        {\n                          //Combo Data binding\n                          resbody.map((res) => (\n                            <option key={res.k} value={res.k}>\n                              {res.v}\n                            </option>\n                          ))\n                        }\n                      </select>\n                      <p>{errors.cmbMailType?.message}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <div className=\"col-md-1\">\n                        <input {...register(\"cbIsHTML\")} type=\"checkbox\" />{\" \"}\n                        <label htmlFor=\"cbIsHTML\" className=\"form-label\">\n                          IsHTML\n                        </label>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <div className=\"col-md-1\">\n                        <input {...register(\"cbIsActive\")} type=\"checkbox\" />{\" \"}\n                        <label htmlFor=\"cbIsActive\" className=\"form-label\">\n                          IsActive{\" \"}\n                        </label>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtSubject\" className=\"form-label\">\n                        {\" \"}\n                        Mail Subject\n                      </label>\n                      <input\n                        {...register(\"txtSubject\")}\n                        type=\"text\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtSubject?.message}</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtBody\" className=\"form-label\">\n                        {\" \"}\n                        Mail Body\n                      </label>\n                      <textarea\n                        {...register(\"txtBody\")}\n                        type=\"text\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtBody?.message}</p>\n                    </div>\n                  </div>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Submit\n                </button>\n              </form>\n            </div>\n            <Scrollbar style={{ width: 1200, height: 550 }}>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th className=\"text-center\">Id</th>\n                    <th className=\"text-center\">Name</th>\n                    <th className=\"text-center\">SMTP</th>\n                    <th className=\"text-center\">Subject</th>\n                    <th className=\"text-center\">Mail Type</th>\n                    <th className=\"text-center\">Status</th>\n\n                    <th>\n                      <button\n                        className=\"btn btn-success\"\n                        onClick={() => {\n                          ResetScreenValue();\n                        }}\n                      >\n                        {\" \"}\n                        <i className=\"bi bi-table\"></i> Add{\" \"}\n                      </button>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {miltmpltlsbody &&\n                    miltmpltlsbody.map((x) => {\n                      return (\n                        <tr>\n                          <td>{x.tmpltid}</td>\n                          <td>{x.tmpltna}</td>\n                          <td>{x.email}</td>\n                          <td>{x.subj}</td>\n                          <td></td>\n                          <td></td>\n                          <td>\n                            <button\n                              className=\"btn btn-primary\"\n                              onClick={() => {\n                                SetScreenValue(x);\n                              }}\n                            >\n                              {\" \"}\n                              <i className=\"bi bi-pen\"></i> Edit\n                            </button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </Table>\n            </Scrollbar>\n          </div>\n          {/* </div>\n            </div> */}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default MailTemplate;\n","import React, { useState, useEffect } from \"react\";\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const UpdSmtpMaster = async (x) => {\n\n\nlet Response;\nconst updscr  = apiendpoints.updscr ;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n\n let SmtpId = 0;\n if (x.txtSMTPId!=\"\")\n   SmtpId = x.txtSMTPId;\n\n\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"updscr\", orgid: \"\", vendid: \"0\" };\n const frmData = {  \"txtSmtpId\":SmtpId, \"txtHost\":x.txtHostname, \"cbIsSSL\":x.cbIsSSL, \"txtPortNo\":x.txtPort,\n                    \"txtEmail\":x.txtEmail, \"txtPwd\":x.txtPassword, \"cbIsActive\":x.cbIsActive }\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl = updscr;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n export const Getsmtplist = async () => {\n\n\nlet Response;\nconst smtplst = apiendpoints.smtplst;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"smtplst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl =smtplst;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n   \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\nexport const GetMailType = async () => {\n\n\n   let Response;\n   const smtplst = apiendpoints.smtplst;\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n   //  /* Header */\n    const convID = generateUUID();\n    const frmHdr = { convid: convID, tag: \"smtplst\", orgid: \"\", vendid: \"0\" };\n    const frmData = {}\n    const data = { hdr: frmHdr, body: frmData };\n   \n    const token =    localStorage.getItem('token');\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n   \n    const combonurl =smtplst;\n   \n    await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n       const strResponse = JSON.parse(decompressBase64(response.data));\n          \n          Response = strResponse ;\n   \n     })\n   \n     return  Response;\n   \n   };\n\n\n   export const GetMailTemplateList = async () => {\n\n\n      let Response;\n      const miltmpltlst = apiendpoints.miltmpltlst;\n       const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n      //  /* Header */\n       const convID = generateUUID();\n       const frmHdr = { convid: convID, tag: \"miltmpltlst\", orgid: \"\", vendid: \"0\" };\n       const frmData = {}\n       const data = { hdr: frmHdr, body: frmData };\n      \n       const token =    localStorage.getItem('token');\n       const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n      \n       const combonurl =miltmpltlst;\n      \n       await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n          const strResponse = JSON.parse(decompressBase64(response.data));\n         \n             Response = strResponse ;\n      \n        })\n      \n        return  Response;\n      \n      };\n\n\n      export const GetMailTemplateAttachmentList = async (MailTemplateId) => {\n\n\n         let Response;\n         const miltmpltlst = apiendpoints.miltmltdoclst;\n          const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n         //  /* Header */\n          const convID = generateUUID();\n          const frmHdr = { convid: convID, tag: \"miltmltdoclst\", orgid: \"\", vendid: \"0\" };\n          const frmData = {cmbMailTemplateId:MailTemplateId}\n          const data = { hdr: frmHdr, body: frmData };\n         \n          const token =    localStorage.getItem('token');\n          const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n         \n          const combonurl =miltmpltlst;\n         \n          await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n             const strResponse = JSON.parse(decompressBase64(response.data));\n            \n                Response = strResponse ;\n         \n           })\n         \n           return  Response;\n         \n         };\n\n         export const DelMailTmpltAttachmentelmt = async (MailTmplAttchelmtId) => {     \n           \n            let Response;\n            const Delmiltmltdoc = apiendpoints.delatchelm ;\n             const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n            //  /* Header */\n             const convID = generateUUID();\n             const frmHdr = { convid: convID, tag: \"delatchelm\", orgid: \"\", vendid: \"0\" };\n             const frmData = {txtMailAttchElmsId:MailTmplAttchelmtId}\n             const data = { hdr: frmHdr, body: frmData };\n             console.log(frmData); \n             \n             const reqHdr = { };  \n            \n             const combonurl =Delmiltmltdoc;   \n             await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    \n               const strResponse = JSON.parse(decompressBase64(response.data));              \n                   Response = strResponse ;\n            \n              })\n            \n              return  Response;\n            \n            };\n\n            export const GetAtchelmlst  = async (MailTemplateId) => {\n\n\n               let Response;\n               const getatchelmlst = apiendpoints.getatchelmlst;\n                const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n               //  /* Header */\n                const convID = generateUUID();\n                const frmHdr = { convid: convID, tag: \"getatchelmlst\", orgid: \"\", vendid: \"0\" };\n                const frmData = {txtMailTemplateId:MailTemplateId}\n                const data = { hdr: frmHdr, body: frmData };\n               \n                const token =    localStorage.getItem('token');\n                const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n               \n                const combonurl =getatchelmlst;\n               \n                await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n                   const strResponse = JSON.parse(decompressBase64(response.data));\n                  \n                      Response = strResponse ;\n               \n                 })\n               \n                 return  Response;\n               \n               };\n      \n   \n\n","import React, { useState, useEffect } from \"react\";\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetUserList = async () => {\n\n\nlet Response;\nconst UserList = apiendpoints.UserList;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl = UserList;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n export const GetAllUserList = async () => {\n\n\nlet Response;\nconst AllUserList = apiendpoints.AllUserList;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl =AllUserList;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n"],"names":["apiendpoints","appsettings","schema","yup","shape","txtTemplatename","required","MailTemplate","_errors$txtTemplatena","_errors$cmbSMTPId","_errors$txtMailTempla","_errors$cmbMailType","_errors$txtSubject","_errors$txtBody","smtplst","setsmtplst","useState","miltmpltlsbody","setmiltmpltlsresbody","resbody","setresbody","useEffect","FetchSMTPList","async","Response","FetchCombodata","body","milty","LoadCombo","FetchMailTemplateList","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","alert","setAlert","isLoading","setLoanding","ResetScreenValue","cmbSMTPId","cmbMailType","cbIsHTML","cbIsActive","txtSubject","txtBody","useNavigate","SMTPListResponse","Getsmtplist","console","log","JSON","stringify","smpt","UserListResponse","GetMailTemplateList","Users","ShowAlert","alertType","message","AlertType","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Spinner","Alerts","onSubmit","MailTemplateId","undefined","data","txtMailTemplateId","frmHdr","convid","generateUUID","tag","orgid","vendid","frmData","txtTemplateName","cmbMailTypeId","txtMailSubject","txtMailContent","cbIsHtml","reqdata","hdr","reqHdr","headers","Authorization","localStorage","getItem","updmiltmplt","response","api","post","compressBase64","strResponse","parse","decompressBase64","rst","fdr","toast","error","setTimeout","rstmsg","success","err","autocomplete","htmlFor","type","value","map","res","id","email","disabled","readonly","k","v","Scrollbar","width","height","Table","striped","bordered","hover","onClick","x","tmpltid","tmpltna","subj","rowval","txtUserId","UserId","txtUsername","Username","txtFirstname","FName","txtLastname","LName","txtPhone","tleid","cmbCountryId","txtPassword","txtConformPassword","combonurl","then","miltmpltlst","GetMailTemplateAttachmentList","miltmltdoclst","cmbMailTemplateId","DelMailTmpltAttachmentelmt","Delmiltmltdoc","delatchelm","txtMailAttchElmsId","MailTmplAttchelmtId","GetAtchelmlst","getatchelmlst","GetUserList","UserList","GetAllUserList","AllUserList"],"sourceRoot":""}