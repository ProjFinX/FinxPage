{"version":3,"file":"static/js/902.289ae5f5.chunk.js","mappings":"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","sources":["components/dynamicscreendefinition/StageElementMapping.js","components/dynamicscreendefinition/TableRows.js","components/utilities/GetStgScrElements.js","components/utilities/getallscreen.js","components/utilities/getallstage.js","components/utilities/getelementlist.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\n// import \"font-awesome/css/font-awesome.min.css\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport { PostCall, PostCallHeader } from \"../api/Webcall\";\r\n\r\nimport { GetAllScreenList } from \"../utilities/getallscreen\";\r\nimport { GetStgScrElements } from \"../utilities/GetStgScrElements\";\r\nimport { GetElementList } from \"../utilities/getelementlist\";\r\nimport { GetAllStageList } from \"../utilities/getallstage\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Scrollbar } from \"react-scrollbars-custom\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../utilities/utils\";\r\n\r\nimport appsettings from \"../../appsettings.json\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport { PreConstruct } from \"ag-grid-community\";\r\n\r\nimport TableRows from \"./TableRows\";\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\nconst schema = yup.object().shape({});\r\n\r\n//rfce - command\r\nfunction StageElementMapping() {\r\n  // Const & Var\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n\r\n  const [gridshow, setgridShow] = useState(false);\r\n\r\n  const gridhandleClose = () => setgridShow(false);\r\n  const gridhandleShow = () => setgridShow(true);\r\n\r\n  const [gridname, setgridname] = useState(\"\");\r\n\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n  const [Elementresbody, setElementlistresbody] = useState([]);\r\n  const [StageElementresbody, setStageElementlistresbody] = useState([]);\r\n  const [stageresbody, setstagelistresbody] = useState([]);\r\n  const [isLoading, setLoanding] = useState(false);\r\n  const [Screenid, setScreenid] = useState(0);\r\n  const [Stageid, setStageid] = useState(0);\r\n  const [IsCustomScr, setIsCustomScr] = useState(false);\r\n  const [screenfilterlist, setscreenfilterlist] = useState([]);\r\n  const [stagefilterlist, setstagefilterlist] = useState([]);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const ref = useRef();\r\n\r\n  // General Function\r\n\r\n  const filereset = () => {\r\n    ref.current.value = \"\";\r\n  };\r\n\r\n  const FetchAllScreenList = async () => {\r\n    const ScreenListResponse = await GetAllScreenList();\r\n    setscreenfilterlist(\r\n      ScreenListResponse.body.Screens.filter((res) => res.IsActive == true)\r\n    );\r\n  };\r\n\r\n  const FetchStageElementList = async (screenid) => {\r\n    const ElementListResponse = await GetStgScrElements(screenid);\r\n    setStageElementlistresbody(ElementListResponse.body.elements);\r\n  };\r\n\r\n  const FetchElementList = async (screenid) => {\r\n    const ElementListResponse = await GetElementList(screenid);\r\n    setElementlistresbody(ElementListResponse.body.elements);\r\n  };\r\n\r\n  const FetchAllStageList = async (screenid) => {\r\n    const StageListResponse = await GetAllStageList(screenid);\r\n    setstagelistresbody(StageListResponse.body.Screens);\r\n  };\r\n\r\n  //   fetch combo values\r\n\r\n  const [cmbctlres, setctlres] = useState([]);\r\n  const [cmbdttyres, setdttyres] = useState([]);\r\n  const LoadCombo = async () => {\r\n    // Update state with incremented value\r\n\r\n    const opt = \"|CTL|DTTY|\";\r\n    const optw = \"\";\r\n    // \r\n\r\n    const Response = await FetchCombodata(opt, optw);\r\n\r\n    setctlres(Response.body.ctl);\r\n    setdttyres(Response.body.dtty);\r\n    //console.log(\"rerendering method\");\r\n  };\r\n\r\n  // Useeffect\r\n\r\n  useEffect(() => {\r\n    LoadCombo();\r\n    FetchAllScreenList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    Stagereset();\r\n    \r\n  }, [StageElementresbody]);\r\n\r\n  // Event function start\r\n\r\n  const handleFileChange = (event) => {\r\n    if (event.target.files.length > 0) {\r\n      setSelectedFile(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const ScreenOnChange = (e) => {\r\n    setScreenid(e.target.value);\r\n    FetchAllStageList(e.target.value);\r\n    FetchStageElementList(e.target.value);\r\n    FetchElementList(e.target.value);\r\n  };\r\n\r\n  const StageOnChange = (e) => {\r\n    let id = \"\";\r\n    id = e.target.value;\r\n\r\n    setStageid(e.target.value);\r\n\r\n    const filteredElement = StageElementresbody.filter((res) => {\r\n      return res.StageId == id;\r\n    }).sort();\r\n\r\n    console.log(filteredElement);\r\n\r\n    setstagefilterlist(filteredElement);\r\n  };\r\n\r\n  const Stagereset = () => {\r\n    const filteredElement = StageElementresbody.filter((res) => {\r\n      return res.StageId == Stageid;\r\n    }).sort();\r\n\r\n    setstagefilterlist(filteredElement);\r\n  };\r\n\r\n  //  Main Form Submit\r\n\r\n  const OnMainSubmitHandler = async (e) => {\r\n    e.preventDefault(); // 👈️ prevent page refresh\r\n\r\n    var fileCtrl = ref.current.value;\r\n    var filePath = ref.current.value;\r\n\r\n    var fExt = \".csv\";\r\n    var allowedExtns = fExt.replace(/\\,/g, \"|\");\r\n    allowedExtns = allowedExtns.replace(/\\./g, \"\\\\.\");\r\n    allowedExtns = \"/(\" + allowedExtns.replace(/ /g, \"\") + \")$/i;\";\r\n    allowedExtns = eval(allowedExtns);\r\n    if (!allowedExtns.exec(filePath)) {\r\n      toast.error(\"Invalid file type\");\r\n      ref.current.value = \"\";\r\n      return false;\r\n    }\r\n\r\n    const MAX_FILE_SIZE = 2048; // 2MB\r\n\r\n    if (!selectedFile) {\r\n      toast.error(\"Please choose a file\");\r\n      return false;\r\n    }\r\n\r\n    const fileSizeKiloBytes = selectedFile.size / 1024;\r\n\r\n    if (fileSizeKiloBytes > MAX_FILE_SIZE) {\r\n      toast.error(\"File size is greater than maximum limit\");\r\n      return false;\r\n    }\r\n\r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"uploadfilelments\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    var scrdet = {};\r\n    scrdet[\"scrid\"] = Screenid;\r\n    const formData = new FormData();\r\n    formData.append(\"_scrdet\", JSON.stringify(scrdet));\r\n    formData.append(\"file\", selectedFile);\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    try {\r\n      const url = apiendpoints.UpldStageElements;\r\n\r\n      let response = await api.post(url, formData);\r\n\r\n      let strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        setLoanding(false);\r\n      } else {\r\n        toast.success(\"Successfully updated\");\r\n        setTimeout(() => {}, 600);\r\n        FetchStageElementList(Screenid);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      ShowAlert(\"Error\", \"Unable to process request\");\r\n      setLoanding(false);\r\n    }\r\n  };\r\n\r\n  const onModalSubmitHandler = async (data) => {\r\n    console.log(data);\r\n\r\n    let frmData = {\r\n      txtStgElmDesignId: data.txtStgElmDesignId,\r\n      scrid: Screenid,\r\n      txtStageId: Stageid,\r\n      txtElementName: data.txtElementName,\r\n      txtOrdNo: data.txtOrdNo,\r\n      txtWrap: data.txtWrap,\r\n      txtCssClass: data.txtCssClass,\r\n      cbIsMandatory: data.cbIsMandatory,\r\n      cbIsReadOnly: data.cbIsReadOnly,\r\n    };\r\n\r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"UpdStageElements\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n    const UpdStageElements = apiendpoints.UpdStageElements;\r\n\r\n    console.log(reqdata);\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        UpdStageElements,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        setLoanding(false);\r\n      } else {\r\n        setTimeout(() => {\r\n          console.log(strResponse.fdr);\r\n          toast.success(\"Successfully updated\");\r\n          handleClose();\r\n          FetchStageElementList(Screenid);\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      ShowAlert(\"Error\", \"Unable to process request\");\r\n      setLoanding(false);\r\n    }\r\n  };\r\n\r\n  //---------------onSubmitHandler end------\r\n  \r\n  \r\n  //--------Grid prop submit-----------\r\n\r\n  const onGridModalSubmitHandler = async (data) => {\r\n   \r\n    var tablevar = document.getElementById('tblgridprop');\r\n    var tbljson = tableToJson(tablevar)\r\n\r\n    \r\n\r\n    let frmData = {\r\n      txtElementId: data.txtElementId,\r\n      scrid: Screenid,\r\n      txtStageId: Stageid,\r\n      cbAddRow: data.cbAddRow,\r\n      cbCheckBox: data.cbCheckBox,\r\n      cbFilters: data.cbFilters,\r\n      cbMngBtn: data.cbMngBtn,\r\n      txtMngLinks: tbljson,     \r\n    };\r\n\r\n    console.log(frmData);\r\n   \r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"Updgrdprop\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n    const UpdStageElements = apiendpoints.Updgrdprop;\r\n\r\n    console.log(reqdata);\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        UpdStageElements,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        setLoanding(false);\r\n      } else {\r\n        setTimeout(() => {\r\n          console.log(strResponse.fdr);\r\n          toast.success(\"Grid porp Successfully updated\");          \r\n          gridhandleClose();\r\n          FetchStageElementList(Screenid);\r\n          ReSetGridProperty();\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      ShowAlert(\"Error\", \"Unable to process request\");\r\n      setLoanding(false);\r\n      \r\n    }\r\n\r\n\r\n\r\n  }\r\n  //--Grid submit -end\r\n\r\n  function tableToJson(table) {\r\n    try {\r\n      var data = []; // first row needs to be headers\r\n      var headers = [];\r\n      for (var i = 0; i < table.rows[0].cells.length; i++) {\r\n        if (\r\n          table.rows[0].cells[i].innerHTML.toLowerCase().indexOf(\"button\") == \"-1\"\r\n        ) {\r\n          headers[i] = table.rows[0].cells[i].innerHTML.replace(/ /gi, \"\");\r\n        }\r\n      }\r\n      // go through cells\r\n      for (var i = 1; i < table.rows.length; i++) {\r\n        var tableRow = table.rows[i];\r\n        var rowData = {};\r\n        for (var j = 0; j < tableRow.cells.length - 1; j++) {\r\n          rowData[headers[j]] = fetchstringinputboxvalue(\r\n            tableRow.cells[j].innerHTML\r\n          );\r\n        }\r\n        data.push(rowData);\r\n      }\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(err.message);\r\n    }\r\n  }\r\n\r\n    function fetchstringinputboxvalue(str)\r\n    {\r\n      var val ;   \r\n      val = (str.substr(str.indexOf('value'),500).replace(\"value=\",\"\")).replace(\">\",\"\")                    \r\n\r\n      return val.replace('\"',\"\").replace('\"',\"\").trimEnd(); ;\r\n    }\r\n\r\n  function SetScreenValue(rowval) {\r\n    handleShow();\r\n    console.log(rowval);\r\n\r\n    reset({\r\n      txtElementName: rowval.ElmName,\r\n      txtOrdNo: rowval.OrdNo,\r\n      txtWrap: rowval.Wrap,\r\n      txtCssClass: rowval.CssClass,\r\n      cbIsMandatory: rowval.IsMandatory,\r\n      cbIsReadOnly: rowval.IsReadOnly,\r\n      txtStgElmDesignId: rowval.StgElmDesignId,\r\n    });\r\n  }\r\n\r\n\r\n  function SetGridProperty(rowval) {\r\n\r\n    \r\n\r\n    setgridname(rowval.ElmName)\r\n    \r\n    gridhandleShow();\r\n    console.log(rowval);       \r\n\r\n\r\n    reset({\r\n      txtElementId:rowval.ElementId,\r\n      cbAddRow: rowval.GrdProp && rowval.GrdProp.addrow,\r\n      cbCheckBox:rowval.GrdProp &&  rowval.GrdProp.ckbx,\r\n      cbFilters:rowval.GrdProp &&  rowval.GrdProp.fltrs,\r\n      cbMngBtn:rowval.GrdProp &&   rowval.GrdProp.mngbtn      \r\n    });\r\n\r\n    setRowsData( rowval.GrdProp ? rowval.GrdProp.mnglnk : []);\r\n\r\n  }\r\n\r\n\r\n  \r\n  function ReSetGridProperty() {\r\n\r\n   \r\n\r\n    reset({\r\n      txtElementId:'',\r\n      cbAddRow: false,\r\n      cbCheckBox: false,\r\n      cbFilters: false,\r\n      cbMngBtn: false     \r\n    });\r\n\r\n    setRowsData([]);\r\n\r\n  }\r\n\r\n\r\n\r\n  function AddNewElement() {\r\n    handleShow();\r\n\r\n    reset({\r\n      txtElementName: \"\",\r\n      txtOrdNo: \"\",\r\n      txtWrap: \"\",\r\n      txtCssClass: \"\",\r\n      cbIsMandatory: false,\r\n      cbIsReadOnly: false,\r\n      txtStgElmDesignId: \"\",\r\n    });\r\n  }\r\n\r\n  //--------------------------------------------------------------------------------------------------------\r\n  // - Delete element\r\n\r\n  const DeleteScreenValue = async (rowval) => {\r\n    console.log(rowval);\r\n\r\n    var frmData = { scrid: Screenid, stgelmids: [rowval.StgElmDesignId] };\r\n\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"Deleteelement\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n    const DeleteStageElement = apiendpoints.DeleteStageElement;\r\n\r\n    console.log(reqdata);\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        DeleteStageElement,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        toast.error(JSON.stringify(strResponse.fdr[0].rstmsg));\r\n      } else {\r\n        toast.success(\"Deleted Successfully\");\r\n        FetchStageElementList(Screenid);\r\n      }\r\n    } catch (err) {\r\n      toast.error(\"Unable to process request\");\r\n    }\r\n  };\r\n\r\n  //---------------------------------------------------------------------------------------------------------------\r\n\r\n  function ResetScreenValue() {\r\n    ref.current.value = \"\";\r\n  }\r\n\r\n  const CheckboxhandleChange = (e) => {\r\n    if (e.target.value == true) {\r\n      setIsCustomScr(true);\r\n    } else {\r\n      setIsCustomScr(false);\r\n    }\r\n  };\r\n  // Event Function End\r\n\r\n  // Main Function\r\n\r\n  // table methods\r\n\r\n  const [rowsData, setRowsData] = useState([]);\r\n\r\n  const addTableRows = () => {\r\n    const rowsInput = {\r\n      Method: \"\",\r\n      ToolTip: \"\",\r\n      Icon: \"\",\r\n      CSS: \"\",\r\n      Style: \"\",\r\n      Condition: \"\",\r\n    };\r\n    setRowsData([...rowsData, rowsInput]);     \r\n\r\n    \r\n\r\n  };\r\n\r\n\r\n  const deleteTableRows = (index) => {\r\n    const rows = [...rowsData];\r\n    rows.splice(index, 1);\r\n    setRowsData(rows);\r\n  };\r\n\r\n  const handleChange = (index, evnt) => {\r\n    const { name, value } = evnt.target;\r\n    const rowsInput = [...rowsData];\r\n    rowsInput[index][name] = value;\r\n    setRowsData(rowsInput);\r\n  };\r\n\r\n  //table method end\r\n\r\n  const ShowAlert = (alertType, message) => {};\r\n\r\n  try {\r\n    return (\r\n      <>\r\n        <section className=\"vh-100\">\r\n          <div className=\"container h-100\">\r\n            {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\r\n                  <div className=\"col-lg-12 col-xl-11\"> */}\r\n            <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\r\n              <div className=\"card-header\">\r\n                <strong className=\"card-title\">\r\n                  Screen Stage Element Mapping\r\n                </strong>\r\n              </div>\r\n              <div className=\"card-body p-md-5\">\r\n                {isLoading ? <Spinner></Spinner> : \"\"}\r\n                <Alerts alert={alert} />\r\n\r\n                <form onSubmit={OnMainSubmitHandler} autocomplete=\"off\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <label htmlFor=\"scrid\" className=\"form-label\">\r\n                          Screen\r\n                        </label>\r\n\r\n                        <select\r\n                          {...register(\"scrid\")}\r\n                          className=\"form-control\"\r\n                          onChange={ScreenOnChange}\r\n                        >\r\n                          <option value=\"0\">- Select -</option>\r\n                          {\r\n                            //Combo Data binding\r\n\r\n                            screenfilterlist.map((res) => (\r\n                              <option key={res.ScreenId} value={res.ScreenId}>\r\n                                {res.ScrName}\r\n                              </option>\r\n                            ))\r\n                          }\r\n                        </select>\r\n                        <p>{errors.scrid?.message}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <div className=\"row\">\r\n                          <label htmlFor=\"filElements\" className=\"form-label\">\r\n                            {\" \"}\r\n                            Element File\r\n                          </label>\r\n                          <div className=\"col-md-8\">\r\n                            <input\r\n                              type=\"file\"\r\n                              name=\"filElements\"\r\n                              onChange={handleFileChange}\r\n                              ref={ref}\r\n                              className=\"form-control\"\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-md-4 padTop25\">\r\n                            <button type=\"submit\" className=\"btn btn-primary\">\r\n                              <span className=\"bi bi-upload\"></span> upload\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\">\r\n                      <label htmlFor=\"cmb\" className=\"form-label\">\r\n                        Stage\r\n                      </label>\r\n\r\n                      <select\r\n                        {...register(\"cmbStageStageId\")}\r\n                        className=\"form-control\"\r\n                        onChange={StageOnChange}\r\n                      >\r\n                        <option value=\"0\">- Select -</option>\r\n                        {\r\n                          //Combo Data binding\r\n\r\n                          stageresbody.map((res) => (\r\n                            <option key={res.StageId} value={res.StageId}>\r\n                              {res.StageName}\r\n                            </option>\r\n                          ))\r\n                        }\r\n                      </select>\r\n                      <p>{errors.scrid?.message}</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <Scrollbar style={{ height: 550 }}>\r\n                <Table striped bordered hover>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Id</th>\r\n                      <th>Element Name </th>\r\n                      <th>Ord No </th>\r\n                      <th>Wrap </th>\r\n                      <th>Css Class</th>\r\n                      <th>IsMandatory </th>\r\n                      <th>IsReadOnly</th>\r\n                      <th>\r\n                        <button\r\n                          className=\"btn btn-success\"\r\n                          onClick={AddNewElement}\r\n                        >\r\n                          {\" \"}\r\n                          <i className=\"bi bi-table\"></i> Add{\" \"}\r\n                        </button>\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {stagefilterlist &&\r\n                      stagefilterlist.map((x) => {\r\n                        return (\r\n                          <tr>\r\n                            <td>{x.ElementId}</td>\r\n                            <td>{x.ElmName}</td>\r\n                            <td>{x.OrdNo}</td>\r\n                            <td>{x.Wrap}</td>\r\n                            <td>{x.CssClass}</td>\r\n                            <td>{x.IsMandatory ? \"YES\" : \"NO\"}</td>\r\n                            <td>{x.IsReadOnly ? \"YES\" : \"NO\"}</td>\r\n                            <td>\r\n                              <button\r\n                                className=\"btn btn-primary\"\r\n                                onClick={() => {\r\n                                  SetScreenValue(x);\r\n                                }}\r\n                              >\r\n                                {\" \"}\r\n                                <i className=\"bi bi-pen\"></i>\r\n                              </button>\r\n                            </td>\r\n                            <td>\r\n                              <button\r\n                                className=\"btn btn-danger\"\r\n                                onClick={() => {\r\n                                  DeleteScreenValue(x);\r\n                                }}\r\n                              >\r\n                                {\" \"}\r\n                                <i className=\"bi bi-trash\"></i>\r\n                              </button>\r\n                            </td>\r\n                            {/* <td>{ x.ControlType==\"Grid\"? (<button className=\"btn btn-success\"\r\n                                onClick={() => {\r\n                                  SetGridProperty(x);\r\n                                }}\r\n                            \r\n                            > <i className=\"bi bi-grid\"></i>  </button>):\"\" }</td> */}\r\n\r\n                                <button className=\"btn btn-success\"\r\n                                onClick={() => {\r\n                                  SetGridProperty(x);\r\n                                }}\r\n                            \r\n                            > <i className=\"bi bi-grid\"></i>  </button>\r\n\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                  </tbody>\r\n                </Table>\r\n              </Scrollbar>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <Modal\r\n          show={show}\r\n          onHide={handleClose}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Stage Element Details</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <form\r\n              onSubmit={handleSubmit(onModalSubmitHandler)}\r\n              autocomplete=\"off\"\r\n            >\r\n              <div className=\"row\">\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                    <label htmlFor=\"txtElementName \" className=\"form-label\">\r\n                      {\" \"}\r\n                      Element Name\r\n                    </label>\r\n                    <select\r\n                      {...register(\"txtElementName\")}\r\n                      className=\"form-control\"\r\n                    >\r\n                      <option value=\"0\">- Select -</option>\r\n                      {\r\n                        //Combo Data binding\r\n\r\n                        Elementresbody.map((res) => (\r\n                          <option key={res.ElementId} value={res.ElmName}>\r\n                            {res.ElmName}\r\n                          </option>\r\n                        ))\r\n                      }\r\n                    </select>\r\n\r\n                    <p>{errors.cmbControlType?.message}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                    <label htmlFor=\"txtOrdNo\" className=\"form-label\">\r\n                      {\" \"}\r\n                      Order No.\r\n                    </label>\r\n                    <input\r\n                      {...register(\"txtOrdNo\")}\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                    />\r\n                    <input\r\n                      {...register(\"txtStgElmDesignId\")}\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      hidden=\"true\"\r\n                    />\r\n                    <p>{errors.txtOrdNo?.message}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                    <label htmlFor=\"txtWrap  \" className=\"form-label\">\r\n                      {\" \"}\r\n                      txtWrap\r\n                    </label>\r\n\r\n                    <input\r\n                      {...register(\"txtWrap\")}\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                    />\r\n\r\n                    <p>{errors.txtWrap?.message}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                    <label htmlFor=\"txtCssClass  \" className=\"form-label\">\r\n                      {\" \"}\r\n                      Css Class\r\n                    </label>\r\n\r\n                    <input\r\n                      {...register(\"txtCssClass\")}\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                    />\r\n                    <p>{errors.txtCssClass?.message}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                    <input {...register(\"cbIsMandatory\")} type=\"checkbox\" />{\" \"}\r\n                    &nbsp;\r\n                    <label htmlFor=\"cbIsMandatory\" className=\"form-label\">\r\n                      IsMandatory\r\n                    </label>\r\n                    <p>{errors.cbIsMandatory?.message}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                    <input\r\n                      {...register(\"cbIsReadOnly\")}\r\n                      type=\"checkbox\"\r\n\r\n                      //   onChange={(e) => {\r\n                      //     CheckboxhandleChange(\r\n                      //       {\r\n                      //         target: {\r\n                      //           value: e.target.checked,\r\n                      //         },\r\n                      //       },\r\n\r\n                      //     );\r\n                      //   }\r\n                      // }\r\n                    />{\" \"}\r\n                    &nbsp;\r\n                    <label htmlFor=\"cbIsReadOnly\" className=\"form-label\">\r\n                      IsReadOnly\r\n                    </label>\r\n                    <p>{errors.cbIsReadOnly?.message}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                  Close\r\n                </Button>\r\n                <Button type=\"submit\" variant=\"secondary\">\r\n                  Update\r\n                </Button>\r\n              </Modal.Footer>\r\n            </form>\r\n          </Modal.Body>\r\n        </Modal>\r\n\r\n        {/*   Gird Property Model popup start */}\r\n\r\n        <Modal\r\n          show={gridshow}\r\n          onHide={gridhandleClose}\r\n          size=\"xl\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>{gridname} Grid Property</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <form\r\n              \r\n              autocomplete=\"off\"\r\n            >\r\n              <div className=\"row\">\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                    <input {...register(\"cbAddRow\")} type=\"checkbox\" /> &nbsp;\r\n                    <label htmlFor=\"cbAddRow\" className=\"form-label\">\r\n                      Add Row\r\n                    </label>\r\n                    <p>{errors.cbAddRow?.message}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                    <input {...register(\"cbCheckBox\")} type=\"checkbox\" /> &nbsp;\r\n                    <label htmlFor=\"cbCheckBox\" className=\"form-label\">\r\n                      Check Box\r\n                    </label>\r\n                    <p>{errors.cbCheckBox?.message}</p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                    <input {...register(\"cbFilters\")} type=\"checkbox\" /> &nbsp;\r\n                    <label htmlFor=\"cbFilters\" className=\"form-label\">\r\n                      Filters\r\n                    </label>\r\n                    <p>{errors.cbFilters?.message}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                    <input {...register(\"cbMngBtn\")} type=\"checkbox\" /> &nbsp;\r\n                    <label htmlFor=\"cbMngBtn\" className=\"form-label\">\r\n                      Mng Button\r\n                    </label>\r\n                    <p>{errors.cbMngBtn?.message}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <table  id=\"tblgridprop\" className=\"table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Method</th>\r\n                      <th>ToolTip</th>\r\n                      <th>Icon</th>\r\n                      <th>CSS</th>\r\n                      <th>Style</th>\r\n                      <th>Condition</th>\r\n                      <th>\r\n                        <button type=\"button\"\r\n                          className=\"btn btn-outline-success\"\r\n                          onClick={() => addTableRows()}\r\n                        >\r\n                          +\r\n                        </button>\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <TableRows\r\n                      rowsData={rowsData}\r\n                      deleteTableRows={deleteTableRows}\r\n                      handleChange={handleChange}\r\n                    />\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <div className=\"col-sm-4\"></div>\r\n\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={gridhandleClose}>\r\n                  Close\r\n                </Button>\r\n                <Button type=\"submit\"  onClick= {handleSubmit(onGridModalSubmitHandler)} variant=\"secondary\">\r\n                  Update \r\n                </Button>\r\n              </Modal.Footer>\r\n            </form>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nexport default StageElementMapping;\r\n","function TableRows({rowsData, deleteTableRows, handleChange}) {\r\n\r\n\r\n    return(\r\n        \r\n        rowsData.map((data, index)=>{\r\n            const {Method, ToolTip, Icon,CSS,Style,Condition}= data;\r\n            return(\r\n\r\n                <tr key={index}>\r\n                <td>  <input type=\"text\" value={Method} onChange={(evnt)=>(handleChange(index, evnt))} name=\"Method\" className=\"form-control\"/> </td>\r\n                <td><input type=\"text\" value={ToolTip}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"ToolTip\" className=\"form-control\"/> </td>\r\n                <td><input type=\"text\" value={Icon}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"Icon\" className=\"form-control\" /> </td>\r\n                <td>  <input type=\"text\" value={CSS} onChange={(evnt)=>(handleChange(index, evnt))} name=\"CSS\" className=\"form-control\"/> </td>\r\n                <td><input type=\"text\" value={Style}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"Style\" className=\"form-control\"/> </td>\r\n                <td><input type=\"text\" value={Condition}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"Condition\" className=\"form-control\" /> </td>\r\n                <td><button className=\"btn btn-outline-danger\" onClick={()=>(deleteTableRows(index))}>x</button></td>\r\n            </tr>\r\n\r\n            )\r\n        })\r\n   \r\n    )\r\n    \r\n}\r\n\r\nexport default TableRows;","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetStgScrElements = async (screenid) => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst FetchStgScrElements = apiendpoints.FetchStgScrElements;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"StageElementlist\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {scrid:screenid}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const url = FetchStgScrElements;\r\n\r\n console.log(reqHdr);\r\n\r\n await api.post(url, compressBase64(data)).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n\r\n    console.log(strResponse);\r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n\r\n\r\n\r\n\r\nexport const GetStgEleCmb = async (screenid,StgId) => {\r\n\r\n\r\n   let Response;\r\n   \r\n   \r\n   \r\n   const StgElmCmb = apiendpoints.StgElmCmb;\r\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n   //  /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = { convid: convID, tag: \"StgElmCmb\", orgid: \"\", vendid: \"0\" };\r\n    const frmData = {cmbScrId:screenid,cmbStgId:StgId}\r\n    const data = { hdr: frmHdr, body: frmData };\r\n   \r\n   \r\n    const token =    localStorage.getItem('token');\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n   \r\n    const url = StgElmCmb;\r\n   \r\n    console.log(reqHdr);\r\n   \r\n    await api.post(url, compressBase64(data)).then(function (response) {\r\n       const strResponse = JSON.parse(decompressBase64(response.data));      \r\n   \r\n       console.log(strResponse);\r\n          Response = strResponse ;\r\n   \r\n     })\r\n   \r\n     return  Response;\r\n   \r\n   };\r\n\r\n\r\n   export const GetEvntExGrpMap = async (screenid,StgId,StgElmDsigId,EvntId) => {\r\n\r\n\r\n      let Response;\r\n      \r\n      const ExGrpmap = apiendpoints.ExGrpmap;\r\n       const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n      //  /* Header */\r\n       const convID = generateUUID();\r\n       const frmHdr = { convid: convID, tag: \"StgElmCmb\", orgid: \"\", vendid: \"0\" };\r\n       const frmData = {cmbScrId:screenid,cmbStgId:StgId,cmbStgElmDsigId:StgElmDsigId,cmbEvntId:EvntId}\r\n       const data = { hdr: frmHdr, body: frmData };\r\n      \r\n       console.log(frmData);\r\n       \r\n      \r\n       const token =    localStorage.getItem('token');\r\n       const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n      \r\n       const url = ExGrpmap; \r\n      \r\n       await api.post(url, compressBase64(data)).then(function (response) {\r\n          const strResponse = JSON.parse(decompressBase64(response.data));      \r\n      \r\n          console.log(strResponse);\r\n             Response = strResponse ;\r\n      \r\n        })\r\n      \r\n        return  Response;\r\n      \r\n      };\r\n   \r\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllScreenList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllScreen = apiendpoints.AllScreen;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllScreen\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllScreen;\r\n\r\n console.log(combonurl); \r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllStageList = async (screenid) => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllStage = apiendpoints.AllStage;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllStage\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {txtScreenId:screenid}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllStage;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n\r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n","import { generateUUID, compressBase64, decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nexport const GetElementList = async (screenid, stageid) => {\r\n\r\n\r\n   let Response;\r\n\r\n\r\n\r\n   const ElementList = apiendpoints.Elementlist;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Elementlist\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { scrid: screenid, stgid: stageid };\r\n   const data = { hdr: frmHdr, body: frmData };\r\n\r\n   const reqHdr = {};\r\n\r\n   const url = ElementList;\r\n   await api.post(url, compressBase64(data), reqHdr).then(function (response) {\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n      Response = strResponse;\r\n\r\n   })\r\n\r\n   return Response;\r\n\r\n};\r\n\r\nexport const GetElementDefValue = async (screenid, elmid) => {\r\n\r\n   let Response;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Element default value\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { scrid: screenid, txtElementId: elmid };\r\n   const data = { hdr: frmHdr, body: frmData };\r\n\r\n   console.log(frmData);\r\n   \r\n   const reqHdr = {};\r\n  \r\n   await api.post( apiendpoints.ElementDefaultValue, compressBase64(data), reqHdr).then(function (response) {\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n      Response = strResponse;\r\n\r\n   })\r\n\r\n   return Response;\r\n\r\n};\r\n"],"names":["apiendpoints","appsettings","schema","yup","shape","StageElementMapping","show","setShow","useState","handleClose","handleShow","gridshow","setgridShow","gridhandleClose","gridhandleShow","gridname","setgridname","selectedFile","setSelectedFile","Elementresbody","setElementlistresbody","StageElementresbody","setStageElementlistresbody","stageresbody","setstagelistresbody","isLoading","setLoanding","Screenid","setScreenid","Stageid","setStageid","IsCustomScr","setIsCustomScr","screenfilterlist","setscreenfilterlist","stagefilterlist","setstagefilterlist","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","ref","useRef","filereset","current","value","FetchAllScreenList","async","ScreenListResponse","GetAllScreenList","body","Screens","filter","res","IsActive","FetchStageElementList","ElementListResponse","GetStgScrElements","screenid","elements","FetchElementList","GetElementList","FetchAllStageList","StageListResponse","GetAllStageList","cmbctlres","setctlres","cmbdttyres","setdttyres","LoadCombo","Response","FetchCombodata","ctl","dtty","useEffect","Stagereset","handleFileChange","event","target","files","length","ScreenOnChange","e","StageOnChange","id","filteredElement","StageId","sort","console","log","OnMainSubmitHandler","preventDefault","fileCtrl","filePath","fExt","allowedExtns","replace","eval","exec","toast","error","MAX_FILE_SIZE","fileSizeKiloBytes","size","convID","generateUUID","frmHdr","convid","tag","orgid","vendid","scrdet","formData","FormData","append","JSON","stringify","token","localStorage","getItem","url","UpldStageElements","response","api","post","strResponse","parse","decompressBase64","data","hdr","rst","ShowAlert","fdr","rstmsg","success","setTimeout","err","message","onModalSubmitHandler","frmData","txtStgElmDesignId","scrid","txtStageId","txtElementName","txtOrdNo","txtWrap","txtCssClass","cbIsMandatory","cbIsReadOnly","reqHdr","headers","Authorization","reqdata","UpdStageElements","compressBase64","onGridModalSubmitHandler","tbljson","tableToJson","document","getElementById","txtElementId","cbAddRow","cbCheckBox","cbFilters","cbMngBtn","txtMngLinks","Updgrdprop","ReSetGridProperty","table","i","rows","cells","innerHTML","toLowerCase","indexOf","tableRow","rowData","j","fetchstringinputboxvalue","push","str","substr","trimEnd","SetScreenValue","rowval","ElmName","OrdNo","Wrap","CssClass","IsMandatory","IsReadOnly","StgElmDesignId","SetGridProperty","ElementId","GrdProp","addrow","ckbx","fltrs","mngbtn","setRowsData","mnglnk","AddNewElement","DeleteScreenValue","stgelmids","DeleteStageElement","ResetScreenValue","CheckboxhandleChange","rowsData","addTableRows","Method","ToolTip","Icon","CSS","Style","Condition","deleteTableRows","index","splice","handleChange","evnt","name","rowsInput","alertType","_errors$scrid","_errors$scrid2","_errors$cmbControlTyp","_errors$txtOrdNo","_errors$txtWrap","_errors$txtCssClass","_errors$cbIsMandatory","_errors$cbIsReadOnly","_errors$cbAddRow","_errors$cbCheckBox","_errors$cbFilters","_errors$cbMngBtn","_jsxs","_Fragment","children","_jsx","className","style","borderRadius","Spinner","Alerts","alert","onSubmit","autocomplete","htmlFor","onChange","map","ScreenId","ScrName","type","StageName","Scrollbar","height","Table","striped","bordered","hover","onClick","x","Modal","onHide","centered","Header","closeButton","Title","Body","cmbControlType","hidden","Footer","Button","variant","TableRows","_ref","FetchStgScrElements","then","GetStgEleCmb","StgId","StgElmCmb","cmbScrId","cmbStgId","GetEvntExGrpMap","StgElmDsigId","EvntId","ExGrpmap","cmbStgElmDsigId","cmbEvntId","AllScreen","combonurl","AllStage","txtScreenId","stageid","ElementList","Elementlist","stgid","GetElementDefValue","elmid","ElementDefaultValue"],"sourceRoot":""}