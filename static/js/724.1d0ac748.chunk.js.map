{"version":3,"file":"static/js/724.1d0ac748.chunk.js","mappings":"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","sources":["components/dynamicscreendefinition/ElementMasterList.js","components/dynamicscreendefinition/ElementMaster.js","components/utilities/getelementlist.js"],"sourcesContent":["\r\nfunction ElementMasterList({ elmList, setElementValue, delElement }) {\r\n\r\n    return (\r\n\r\n        elmList.map((data, index) => {\r\n\r\n            const {\r\n                ElmName, ControlType, DataType, Caption, ParentElmName, MaxLength,\r\n                RangeFrom, RangeTo, SizeInKB, FileExt, IsFrmGrid, ElementId, ControlId, DataTypeId,\r\n                ParentElementId, ParentControlId, CmbCod, CmbCon, ConStr, \r\n            } = data;\r\n\r\n            let Prop = \"\";\r\n            if (ControlId == 3) {\r\n                Prop = CmbCod + ' | ' + (ConStr != null ? ConStr : '') + ' | ' + (CmbCon != null ? CmbCon : '');\r\n            } \r\n            else if (ControlId == 2) {\r\n                Prop = (RangeFrom != null ? RangeFrom : '') + ' - ' + (RangeTo != null ? RangeTo : '');\r\n            }\r\n            else if (ControlId == 9) {\r\n                Prop = (SizeInKB != null ? SizeInKB+'kb' : '') + ' - ' + (FileExt != null ? FileExt : '');\r\n            }\r\n            else if (ControlId == 10) {\r\n                Prop = (IsFrmGrid ? 'From Grid' : '') ;\r\n            }\r\n\r\n\r\n            return (\r\n                <tr key={index}>\r\n                    <td>{ElementId}</td>\r\n                    <td> <button onClick={() => (setElementValue(data))} class=\"btn btn-link\">{ElmName}</button>  </td>\r\n                    <td>{ParentElmName}</td>\r\n                    <td>{ControlType}/{DataType}</td>\r\n                    <td>{MaxLength}</td>\r\n                    <td>{Prop}</td>\r\n                    <td>\r\n                        <button onClick={() => (delElement(ElementId))} class=\"btn btn-light clr-gray\"><i class=\"fa fa-trash-o\"></i></button>\r\n                    </td>\r\n                </tr>\r\n\r\n            )\r\n        })\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default ElementMasterList;","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from 'react-toastify';\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport { generateUUID, compressBase64, decompressBase64, } from \"../utilities/utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\nimport { GetElementList, GetElementDefValue } from \"../utilities/getelementlist\";\r\nimport ElementMasterList from \"./ElementMasterList\";\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nconst schema = yup.object().shape({\r\n  txtElementName: yup.string().required(\"Pls provide element name\"),\r\n  txtCaption: yup.string().required(\"Pls provide caption \"),\r\n  cmbControlType: yup.string().required(\"Pls select control type\"),\r\n  cmbDataType: yup.string().required(\"Pls select data type\")\r\n});\r\n\r\n\r\n/* Main method */\r\nfunction ElementMaster({ ScrId }) {\r\n\r\n  const [ctlTypes, setCtlRes] = useState([]);\r\n  const [dataTypes, setDtTyRes] = useState([]);\r\n  const [cmbConnStrs, setCmbConStrRes] = useState([]);\r\n  const [elementList, setElementList] = useState([]);\r\n  const [elementDefaultValue, setElementDefaultValue] = useState([]);\r\n  const [alert, setAlert] = useState(\"\");\r\n  const [isLoading, setLoanding] = useState(false);\r\n\r\n  const { register, handleSubmit, formState: { errors }, reset, getValues } = useForm({ resolver: yupResolver(schema) });\r\n\r\n  const LoadCombo = async () => {\r\n    const opt = \"|CTL|DTTY|CTBL|\";\r\n    const optw = \"\";\r\n    const Response = await FetchCombodata(opt, optw);\r\n    setCtlRes(Response.body.ctl);\r\n    setDtTyRes(Response.body.dtty);\r\n    setCmbConStrRes(Response.body.ctbl);\r\n  };\r\n\r\n\r\n  const FetchElementList = async (ScrId) => {\r\n    const ElementLis = await GetElementList(ScrId);\r\n    setElementList(ElementLis.body.elements);\r\n  };\r\n\r\n  const FetchElementDefaultValue = async (ScrId, ElmId) => {\r\n    const response = await GetElementDefValue(ScrId, ElmId);\r\n    setElementDefaultValue(response.body.defaultvalue);\r\n  };\r\n\r\n  useEffect(() => { LoadCombo(); }, []);\r\n  useEffect(() => { FetchElementList(ScrId); }, []);\r\n\r\n  const onChngCtlType = (e) => {\r\n    let ctrlId = e.target.value;\r\n    //  setVisisble(ctrlId);\r\n\r\n    if (ctrlId != 'File') {\r\n      reset({ txtSizeInKB: \"\", txtFileExt: \"\" })\r\n    }\r\n\r\n    if (ctrlId != 'ComboBox') {\r\n      reset({ txtCmbCode: \"\", txtCmbCon: \"\", cmbDbShortName: \"0\" })\r\n    }\r\n\r\n    if (ctrlId != 'NumericBox') {\r\n      reset({ txtRangeFrom: \"\", txtRangeTo: \"\" })\r\n    }\r\n\r\n  }\r\n\r\n  const setVisisble = (ctrlId) => {\r\n\r\n    var divCmbConfig = document.getElementById(\"divCmbConfig\");\r\n    var divRange = document.getElementById(\"divRange\");\r\n    var divFile = document.getElementById(\"divFile\");\r\n\r\n    if (ctrlId == 'ComboBox') {\r\n      divCmbConfig.style.display = \"block\";\r\n    } else {\r\n      divCmbConfig.style.display = \"none\";\r\n    }\r\n\r\n    if (ctrlId == 'NumericBox') {\r\n      divRange.style.display = \"block\";\r\n    } else {\r\n      divRange.style.display = \"none\";\r\n    }\r\n\r\n    if (ctrlId == 'File') {\r\n      divFile.style.display = \"block\";\r\n    } else {\r\n      divFile.style.display = \"none\";\r\n    }\r\n\r\n  };\r\n\r\n  const resetValue = () => {\r\n    reset({\r\n      txtElementId: \"\", txtElementName: \"\", cmbControlType: \"0\", cmbDataType: \"0\",\r\n      txtCaption: \"\", txtParentElement: \"0\", txtMaxLength: \"\", txtRangeFrom: \"\", cbIsFrmGrid:false,\r\n      txtSizeInKB: \"\", txtFileExt: \"\", txtRangeTo: \"\", txtCmbCode: \"\", txtCmbCon: \"\", cmbDbShortName: \"0\",\r\n      txtDefaultValue: \"\"\r\n    });\r\n\r\n  }\r\n\r\n  function setElementValue(data) {\r\n\r\n    FetchElementDefaultValue(ScrId, data.ElementId);\r\n\r\n    reset({\r\n      txtElementId: data.ElementId, txtElementName: data.ElmName, cmbControlType: data.ControlType,\r\n      cmbDataType: data.DataType, txtCaption: data.Caption, txtParentElement: data.ParentElmName,\r\n      txtMaxLength: data.MaxLength, txtRangeFrom: data.RangeFrom, txtRangeTo: data.RangeTo, cbIsFrmGrid: data.IsFrmGrid,\r\n      txtSizeInKB: data.SizeInKB, txtFileExt: data.FileExt, txtCmbCode: data.CmbCod, txtCmbCon: data.CmbCon,\r\n      cmbDbShortName: data.ConStr, txtDefaultValue: elementDefaultValue\r\n    });\r\n\r\n\r\n\r\n    // setTimeout(() => {\r\n    // setVisisble(data.ControlType);}, 100);\r\n  }\r\n\r\n  /* Calling Use Effect to wait set the default value immediately */ \r\n  useEffect(() => {\r\n    reset({\r\n      txtDefaultValue: elementDefaultValue\r\n    });\r\n\r\n  }, [elementDefaultValue])\r\n\r\n\r\n  const delElement = async (ElementId) => {\r\n\r\n    if (window.confirm(\"Are you sure, do you want delete this element ?\")) {\r\n\r\n      let frmData = {\r\n        scrid: ScrId,\r\n        txtElementId: ElementId\r\n      };\r\n\r\n      const DelElmMaster = apiendpoints.DeleteElement;\r\n\r\n      /* Header */\r\n      const convID = generateUUID();\r\n      const frmHdr = {\r\n        convid: convID,\r\n        tag: \"Delete Element\",\r\n        orgid: \"\",\r\n        vendid: \"0\",\r\n      };\r\n\r\n      const reqHdr = {};\r\n      const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n      try {\r\n\r\n        const response = await api.post(\r\n          DelElmMaster,\r\n          compressBase64(reqdata),\r\n          reqHdr\r\n        );\r\n\r\n        const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n        if (strResponse.hdr.rst == \"SUCCESS\") {\r\n          setTimeout(() => {\r\n            setAlert({ AlertType: \"Success\", message: \"Successfully updated\" });\r\n            toast.success(\"Successfully updated\");\r\n            setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n            resetValue();\r\n            FetchElementList(ScrId);\r\n            setLoanding(false);\r\n          }, 300);\r\n        }\r\n        else {\r\n          let msg = JSON.stringify(strResponse.fdr[0].rstmsg)\r\n          setTimeout(() => {\r\n            setAlert({ AlertType: \"Error\", message: msg });\r\n            toast.error(msg);\r\n            setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n            setLoanding(false);\r\n          }, 300);\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        toast.error(\"Unable to process request\");\r\n        setAlert({ AlertType: \"Error\", message: \"Unable to process request\" });\r\n        setLoanding(false);\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  const onSubmitHandler = async (data) => {\r\n\r\n\r\n    var Caption = data.txtCaption;\r\n    if (data.txtCaption == null) {\r\n      Caption = \"\";\r\n    }\r\n\r\n    var ElementId = data.txtElementId;\r\n    if (data.txtElementId == null) {\r\n      ElementId = \"\";\r\n    }\r\n\r\n    var FileExt = data.txtFileExt;\r\n    if (data.txtFileExt == null) {\r\n      FileExt = \"\";\r\n    }\r\n\r\n    var MaxLength = data.txtMaxLength;\r\n    if (data.txtMaxLength == null) {\r\n      MaxLength = \"\";\r\n    }\r\n\r\n    var ParentElement = data.txtParentElement;\r\n    if (data.txtParentElement == null || data.txtParentElement == \"0\") {\r\n      ParentElement = \"\";\r\n    }\r\n\r\n    var RangeFrom = data.txtRangeFrom;\r\n    if (data.txtRangeFrom == null) {\r\n      RangeFrom = \"\";\r\n    }\r\n\r\n    var RangeTo = data.txtRangeTo;\r\n    if (data.txtRangeTo == null) {\r\n      RangeTo = \"\";\r\n    }\r\n\r\n    var SizeInKB = data.txtSizeInKB;\r\n    if (data.txtSizeInKB == null) {\r\n      SizeInKB = \"\";\r\n    }\r\n \r\n    var IsFrmGrid  = data.cbIsFrmGrid;\r\n    if (data.cbIsFrmGrid == null) {\r\n      IsFrmGrid = false;\r\n    }\r\n\r\n    let frmData = {\r\n      cmbControlType: data.cmbControlType,\r\n      cmbDataType: data.cmbDataType,\r\n      scrid: ScrId,\r\n      txtCaption: Caption,\r\n      txtElementId: getValues('txtElementId'), // ElementId,\r\n      txtElementName: data.txtElementName,\r\n      txtFileExt: FileExt,\r\n      txtMaxLength: MaxLength,\r\n      txtParentElement: ParentElement,\r\n      txtRangeFrom: RangeFrom,\r\n      txtRangeTo: RangeTo,\r\n      cbIsFrmGrid: IsFrmGrid,\r\n      txtSizeInKB: SizeInKB,\r\n      txtCmbCode: data.txtCmbCode,\r\n      txtCmbCon: data.txtCmbCon,\r\n      cmbDbShotName: data.cmbDbShortName,\r\n      txtDefaultValue: data.txtDefaultValue\r\n    };\r\n\r\n\r\n    \r\n\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"Update Element\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const reqHdr = {};\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n    const UpdateElement = apiendpoints.UpdateElement;\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        UpdateElement,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"SUCCESS\") {\r\n        setTimeout(() => {\r\n          setAlert({ AlertType: \"Success\", message: \"Successfully updated\" });\r\n          toast.success(\"Successfully updated\");\r\n          setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n          resetValue();\r\n          FetchElementList(ScrId);\r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n      else {\r\n        let msg = JSON.stringify(strResponse.fdr[0].rstmsg)\r\n        setTimeout(() => {\r\n          setAlert({ AlertType: \"Error\", message: msg });\r\n          toast.error(msg);\r\n          setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      setAlert({ AlertType: \"Error\", message: \"Unable to process request\" });\r\n      setLoanding(false);\r\n    }\r\n  }\r\n\r\n  try {\r\n    return (\r\n      <>\r\n\r\n        <div>\r\n          {isLoading ? <Spinner></Spinner> : \"\"}\r\n          <Alerts alert={alert} />\r\n        </div>\r\n\r\n\r\n        <div className=\"row\">\r\n\r\n          <div className=\"col-md-4\">\r\n\r\n            <form onSubmit={handleSubmit(onSubmitHandler)} autoComplete=\"off\" >\r\n\r\n              <div className=\"row\">\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"txtElementName\" className=\"form-label\">Element Name</label>\r\n                  <input {...register(\"txtElementName\")} type=\"text\" className=\"form-control\" />\r\n                  <p>{errors.txtElementName?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"txtCaption\" className=\"form-label\">Caption</label>\r\n                  <input {...register(\"txtCaption\")} type=\"text\" className=\"form-control\" />\r\n                  <p>{errors.txtCaption?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"cmbControlType\" className=\"form-label\">Control Type</label>\r\n                  <select {...register(\"cmbControlType\")} className=\"form-control\" onChange={onChngCtlType} >\r\n                    <option value=\"0\">- Select -</option>\r\n                    {\r\n                      ctlTypes.map((res) => (<option key={res.k} value={res.v}>{res.v}</option>))\r\n                    }\r\n                  </select>\r\n                  <p>{errors.cmbControlType?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"cmbDataType\" className=\"form-label\">Data Type</label>\r\n                  <select {...register(\"cmbDataType\")} className=\"form-control\" >\r\n                    <option value=\"0\">- Select -</option>\r\n                    {\r\n                      dataTypes.map((res) => (<option key={res.k} value={res.v}>{res.v}</option>))\r\n                    }\r\n                  </select>\r\n                  <p>{errors.cmbDataType?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-3\">\r\n                  <label htmlFor=\"txtMaxLength\" className=\"form-label\">Max Length</label>\r\n                  <input {...register(\"txtMaxLength\")} type=\"text\" className=\"form-control\" />\r\n                  <p>{errors.txtMaxLength?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 pad-top-2-5em\">\r\n                  <input {...register(\"cbIsFrmGrid\")} type=\"checkbox\" />\r\n                  &nbsp;&nbsp;<label htmlFor=\"cbIsFrmGrid\" className=\"form-label\">Form Grid</label>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"txtParentElement\" className=\"form-label\">Parent Element</label>\r\n                  <select {...register(\"txtParentElement\")} type=\"text\" className=\"form-control\" >\r\n                    <option value=\"0\">- Select -</option>\r\n                    {\r\n                      elementList.map((res) => (<option key={res.ElementId} value={res.ElmName}>{res.ElmName}</option>))\r\n                    }\r\n                  </select>\r\n                </div>\r\n\r\n                <div id=\"divRange\" className=\"dispNone1\">\r\n                  <div className=\"row\">\r\n\r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtRangeFrom\" className=\"form-label\">Range From</label>\r\n                      <input {...register(\"txtRangeFrom\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtRangeTo\" className=\"form-label\">Range To</label>\r\n                      <input {...register(\"txtRangeTo\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div id=\"divFile\" className=\"dispNone1\">\r\n\r\n                  <div className=\"row\">\r\n                    \r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtSizeInKB\" className=\"form-label\">Size(KB)</label>\r\n                      <input {...register(\"txtSizeInKB\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                   <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtFileExt\" className=\"form-label\">File Ext.</label>\r\n                      <input {...register(\"txtFileExt\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div id=\"divCmbConfig\" className=\"dispNone1\">\r\n                  <div className=\"row\">\r\n                    \r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtCmbCode\" className=\"form-label\">Combo Code</label>\r\n                      <input {...register(\"txtCmbCode\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"cmbDbShortName\" className=\"form-label\">Combo Db Connection</label>\r\n                      <select {...register(\"cmbDbShortName\")} className=\"form-control\" >\r\n                        <option value=\"0\">-select-</option>\r\n                        {\r\n                          cmbConnStrs.map((res) => (<option key={res.v} value={res.k}>{res.k}</option>))\r\n                        }\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\">\r\n                      <label htmlFor=\"txtCmbCon\" className=\"form-label\">Combo condition / Query</label>\r\n                      <input {...register(\"txtCmbCon\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\">\r\n                      <label htmlFor=\"txtDefaultValue\" className=\"form-label\">Default Value</label>\r\n                      <input {...register(\"txtDefaultValue\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"row pad-top-15\">\r\n\r\n                  <div className=\"col-md-3\">\r\n                    <button type=\"submit\" className=\"btn btn-success\">\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n\r\n                  <div className=\"col-md-3\">\r\n                    <button type=\"button\" className=\"btn btn-warning\" onClick={resetValue}>\r\n                      Reset\r\n                    </button>\r\n                  </div>\r\n\r\n                  <div className=\"col-md-6\">\r\n                    <input {...register(\"txtElementId\")} type=\"text\" className=\"form-control\"  readonly=\"readonly\" />\r\n                  </div>\r\n\r\n\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </form>\r\n\r\n          </div>\r\n\r\n          <div className=\"col-md-8\">\r\n\r\n            <table className=\"lst-grid\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Id</th>\r\n                  <th>Name / Caption</th>\r\n                  <th>Parent</th>\r\n                  <th>Ctl / Data</th>\r\n                  <th>Length</th>\r\n                  <th>Property</th>\r\n                  <th>Manage</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <ElementMasterList elmList={elementList} setElementValue={setElementValue} delElement={delElement} />\r\n              </tbody>\r\n            </table>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nexport default ElementMaster;","import { generateUUID, compressBase64, decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nexport const GetElementList = async (screenid, stageid) => {\r\n\r\n\r\n   let Response;\r\n\r\n\r\n\r\n   const ElementList = apiendpoints.Elementlist;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Elementlist\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { scrid: screenid, stgid: stageid };\r\n   const data = { hdr: frmHdr, body: frmData };\r\n\r\n   const reqHdr = {};\r\n\r\n   const url = ElementList;\r\n   await api.post(url, compressBase64(data), reqHdr).then(function (response) {\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n      Response = strResponse;\r\n\r\n   })\r\n\r\n   return Response;\r\n\r\n};\r\n\r\nexport const GetElementDefValue = async (screenid, elmid) => {\r\n\r\n   let Response;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Element default value\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { scrid: screenid, txtElementId: elmid };\r\n   const data = { hdr: frmHdr, body: frmData };\r\n\r\n   console.log(frmData);\r\n   \r\n   const reqHdr = {};\r\n  \r\n   await api.post( apiendpoints.ElementDefaultValue, compressBase64(data), reqHdr).then(function (response) {\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n      Response = strResponse;\r\n\r\n   })\r\n\r\n   return Response;\r\n\r\n};\r\n"],"names":["_ref","elmList","setElementValue","delElement","map","data","index","ElmName","ControlType","DataType","Caption","ParentElmName","MaxLength","RangeFrom","RangeTo","SizeInKB","FileExt","IsFrmGrid","ElementId","ControlId","DataTypeId","ParentElementId","ParentControlId","CmbCod","CmbCon","ConStr","Prop","_jsxs","children","_jsx","onClick","class","apiendpoints","appsettings","schema","yup","shape","txtElementName","required","txtCaption","cmbControlType","cmbDataType","ScrId","ctlTypes","setCtlRes","useState","dataTypes","setDtTyRes","cmbConnStrs","setCmbConStrRes","elementList","setElementList","elementDefaultValue","setElementDefaultValue","alert","setAlert","isLoading","setLoanding","register","handleSubmit","formState","errors","reset","getValues","useForm","resolver","yupResolver","FetchElementList","async","ElementLis","GetElementList","body","elements","useEffect","Response","FetchCombodata","ctl","dtty","ctbl","LoadCombo","onChngCtlType","e","ctrlId","target","value","txtSizeInKB","txtFileExt","txtCmbCode","txtCmbCon","cmbDbShortName","txtRangeFrom","txtRangeTo","resetValue","txtElementId","txtParentElement","txtMaxLength","cbIsFrmGrid","txtDefaultValue","window","confirm","frmData","scrid","DelElmMaster","DeleteElement","reqHdr","reqdata","hdr","convid","generateUUID","tag","orgid","vendid","response","api","post","compressBase64","strResponse","JSON","parse","decompressBase64","rst","setTimeout","AlertType","message","toast","success","msg","stringify","fdr","rstmsg","error","err","console","log","onSubmitHandler","ParentElement","cmbDbShotName","UpdateElement","_errors$txtElementNam","_errors$txtCaption","_errors$cmbControlTyp","_errors$cmbDataType","_errors$txtMaxLength","_Fragment","Spinner","Alerts","className","onSubmit","autoComplete","htmlFor","type","onChange","res","v","k","id","readonly","ElementMasterList","ElmId","GetElementDefValue","defaultvalue","FetchElementDefaultValue","screenid","stageid","ElementList","Elementlist","stgid","url","then","elmid","ElementDefaultValue"],"sourceRoot":""}