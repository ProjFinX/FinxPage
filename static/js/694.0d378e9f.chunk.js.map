{"version":3,"file":"static/js/694.0d378e9f.chunk.js","mappings":"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","sources":["components/dynamicscreendefinition/ElementMasterList.js","components/dynamicscreendefinition/ElementMaster.js","components/dynamicscreendefinition/EvntExprGroupMap.js","components/dynamicscreendefinition/ClientEvents.js","components/dynamicscreendefinition/ScreenDefiner.js","components/dynamicscreendefinition/StageMasterList.js","components/dynamicscreendefinition/StageMaster.js","components/dynamicscreendefinition/TaskElements.js","components/utilities/GetStgEvents.js","components/utilities/getallscreen.js"],"sourcesContent":["\r\nfunction ElementMasterList({ elmList, setElementValue, delElement }) {\r\n\r\n    return (\r\n\r\n        elmList.map((data, index) => {\r\n\r\n            const {\r\n                ElmName, ControlType, DataType, Caption, ParentElmName, MaxLength,\r\n                RangeFrom, RangeTo, SizeInKB, FileExt, IsFrmGrid, ElementId, ControlId, DataTypeId,\r\n                ParentElementId, ParentControlId, CmbCod, CmbCon, ConStr, \r\n            } = data;\r\n\r\n            let Prop = \"\";\r\n            if (ControlId == 3) {\r\n                Prop = CmbCod + ' | ' + (ConStr != null ? ConStr : '') + ' | ' + (CmbCon != null ? CmbCon : '');\r\n            } \r\n            else if (ControlId == 2) {\r\n                Prop = (RangeFrom != null ? RangeFrom : '') + ' - ' + (RangeTo != null ? RangeTo : '');\r\n            }\r\n            else if (ControlId == 9) {\r\n                Prop = (SizeInKB != null ? SizeInKB+'kb' : '') + ' - ' + (FileExt != null ? FileExt : '');\r\n            }\r\n            else if (ControlId == 10) {\r\n                Prop = (IsFrmGrid ? 'From Grid' : '') ;\r\n            }\r\n\r\n\r\n            return (\r\n                <tr key={index}>\r\n                    <td>{ElementId}</td>\r\n                    <td> <button onClick={() => (setElementValue(data))} class=\"btn btn-link\">{ElmName}</button>  </td>\r\n                    <td>{ParentElmName}</td>\r\n                    <td>{ControlType}/{DataType}</td>\r\n                    <td>{MaxLength}</td>\r\n                    <td>{Prop}</td>\r\n                    <td>\r\n                        <button onClick={() => (delElement(ElementId))} class=\"btn btn-light clr-gray\"><i class=\"fa fa-trash-o\"></i></button>\r\n                    </td>\r\n                </tr>\r\n\r\n            )\r\n        })\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default ElementMasterList;","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from 'react-toastify';\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport { generateUUID, compressBase64, decompressBase64, } from \"../utilities/utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\nimport { GetElementList, GetElementDefValue } from \"../utilities/getelementlist\";\r\nimport ElementMasterList from \"./ElementMasterList\";\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nconst schema = yup.object().shape({\r\n  txtElementName: yup.string().required(\"Pls provide element name\"),\r\n  txtCaption: yup.string().required(\"Pls provide caption \"),\r\n  cmbControlType: yup.string().required(\"Pls select control type\"),\r\n  cmbDataType: yup.string().required(\"Pls select data type\")\r\n});\r\n\r\n\r\n/* Main method */\r\nfunction ElementMaster({ ScrId }) {\r\n\r\n  const [ctlTypes, setCtlRes] = useState([]);\r\n  const [dataTypes, setDtTyRes] = useState([]);\r\n  const [cmbConnStrs, setCmbConStrRes] = useState([]);\r\n  const [elementList, setElementList] = useState([]);\r\n  const [elementDefaultValue, setElementDefaultValue] = useState([]);\r\n  const [alert, setAlert] = useState(\"\");\r\n  const [isLoading, setLoanding] = useState(false);\r\n\r\n  const { register, handleSubmit, formState: { errors }, reset, getValues } = useForm({ resolver: yupResolver(schema) });\r\n\r\n  const LoadCombo = async () => {\r\n    const opt = \"|CTL|DTTY|CTBL|\";\r\n    const optw = \"\";\r\n    const Response = await FetchCombodata(opt, optw);\r\n    setCtlRes(Response.body.ctl);\r\n    setDtTyRes(Response.body.dtty);\r\n    setCmbConStrRes(Response.body.ctbl);\r\n  };\r\n\r\n\r\n  const FetchElementList = async (ScrId) => {\r\n    const ElementLis = await GetElementList(ScrId);\r\n    setElementList(ElementLis.body.elements);\r\n  };\r\n\r\n  const FetchElementDefaultValue = async (ScrId, ElmId) => {\r\n    const response = await GetElementDefValue(ScrId, ElmId);\r\n    setElementDefaultValue(response.body.defaultvalue);\r\n  };\r\n\r\n  useEffect(() => { LoadCombo(); }, []);\r\n  useEffect(() => { FetchElementList(ScrId); }, []);\r\n\r\n  const onChngCtlType = (e) => {\r\n    let ctrlId = e.target.value;\r\n    //  setVisisble(ctrlId);\r\n\r\n    if (ctrlId != 'File') {\r\n      reset({ txtSizeInKB: \"\", txtFileExt: \"\" })\r\n    }\r\n\r\n    if (ctrlId != 'ComboBox') {\r\n      reset({ txtCmbCode: \"\", txtCmbCon: \"\", cmbDbShortName: \"0\" })\r\n    }\r\n\r\n    if (ctrlId != 'NumericBox') {\r\n      reset({ txtRangeFrom: \"\", txtRangeTo: \"\" })\r\n    }\r\n\r\n  }\r\n\r\n  const setVisisble = (ctrlId) => {\r\n\r\n    var divCmbConfig = document.getElementById(\"divCmbConfig\");\r\n    var divRange = document.getElementById(\"divRange\");\r\n    var divFile = document.getElementById(\"divFile\");\r\n\r\n    if (ctrlId == 'ComboBox') {\r\n      divCmbConfig.style.display = \"block\";\r\n    } else {\r\n      divCmbConfig.style.display = \"none\";\r\n    }\r\n\r\n    if (ctrlId == 'NumericBox') {\r\n      divRange.style.display = \"block\";\r\n    } else {\r\n      divRange.style.display = \"none\";\r\n    }\r\n\r\n    if (ctrlId == 'File') {\r\n      divFile.style.display = \"block\";\r\n    } else {\r\n      divFile.style.display = \"none\";\r\n    }\r\n\r\n  };\r\n\r\n  const resetValue = () => {\r\n    reset({\r\n      txtElementId: \"\", txtElementName: \"\", cmbControlType: \"0\", cmbDataType: \"0\",\r\n      txtCaption: \"\", txtParentElement: \"0\", txtMaxLength: \"\", txtRangeFrom: \"\", cbIsFrmGrid:false,\r\n      txtSizeInKB: \"\", txtFileExt: \"\", txtRangeTo: \"\", txtCmbCode: \"\", txtCmbCon: \"\", cmbDbShortName: \"0\",\r\n      txtDefaultValue: \"\"\r\n    });\r\n\r\n  }\r\n\r\n  function setElementValue(data) {\r\n\r\n    FetchElementDefaultValue(ScrId, data.ElementId);\r\n\r\n    reset({\r\n      txtElementId: data.ElementId, txtElementName: data.ElmName, cmbControlType: data.ControlType,\r\n      cmbDataType: data.DataType, txtCaption: data.Caption, txtParentElement: data.ParentElmName,\r\n      txtMaxLength: data.MaxLength, txtRangeFrom: data.RangeFrom, txtRangeTo: data.RangeTo, cbIsFrmGrid: data.IsFrmGrid,\r\n      txtSizeInKB: data.SizeInKB, txtFileExt: data.FileExt, txtCmbCode: data.CmbCod, txtCmbCon: data.CmbCon,\r\n      cmbDbShortName: data.ConStr, txtDefaultValue: elementDefaultValue\r\n    });\r\n\r\n\r\n\r\n    // setTimeout(() => {\r\n    // setVisisble(data.ControlType);}, 100);\r\n  }\r\n\r\n  /* Calling Use Effect to wait set the default value immediately */ \r\n  useEffect(() => {\r\n    reset({\r\n      txtDefaultValue: elementDefaultValue\r\n    });\r\n\r\n  }, [elementDefaultValue])\r\n\r\n\r\n  const delElement = async (ElementId) => {\r\n\r\n    if (window.confirm(\"Are you sure, do you want delete this element ?\")) {\r\n\r\n      let frmData = {\r\n        scrid: ScrId,\r\n        txtElementId: ElementId\r\n      };\r\n\r\n      const DelElmMaster = apiendpoints.DeleteElement;\r\n\r\n      /* Header */\r\n      const convID = generateUUID();\r\n      const frmHdr = {\r\n        convid: convID,\r\n        tag: \"Delete Element\",\r\n        orgid: \"\",\r\n        vendid: \"0\",\r\n      };\r\n\r\n      const reqHdr = {};\r\n      const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n      try {\r\n\r\n        const response = await api.post(\r\n          DelElmMaster,\r\n          compressBase64(reqdata),\r\n          reqHdr\r\n        );\r\n\r\n        const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n        if (strResponse.hdr.rst == \"SUCCESS\") {\r\n          setTimeout(() => {\r\n            setAlert({ AlertType: \"Success\", message: \"Successfully updated\" });\r\n            toast.success(\"Successfully updated\");\r\n            setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n            resetValue();\r\n            FetchElementList(ScrId);\r\n            setLoanding(false);\r\n          }, 300);\r\n        }\r\n        else {\r\n          let msg = JSON.stringify(strResponse.fdr[0].rstmsg)\r\n          setTimeout(() => {\r\n            setAlert({ AlertType: \"Error\", message: msg });\r\n            toast.error(msg);\r\n            setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n            setLoanding(false);\r\n          }, 300);\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        toast.error(\"Unable to process request\");\r\n        setAlert({ AlertType: \"Error\", message: \"Unable to process request\" });\r\n        setLoanding(false);\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  const onSubmitHandler = async (data) => {\r\n\r\n\r\n    var Caption = data.txtCaption;\r\n    if (data.txtCaption == null) {\r\n      Caption = \"\";\r\n    }\r\n\r\n    var ElementId = data.txtElementId;\r\n    if (data.txtElementId == null) {\r\n      ElementId = \"\";\r\n    }\r\n\r\n    var FileExt = data.txtFileExt;\r\n    if (data.txtFileExt == null) {\r\n      FileExt = \"\";\r\n    }\r\n\r\n    var MaxLength = data.txtMaxLength;\r\n    if (data.txtMaxLength == null) {\r\n      MaxLength = \"\";\r\n    }\r\n\r\n    var ParentElement = data.txtParentElement;\r\n    if (data.txtParentElement == null || data.txtParentElement == \"0\") {\r\n      ParentElement = \"\";\r\n    }\r\n\r\n    var RangeFrom = data.txtRangeFrom;\r\n    if (data.txtRangeFrom == null) {\r\n      RangeFrom = \"\";\r\n    }\r\n\r\n    var RangeTo = data.txtRangeTo;\r\n    if (data.txtRangeTo == null) {\r\n      RangeTo = \"\";\r\n    }\r\n\r\n    var SizeInKB = data.txtSizeInKB;\r\n    if (data.txtSizeInKB == null) {\r\n      SizeInKB = \"\";\r\n    }\r\n \r\n    var IsFrmGrid  = data.cbIsFrmGrid;\r\n    if (data.cbIsFrmGrid == null) {\r\n      IsFrmGrid = false;\r\n    }\r\n\r\n    let frmData = {\r\n      cmbControlType: data.cmbControlType,\r\n      cmbDataType: data.cmbDataType,\r\n      scrid: ScrId,\r\n      txtCaption: Caption,\r\n      txtElementId: getValues('txtElementId'), // ElementId,\r\n      txtElementName: data.txtElementName,\r\n      txtFileExt: FileExt,\r\n      txtMaxLength: MaxLength,\r\n      txtParentElement: ParentElement,\r\n      txtRangeFrom: RangeFrom,\r\n      txtRangeTo: RangeTo,\r\n      cbIsFrmGrid: IsFrmGrid,\r\n      txtSizeInKB: SizeInKB,\r\n      txtCmbCode: data.txtCmbCode,\r\n      txtCmbCon: data.txtCmbCon,\r\n      cmbDbShotName: data.cmbDbShortName,\r\n      txtDefaultValue: data.txtDefaultValue\r\n    };\r\n\r\n\r\n    \r\n\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"Update Element\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const reqHdr = {};\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n    const UpdateElement = apiendpoints.UpdateElement;\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        UpdateElement,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"SUCCESS\") {\r\n        setTimeout(() => {\r\n          setAlert({ AlertType: \"Success\", message: \"Successfully updated\" });\r\n          toast.success(\"Successfully updated\");\r\n          setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n          resetValue();\r\n          FetchElementList(ScrId);\r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n      else {\r\n        let msg = JSON.stringify(strResponse.fdr[0].rstmsg)\r\n        setTimeout(() => {\r\n          setAlert({ AlertType: \"Error\", message: msg });\r\n          toast.error(msg);\r\n          setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      setAlert({ AlertType: \"Error\", message: \"Unable to process request\" });\r\n      setLoanding(false);\r\n    }\r\n  }\r\n\r\n  try {\r\n    return (\r\n      <>\r\n\r\n        <div>\r\n          {isLoading ? <Spinner></Spinner> : \"\"}\r\n          <Alerts alert={alert} />\r\n        </div>\r\n\r\n\r\n        <div className=\"row\">\r\n\r\n          <div className=\"col-md-4\">\r\n\r\n            <form onSubmit={handleSubmit(onSubmitHandler)} autoComplete=\"off\" >\r\n\r\n              <div className=\"row\">\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"txtElementName\" className=\"form-label\">Element Name</label>\r\n                  <input {...register(\"txtElementName\")} type=\"text\" className=\"form-control\" />\r\n                  <p>{errors.txtElementName?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"txtCaption\" className=\"form-label\">Caption</label>\r\n                  <input {...register(\"txtCaption\")} type=\"text\" className=\"form-control\" />\r\n                  <p>{errors.txtCaption?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"cmbControlType\" className=\"form-label\">Control Type</label>\r\n                  <select {...register(\"cmbControlType\")} className=\"form-control\" onChange={onChngCtlType} >\r\n                    <option value=\"0\">- Select -</option>\r\n                    {\r\n                      ctlTypes.map((res) => (<option key={res.k} value={res.v}>{res.v}</option>))\r\n                    }\r\n                  </select>\r\n                  <p>{errors.cmbControlType?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"cmbDataType\" className=\"form-label\">Data Type</label>\r\n                  <select {...register(\"cmbDataType\")} className=\"form-control\" >\r\n                    <option value=\"0\">- Select -</option>\r\n                    {\r\n                      dataTypes.map((res) => (<option key={res.k} value={res.v}>{res.v}</option>))\r\n                    }\r\n                  </select>\r\n                  <p>{errors.cmbDataType?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-3\">\r\n                  <label htmlFor=\"txtMaxLength\" className=\"form-label\">Max Length</label>\r\n                  <input {...register(\"txtMaxLength\")} type=\"text\" className=\"form-control\" />\r\n                  <p>{errors.txtMaxLength?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 pad-top-2-5em\">\r\n                  <input {...register(\"cbIsFrmGrid\")} type=\"checkbox\" />\r\n                  &nbsp;&nbsp;<label htmlFor=\"cbIsFrmGrid\" className=\"form-label\">Form Grid</label>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"txtParentElement\" className=\"form-label\">Parent Element</label>\r\n                  <select {...register(\"txtParentElement\")} type=\"text\" className=\"form-control\" >\r\n                    <option value=\"0\">- Select -</option>\r\n                    {\r\n                      elementList.map((res) => (<option key={res.ElementId} value={res.ElmName}>{res.ElmName}</option>))\r\n                    }\r\n                  </select>\r\n                </div>\r\n\r\n                <div id=\"divRange\" className=\"dispNone1\">\r\n                  <div className=\"row\">\r\n\r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtRangeFrom\" className=\"form-label\">Range From</label>\r\n                      <input {...register(\"txtRangeFrom\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtRangeTo\" className=\"form-label\">Range To</label>\r\n                      <input {...register(\"txtRangeTo\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div id=\"divFile\" className=\"dispNone1\">\r\n\r\n                  <div className=\"row\">\r\n                    \r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtSizeInKB\" className=\"form-label\">Size(KB)</label>\r\n                      <input {...register(\"txtSizeInKB\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                   <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtFileExt\" className=\"form-label\">File Ext.</label>\r\n                      <input {...register(\"txtFileExt\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div id=\"divCmbConfig\" className=\"dispNone1\">\r\n                  <div className=\"row\">\r\n                    \r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtCmbCode\" className=\"form-label\">Combo Code</label>\r\n                      <input {...register(\"txtCmbCode\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"cmbDbShortName\" className=\"form-label\">Combo Db Connection</label>\r\n                      <select {...register(\"cmbDbShortName\")} className=\"form-control\" >\r\n                        <option value=\"0\">-select-</option>\r\n                        {\r\n                          cmbConnStrs.map((res) => (<option key={res.v} value={res.k}>{res.k}</option>))\r\n                        }\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\">\r\n                      <label htmlFor=\"txtCmbCon\" className=\"form-label\">Combo condition / Query</label>\r\n                      <input {...register(\"txtCmbCon\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\">\r\n                      <label htmlFor=\"txtDefaultValue\" className=\"form-label\">Default Value</label>\r\n                      <input {...register(\"txtDefaultValue\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"row pad-top-15\">\r\n\r\n                  <div className=\"col-md-3\">\r\n                    <button type=\"submit\" className=\"btn btn-success\">\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n\r\n                  <div className=\"col-md-3\">\r\n                    <button type=\"button\" className=\"btn btn-warning\" onClick={resetValue}>\r\n                      Reset\r\n                    </button>\r\n                  </div>\r\n\r\n                  <div className=\"col-md-6\">\r\n                    <input {...register(\"txtElementId\")} type=\"text\" className=\"form-control\"  readonly=\"readonly\" />\r\n                  </div>\r\n\r\n\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </form>\r\n\r\n          </div>\r\n\r\n          <div className=\"col-md-8\">\r\n\r\n            <table className=\"lst-grid\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Id</th>\r\n                  <th>Name / Caption</th>\r\n                  <th>Parent</th>\r\n                  <th>Ctl / Data</th>\r\n                  <th>Length</th>\r\n                  <th>Property</th>\r\n                  <th>Manage</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <ElementMasterList elmList={elementList} setElementValue={setElementValue} delElement={delElement} />\r\n              </tbody>\r\n            </table>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nexport default ElementMaster;","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport api from \"../api/Webcall\";\r\nimport { GetAllStageList } from \"../utilities/getallstage\";\r\nimport { GetStgEvents } from \"../utilities/GetStgEvents\";\r\nimport { GetExpGrpLst } from \"../utilities/geteventexpression\";\r\n\r\nimport { generateUUID, compressBase64, decompressBase64, } from \"../utilities/utils\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n\r\nfunction EvntExprGroupMap({ ScrId }) {\r\n\r\n  const [stageList, setStageList] = useState([]);\r\n  const [stageEvents, setStgEvents] = useState([]);\r\n  const [expGroups, setExpGroups] = useState([]);\r\n  const { register, getValues, setValue, formState: { errors }, reset, } = useForm();\r\n\r\n\r\n  const FetchAllStageList = async (ScrId) => {\r\n    const StgList = await GetAllStageList(ScrId);\r\n    setStageList(StgList.body.Stages.filter((x) => x.StageTypeId !== 9));\r\n  };\r\n\r\n\r\n\r\n  const callServer = async (frmData, tag, endPoint, refreshFlag) => {\r\n\r\n    const frmHdr = { convid: generateUUID(), tag: tag, orgid: \"\", vendid: \"0\", };\r\n\r\n    const reqHdr = {};\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    let StgId = getValues(\"cmbStgId\");\r\n\r\n    try {\r\n\r\n      const response = await api.post(endPoint, compressBase64(reqdata), reqHdr);\r\n      const resData = JSON.parse(decompressBase64(response.data));\r\n\r\n      if (resData.hdr.rst == \"SUCCESS\") {\r\n        setTimeout(() => {\r\n          toast.success(\"Successfully updated\");\r\n\r\n          if (refreshFlag == 1) {\r\n            //resetExprGroup();\r\n            FetchStgEventTree(ScrId, StgId);\r\n          }\r\n\r\n          // resetFormData();\r\n          // FetchElementList(ScrId, StgId);\r\n          // FetchUITree(ScrId, StgId);\r\n\r\n        }, 300);\r\n      }\r\n      else {\r\n        setTimeout(() => {\r\n          toast.error(JSON.stringify(resData.fdr[0].rstmsg));\r\n        }, 300);\r\n      }\r\n\r\n    } catch (err) {\r\n      setTimeout(() => {\r\n        toast.error(\"Unable to process request\");\r\n      }, 300);\r\n    }\r\n\r\n  };\r\n\r\n\r\n  const addExprGroup = (treenode) => {\r\n\r\n    let StgId = getValues(\"cmbStgId\");\r\n    let exprGroupIds = getValues(\"txtSelectedExpGroupId\");\r\n\r\n    let StgElmDesignId = treenode.stgelmdsgid;\r\n    let EventId = treenode.evntid;\r\n\r\n    if (exprGroupIds != '[]') {\r\n\r\n      let arrayExpGrps = [];\r\n      let arrayVal = JSON.parse(exprGroupIds)\r\n      let nOrd = 0;\r\n      arrayVal.forEach(egrid => {\r\n        var obj = { exgrpid: egrid, ord: ++nOrd };\r\n        arrayExpGrps.push(obj);\r\n      });\r\n\r\n      let frmData = {\r\n        cmbScrId: ScrId, cmbStgId: StgId, cmbStgElmDsigId: StgElmDesignId, cmbEvntId: EventId,\r\n        expgrps: arrayExpGrps\r\n      };\r\n\r\n      callServer(frmData, \"Update Event ExpGroup Map\", apiendpoints.Updexgrpmap, 1);\r\n\r\n    }\r\n\r\n\r\n  };\r\n\r\n  const resetExpGrpSelection = (treenode, e) => {\r\n\r\n    // console.log(e.target.value);\r\n\r\n    // let lstNode = stageEvents.filter(x => x.parentid == treenode.id);\r\n    // lstNode.forEach(element => {\r\n\r\n    //   console.log( 'expgrp' + element.id );\r\n\r\n    //   setValue( 'expgrp' + element.id, true);\r\n\r\n    // });\r\n\r\n\r\n  };\r\n\r\n  const handleOnCheck = (ExprGrpMapId) => {\r\n\r\n  };\r\n\r\n  const deleteExprGroupMap = (treenode) => {\r\n\r\n    if (window.confirm(\"Are you sure, do you want delete this expression mapping ?\")) {\r\n\r\n      let StgId = getValues(\"cmbStgId\");\r\n      let exprgrpmapids = [];\r\n      exprgrpmapids.push(treenode.exprgrpmapid)\r\n\r\n      let frmData = {\r\n        cmbScrId: ScrId, cmbStgId: StgId, cmbStgElmDsigId: treenode.stgelmdsgid,\r\n        cmbEvntId: treenode.evntid, exprGrpMapIds: exprgrpmapids\r\n      };\r\n\r\n      callServer(frmData, \"Delete Event ExpGroup Map\", apiendpoints.Delexgrpmap, 1);\r\n    }\r\n  };\r\n\r\n  const deleteEventExprGroupMap = (treenode) => {\r\n\r\n    if (window.confirm(\"Are you sure, do you want delete this event mapping ?\")) {\r\n\r\n      let StgId = getValues(\"cmbStgId\");\r\n      let exprgrpmapids = [];\r\n      let lstNode = stageEvents.filter(x => x.parentid == treenode.id);\r\n      lstNode.forEach(element => {\r\n        exprgrpmapids.push(element.exprgrpmapid)\r\n      });\r\n\r\n      let frmData = {\r\n        cmbScrId: ScrId, cmbStgId: StgId, cmbStgElmDsigId: treenode.stgelmdsgid,\r\n        cmbEvntId: treenode.evntid, exprGrpMapIds: exprgrpmapids\r\n      };\r\n\r\n      callServer(frmData, \"Delete Event ExpGroup Map\", apiendpoints.Delexgrpmap, 1);\r\n    }\r\n  };\r\n\r\n\r\n  const reorderExprGroupMap = (treenode, dir) => {\r\n\r\n    let StgId = getValues(\"cmbStgId\");\r\n    \r\n    let frmData = {\r\n      cmbScrId: ScrId, cmbStgId: StgId, exprGrpMapId: treenode.exprgrpmapid, txtDirection: dir\r\n    };\r\n  \r\n    callServer(frmData, \"Reorder Event ExpGroup Map\", apiendpoints.Reordexgrpmap, 1);\r\n\r\n  };\r\n\r\n\r\n  const StgEventTree = () => {\r\n\r\n    if (stageEvents) {\r\n      let root = stageEvents.filter((x) => x.parentid == null);\r\n      return (\r\n        <>\r\n          {(root.length > 0) ?\r\n            <ul>\r\n              {(root.map((node) => {\r\n                return (\r\n                  <>\r\n                    <StgEventNode treenode={node} />\r\n                  </>\r\n                )\r\n              }))}\r\n            </ul>\r\n            : <></>}\r\n        </>\r\n      )\r\n\r\n    }\r\n  };\r\n\r\n  const StgEventNode = ({ treenode }) => {\r\n    let lstNode = stageEvents.filter(x => x.parentid == treenode.id);\r\n    lstNode.sort((a, b) => a.ord < b.ord ? -1 : 1)\r\n    if (lstNode.length > 0) {\r\n\r\n      return (\r\n        <li>\r\n          <details open>\r\n            <summary id={'id' + treenode.id}>\r\n\r\n              {treenode.ty == 'EVNT' ?\r\n                <>\r\n                  <input type=\"checkbox\" onChange={(e) => resetExpGrpSelection(treenode, e)} />\r\n                  <button type=\"button\" id={'expgrp' + treenode.id} className=\"btn btn-light\" onClick={() => addExprGroup(treenode)} >\r\n                    <span dangerouslySetInnerHTML={{ __html: treenode.elmname }}></span>\r\n                  </button>\r\n                  <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => deleteEventExprGroupMap(treenode)}  ><i className=\"fa fa-trash-o\"></i></button>\r\n                </>\r\n                : <span dangerouslySetInnerHTML={{ __html: treenode.elmname }}></span>\r\n              }\r\n\r\n            </summary>\r\n            <ul>\r\n              {lstNode.map((node) => {\r\n                return (\r\n                  <StgEventNode treenode={node} />\r\n                )\r\n              })}\r\n            </ul>\r\n          </details>\r\n        </li>\r\n      );\r\n\r\n    }\r\n    else {\r\n\r\n      return (\r\n        <li id={'id' + treenode.id}>\r\n\r\n          {treenode.ty == 'EXPGR' ?\r\n            <input type=\"checkbox\" id={'expgrp' + treenode.id} />\r\n            : <></>\r\n          }\r\n\r\n          <span>&nbsp;</span>\r\n\r\n          {treenode.ty == 'EVNT' ?\r\n            <button type=\"button\" id={'expgrp' + treenode.id} className=\"btn btn-light\" onClick={() => addExprGroup(treenode)} >\r\n              <span dangerouslySetInnerHTML={{ __html: treenode.elmname }}></span>\r\n            </button>\r\n            : <span dangerouslySetInnerHTML={{ __html: treenode.ord + ' ' + treenode.elmname }}></span>\r\n          }\r\n\r\n          {treenode.ty == 'EXPGR' ?\r\n            <>\r\n              <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => deleteExprGroupMap(treenode)} ><i className=\"fa fa-trash-o\"></i></button>\r\n              <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => reorderExprGroupMap(treenode, 'U')} ><i className=\"fa fa-arrow-up\"></i></button>\r\n              <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => reorderExprGroupMap(treenode, 'D')} ><i className=\"fa fa-arrow-down\"></i></button>\r\n            </>\r\n            : <></>\r\n          }\r\n\r\n        </li>\r\n      );\r\n\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const mbgElmArray = (tf, Id) => {\r\n\r\n    let arrayVal;\r\n    if (getValues('txtSelectedExpGroupId') == '[]') {\r\n      arrayVal = [];\r\n    }\r\n    else {\r\n      arrayVal = JSON.parse(getValues('txtSelectedExpGroupId'));\r\n    }\r\n\r\n    if (tf) {\r\n      const index = arrayVal.indexOf(Id);\r\n      if (index == -1) {\r\n        arrayVal.push(Id);\r\n      }\r\n    }\r\n    else {\r\n      const index = arrayVal.indexOf(Id);\r\n      if (index > -1) {\r\n        arrayVal.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    setValue('txtSelectedExpGroupId', JSON.stringify(arrayVal));\r\n\r\n  };\r\n\r\n  const ExpGroupLst = () => {\r\n\r\n    let expGrpIds = new Array();\r\n    let nCnt = -1;\r\n\r\n    const onChangeSelect = (e, ExprGroupId) => {\r\n      mbgElmArray(e.target.checked, ExprGroupId);\r\n    }\r\n\r\n    if (expGroups) {\r\n\r\n      return (\r\n        <>\r\n          {(expGroups.length > 0) ? expGroups.map((data, index) => {\r\n\r\n            ++nCnt;\r\n            expGrpIds[nCnt] = data.egid;\r\n\r\n            return (\r\n              <tr key={index}>\r\n                <td align=\"center\"><input {...register('S_' + expGrpIds[nCnt])} type=\"checkbox\" onClick={(e) => onChangeSelect(e, data.egid)} /></td>\r\n                <td>{data.egname}</td>\r\n              </tr>\r\n            )\r\n\r\n          }) : <></>}\r\n\r\n        </>\r\n      )\r\n    }\r\n    else {\r\n      return (<></>);\r\n    }\r\n\r\n  };\r\n\r\n  const resetExpGrpoupSelect = () => {\r\n    setValue('txtSelectedExpGroupId', '[]');\r\n    expGroups.map((expgr) => {\r\n      setValue('S_' + expgr.egid, false);\r\n    });\r\n  };\r\n\r\n\r\n  const stageOnChange = (e) => {\r\n    var StgId = e.target.value;\r\n    FetchStgEventTree(ScrId, StgId);\r\n  };\r\n\r\n  const FetchStgEventTree = async (ScrId, StgId) => {\r\n    const evntTree = await GetStgEvents(ScrId, StgId);\r\n    setStgEvents(evntTree.body.evnts);\r\n    reset({ txtSelectedExpGroupId: \"[]\" });\r\n  };\r\n\r\n  const FetchExpGroups = async () => {\r\n    const Response = await GetExpGrpLst(ScrId);\r\n    setExpGroups(Response.body.expressions);\r\n  };\r\n\r\n  useEffect(() => { FetchAllStageList(ScrId); }, []);\r\n  useEffect(() => { FetchExpGroups(ScrId); }, []);\r\n\r\n  return (\r\n\r\n    <>\r\n\r\n      <form autoComplete=\"off\" >\r\n        <div className=\"row\">\r\n          <div className=\"col-md-5\">\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <label htmlFor=\"cmbStgId\" className=\"form-label\">Stage</label>\r\n                <select {...register(\"cmbStgId\")} className=\"form-select\" onChange={stageOnChange} >\r\n                  <option value=\"0\">- Select -</option>\r\n                  {\r\n                    stageList.map((x) => (<option key={x.StageId} value={x.StageId}>{x.StageName}</option>))\r\n                  }\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"tree\">\r\n              <StgEventTree />\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"col-md-7\">\r\n\r\n\r\n            <div className=\"row\">\r\n              Expression Group List\r\n              <input {...register(\"txtSelectedExpGroupId\")} type=\"text\" readonly=\"readonly\" disabled=\"disabled\" className=\"dispNone1\" />\r\n              <table className=\"lst-grid\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"col-md-1\" >\r\n                      <button type=\"button\" className=\"btn-link\" onClick={() => resetExpGrpoupSelect()} >Clear</button>\r\n                    </th>\r\n                    <th className=\"col-md-11\">Expression Group</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <ExpGroupLst />\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </form>\r\n    </>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default EvntExprGroupMap;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport api from \"../api/Webcall\";\r\nimport { GetAllStageList } from \"../utilities/getallstage\";\r\nimport { GetStgClientEvents } from \"../utilities/GetStgEvents\";\r\nimport { GetExpGrpLst } from \"../utilities/geteventexpression\";\r\n\r\nimport { generateUUID, compressBase64, decompressBase64, } from \"../utilities/utils\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n\r\nfunction ClientEvents({ ScrId }) {\r\n\r\n  const [stageList, setStageList] = useState([]);\r\n  const [stageEvents, setStgEvents] = useState([]);\r\n  const { register, getValues, setValue, formState: { errors }, reset, } = useForm();\r\n\r\n\r\n  const FetchAllStageList = async (ScrId) => {\r\n    const StgList = await GetAllStageList(ScrId);\r\n    setStageList(StgList.body.Stages.filter((x) => x.StageTypeId !== 9));\r\n  };\r\n\r\n\r\n\r\n  const callServer = async (frmData, tag, endPoint, refreshFlag) => {\r\n\r\n    const frmHdr = { convid: generateUUID(), tag: tag, orgid: \"\", vendid: \"0\", };\r\n\r\n    const reqHdr = {};\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    let StgId = getValues(\"cmbStgId\");\r\n\r\n    try {\r\n\r\n      const response = await api.post(endPoint, compressBase64(reqdata), reqHdr);\r\n      const resData = JSON.parse(decompressBase64(response.data));\r\n\r\n      if (resData.hdr.rst == \"SUCCESS\") {\r\n        if (refreshFlag == 2) {\r\n          \r\n          setValue(\"txtScrCEventId\", \"\");\r\n          setValue(\"txtStgElmDesignId\", \"\");\r\n          setValue(\"txtEventId\", \"\");\r\n          setValue(\"txtScript\", \"\");\r\n\r\n          if (resData.body.evnts)\r\n          {\r\n            if (resData.body.evnts.length>0)\r\n            {\r\n              var obj = resData.body.evnts[0];\r\n              document.getElementById(\"lblClientScript\").innerHTML = obj.elmna +\" - \"+ obj.evnt;\r\n              setValue(\"txtScrCEventId\", obj.scrcevntid);\r\n              setValue(\"txtStgElmDesignId\", obj.stgemldsnid);\r\n              setValue(\"txtEventId\", obj.evntid);\r\n              setValue(\"txtScript\", obj.script);\r\n            }\r\n          }\r\n         \r\n        }\r\n        else {\r\n          setTimeout(() => {\r\n            toast.success(\"Successfully updated\");\r\n\r\n            setValue(\"txtScrCEventId\", \"\");\r\n            setValue(\"txtStgElmDesignId\", \"\");\r\n            setValue(\"txtEventId\", \"\");\r\n            setValue(\"txtScript\", \"\");\r\n            FetchStgEventTree(ScrId, StgId);\r\n\r\n          }, 300);\r\n        }\r\n      }\r\n      else {\r\n        setTimeout(() => {\r\n          toast.error(JSON.stringify(resData.fdr[0].rstmsg));\r\n        }, 300);\r\n      }\r\n\r\n    } catch (err) {\r\n      setTimeout(() => {\r\n        toast.error(\"Unable to process request\");\r\n      }, 300);\r\n    }\r\n\r\n  };\r\n\r\n\r\n  const getClientScript = (treenode) => {\r\n\r\n    let StgId = getValues(\"cmbStgId\");\r\n\r\n    let StgElmDesignId = treenode.stgelmdsgid;\r\n    let EventId = treenode.evntid;\r\n\r\n    let frmData = {\r\n      cmbScrId: ScrId, cmbStgId: StgId, cmbStgElmDsigId: StgElmDesignId, cmbEvntId: EventId\r\n    };\r\n\r\n    callServer(frmData, \"Get client Event script\", apiendpoints.Getclntsrpt, 2);\r\n\r\n  };\r\n\r\n  \r\n  const updateClientScript = () => {\r\n  \r\n    let StgId = getValues(\"cmbStgId\");\r\n\r\n    let frmData = {\r\n      cmbScrId: ScrId, cmbStgId: StgId,\r\n      txtScrCEventId: getValues(\"txtScrCEventId\"),\r\n      txtStgElmDsigId : getValues(\"txtStgElmDesignId\"),\r\n      txtEvntId : getValues(\"txtEventId\"),\r\n      txtScript : getValues(\"txtScript\")\r\n    };\r\n\r\n    callServer(frmData, \"Update client Event script\", apiendpoints.Updclntsrpt, 3);\r\n\r\n  };\r\n\r\n\r\n\r\n  const deleteClientScript = (treenode) => {\r\n\r\n    if (window.confirm(\"Are you sure, do you want delete this script ?\")) {\r\n      let StgId = getValues(\"cmbStgId\");\r\n      let frmData = {\r\n        cmbScrId: ScrId, cmbStgId: StgId, txtScrCEventId: treenode.scrceventid\r\n      };\r\n      callServer(frmData, \"Delete client Script\", apiendpoints.Delclntsrpt, 1);\r\n    }\r\n  };\r\n \r\n\r\n  const StgEventTree = () => {\r\n\r\n    if (stageEvents) {\r\n\r\n      console.log(stageEvents);\r\n\r\n      let root = stageEvents.filter((x) => x.parentid == null);\r\n      return (\r\n        <>\r\n          {(root.length > 0) ?\r\n            <ul>\r\n              {(root.map((node) => {\r\n                return (\r\n                  <>\r\n                    <StgEventNode treenode={node} />\r\n                  </>\r\n                )\r\n              }))}\r\n            </ul>\r\n            : <></>}\r\n        </>\r\n      )\r\n\r\n    }\r\n  };\r\n\r\n  const StgEventNode = ({ treenode }) => {\r\n    let lstNode = stageEvents.filter(x => x.parentid == treenode.id);\r\n    lstNode.sort((a, b) => a.ord < b.ord ? -1 : 1)\r\n    if (lstNode.length > 0) {\r\n\r\n      return (\r\n        <li>\r\n          <details>\r\n            <summary id={'id' + treenode.id}>\r\n              <span dangerouslySetInnerHTML={{ __html: treenode.elmname }}></span>\r\n            </summary>\r\n            <ul>\r\n              {lstNode.map((node) => {\r\n                return (\r\n                  <StgEventNode treenode={node} />\r\n                )\r\n              })}\r\n            </ul>\r\n          </details>\r\n        </li>\r\n      );\r\n\r\n    }\r\n    else {\r\n\r\n      return (\r\n        <li id={'id' + treenode.id}>\r\n          <button type=\"button\" id={'expgrp' + treenode.id} className=\"btn btn-light\" onClick={() => getClientScript(treenode)} >\r\n            <span dangerouslySetInnerHTML={{ __html: treenode.elmname }}></span>\r\n          </button>\r\n          {(treenode.scrceventid) ?\r\n            <button type=\"button\" className=\"btn btn-light clr-gray\" onClick={() => deleteClientScript(treenode)}>\r\n              <i className=\"fa fa-trash-o\"></i>\r\n            </button>\r\n            : <></>}\r\n        </li>\r\n      );\r\n\r\n    }\r\n  };\r\n\r\n\r\n  const stageOnChange = (e) => {\r\n    var StgId = e.target.value;\r\n\r\n    setValue(\"txtScrCEventId\", \"\");\r\n    setValue(\"txtStgElmDesignId\", \"\");\r\n    setValue(\"txtEventId\", \"\");\r\n    setValue(\"txtScript\", \"\");\r\n\r\n    FetchStgEventTree(ScrId, StgId);\r\n  };\r\n\r\n  const FetchStgEventTree = async (ScrId, StgId) => {\r\n    const evntTree = await GetStgClientEvents(ScrId, StgId);\r\n    setStgEvents(evntTree.body.evnts);\r\n  \r\n  };\r\n\r\n  useEffect(() => { FetchAllStageList(ScrId); }, []);\r\n\r\n  return (\r\n\r\n    <>\r\n\r\n      <form autoComplete=\"off\" >\r\n        <div className=\"row\">\r\n          <div className=\"col-md-5\">\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <label htmlFor=\"cmbStgId\" className=\"form-label\">Stage</label>\r\n                <select {...register(\"cmbStgId\")} className=\"form-select\" onChange={stageOnChange} >\r\n                  <option value=\"0\">- Select -</option>\r\n                  {\r\n                    stageList.map((x) => (<option key={x.StageId} value={x.StageId}>{x.StageName}</option>))\r\n                  }\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"tree\">\r\n              <StgEventTree />\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"col-md-7\">\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <span><b>Client Script :</b></span><label id=\"lblClientScript\" className=\"form-label\"></label>\r\n              </div>\r\n              \r\n              <div className=\"col-md-12\">\r\n                <input {...register(\"txtScrCEventId\")} type=\"text\" readonly=\"readonly\" disabled=\"disabled\" />\r\n                <input {...register(\"txtStgElmDesignId\")} type=\"text\" readonly=\"readonly\" disabled=\"disabled\" />\r\n                <input {...register(\"txtEventId\")} type=\"text\" readonly=\"readonly\" disabled=\"disabled\" />\r\n\r\n                <span>&nbsp;&nbsp;</span>\r\n                <button type=\"button\" className=\"btn-link btn-link-bg-border\" onClick={updateClientScript} >Update</button>\r\n\r\n              </div>\r\n              \r\n              <div className=\"col-md-12\">\r\n              <textarea {...register(\"txtScript\")} type=\"textarea\" rows={20} className=\"form-control\" />\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </form>\r\n    </>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default ClientEvents;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport ReactDOM from \"react-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { createRoot } from 'react-dom/client';\r\n\r\n/* Imports */\r\nimport { useForm } from \"react-hook-form\";\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nimport StageMaster from './StageMaster';\r\nimport ElementMaster from './ElementMaster';\r\nimport UIDesign from \"./UIDesign\";\r\nimport EvntExprGroup from \"./EvntExprGroup\";\r\nimport EvntExprGroupMap from \"./EvntExprGroupMap\";\r\nimport ClientEvents from \"./ClientEvents\";\r\nimport TaskElements  from \"./TaskElements\";\r\nimport { generateUUID, compressBase64, decompressBase64, } from \"../utilities/utils\";\r\nimport appsettings from \"../../appsettings.json\"\r\nimport { GetAllScreenList } from \"../utilities/getallscreen\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\n\r\n// import api from \"../api/Webcall\";\r\n// import { GetAllStageList } from \"../utilities/getallstage\";\r\n// import { FetchCombodata } from \"../utilities/combodata\";\r\n// import { Scrollbar } from \"react-scrollbars-custom\";\r\n// import { toast } from 'react-toastify';\r\n// import { generateUUID, compressBase64, decompressBase64, } from \"../utilities/utils\";\r\n\r\n\r\n\r\n/* Constant values */\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n\r\n\r\n/*\r\n\r\n// import \"font-awesome/css/font-awesome.min.css\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\n\r\n\r\n\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\n\r\n\r\n*/\r\n\r\nconst schema = yup.object().shape({\r\n  txtStageName: yup.string().required(\"Pls provide stage Name\"),\r\n});\r\n\r\n\r\n\r\nfunction ScreenDefiner() {\r\n\r\n  const [scrId, setScreenId] = useState([]);\r\n  const [screenList, setScreenList] = useState([]);\r\n\r\n  const { register, formState: { errors } } = useForm({ resolver: yupResolver(schema) });\r\n\r\n  /* Fetch data from Api */\r\n  const FetchAllActiveScreenList = async () => {\r\n    const scrlstRes = await GetAllScreenList();\r\n    setScreenList(scrlstRes.body.Screens.filter((res) => res.IsActive == true));\r\n  };\r\n\r\n\r\n  /*  Use Effect */\r\n  useEffect(() => { FetchAllActiveScreenList(); }, []);\r\n\r\n\r\n  /* Events */\r\n\r\n  const screenOnChange = (e) => {\r\n    setScreenId(e.target.value);\r\n\r\n    const stgContainer = document.getElementById('divStageMaster');\r\n    const stgRoot = createRoot(stgContainer);\r\n    stgRoot.render(<></>);\r\n\r\n    const elmContainer = document.getElementById('divElementMaster');\r\n    const elmRoot = createRoot(elmContainer);\r\n    elmRoot.render(<></>);\r\n\r\n    const uiContainer = document.getElementById('divUIDesign');\r\n    const uiRoot = createRoot(uiContainer);\r\n    uiRoot.render(<></>);\r\n\r\n    const expGrpContainer = document.getElementById('divEvntExprGroup');\r\n    const expGrpRoot = createRoot(expGrpContainer);\r\n    expGrpRoot.render(<></>);\r\n\r\n    const expGrpMapContainer = document.getElementById('divEvntExprGroupMap');\r\n    const expGrpMapRoot = createRoot(expGrpMapContainer);\r\n    expGrpMapRoot.render(<></>);\r\n    \r\n    const clientEventContainer = document.getElementById('divClientEvent');\r\n    const clientEventRoot = createRoot(clientEventContainer);\r\n    clientEventRoot.render(<></>);\r\n\r\n  };\r\n\r\n  const handleSelect = (key) => {\r\n\r\n    switch (key) {\r\n\r\n      case 'stage':\r\n        loadStageTab();\r\n        break;\r\n\r\n      case 'element':\r\n        loadElementTab();\r\n        break;\r\n\r\n      case 'uidesign':\r\n        loadUiDesignTab();\r\n        break;\r\n\r\n      case 'expression':\r\n        loadEvntExprGroupTab();\r\n        break;\r\n\r\n      case 'expevntmap':\r\n        loadEvntExprGroupMapTab();\r\n        break;\r\n\r\n      case 'clientevent':\r\n        loadClientEventTab();\r\n        break;\r\n\r\n      case 'taskelement':\r\n        loadTaskElementsTab();\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    };\r\n\r\n  };\r\n\r\n  const loadStageTab = () =>{\r\n    const container = document.getElementById('divStageMaster');\r\n    const root = createRoot(container); // createRoot(container!) if you use TypeScript\r\n    root.render(<StageMaster ScrId={scrId} />);\r\n  };\r\n\r\n  const loadElementTab = () =>{\r\n    const container = document.getElementById('divElementMaster');\r\n    const root = createRoot(container);\r\n    root.render(<ElementMaster ScrId={scrId} />);\r\n  };\r\n  \r\n  const loadUiDesignTab = () =>{\r\n    const container = document.getElementById('divUIDesign');\r\n    const root = createRoot(container);\r\n    root.render(<UIDesign ScrId={scrId} />);\r\n  };\r\n\r\n  const loadEvntExprGroupTab = () =>{\r\n    const container = document.getElementById('divEvntExprGroup');\r\n    const root = createRoot(container);\r\n    root.render(<EvntExprGroup ScrId={scrId} />);\r\n  };\r\n\r\n  const loadEvntExprGroupMapTab = () =>{\r\n    const container = document.getElementById('divEvntExprGroupMap');\r\n    const root = createRoot(container);\r\n    root.render(<EvntExprGroupMap ScrId={scrId} />);\r\n  };\r\n\r\n  const loadClientEventTab = () =>{\r\n    const container = document.getElementById('divClientEvent');\r\n    const root = createRoot(container);\r\n    root.render(<ClientEvents ScrId={scrId} />);\r\n  };\r\n\r\n  const loadTaskElementsTab = () =>{\r\n    const container = document.getElementById('divTaskElements');\r\n    const root = createRoot(container);\r\n    root.render(<TaskElements ScrId={scrId} />);\r\n  };\r\n\r\n\r\n  const publishScreen = async () => {\r\n\r\n    let frmData = {};\r\n    frmData[\"scrid\"] = scrId;\r\n    frmData[\"scrname\"] = \"\";\r\n\r\n    const frmHdr = { convid: generateUUID(), tag: \"Pubish Screen\", orgid: \"\", vendid: \"0\", };\r\n\r\n    const reqHdr = { };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    try {\r\n      const response = await api.post( apiendpoints.BuildScrn, compressBase64(reqdata), reqHdr );\r\n      const resData  = JSON.parse(decompressBase64(response.data));\r\n\r\n      if (resData.hdr.rst == \"SUCCESS\")\r\n      {\r\n        setTimeout(() => {\r\n          toast.success(\"Screen Published\");\r\n        }, 300);\r\n      }\r\n      else {\r\n        setTimeout(() => {\r\n          toast.error(\"Failed to Publish\");\r\n        }, 300);\r\n      }\r\n\r\n    } catch (err) {\r\n      setTimeout(() => {\r\n        toast.error(\"Unable to process request\");\r\n      }, 300);\r\n    }\r\n\r\n  };\r\n\r\n\r\n  /* HTML Screen Desgin Starts */\r\n  try {\r\n    return (\r\n      <>\r\n        \r\n        <div className=\"row\">\r\n          \r\n          <div className=\"card-header\">\r\n            <strong className=\"card-title\">Screen Definer </strong>\r\n          </div>\r\n\r\n          <div className=\"col-md-4\">\r\n            <select {...register(\"cmbScrId\")} className=\"form-control\" onChange={screenOnChange}>\r\n              <option value=\"0\">- Select -</option>\r\n              {\r\n                screenList.map((res) => (<option key={res.ScreenId} value={res.ScreenId}>{res.ScrName}</option>))\r\n              }\r\n\r\n            </select>\r\n            <p>{errors.cmbScreenId?.message}</p>\r\n          </div>\r\n\r\n          <div className=\"col-md-3\">\r\n            <button className=\"btn btn-primary\" onClick={() => publishScreen()}>Publish</button>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n\r\n          <Tabs\r\n            defaultActiveKey=\"profile\"\r\n            id=\"uncontrolled-tab-example\"\r\n            className=\"mb-3\"\r\n            onSelect={handleSelect}>\r\n\r\n            <Tab eventKey=\"stage\" title=\"Stage\" >\r\n              <div id=\"divStageMaster\"></div>\r\n            </Tab>\r\n\r\n            <Tab eventKey=\"element\" title=\"Elements\">\r\n            <div id=\"divElementMaster\"></div>\r\n            </Tab>\r\n\r\n            <Tab eventKey=\"uidesign\" title=\"UI Design\">\r\n            <div id=\"divUIDesign\"></div>\r\n            </Tab>\r\n\r\n            <Tab eventKey=\"expression\" title=\"Expression Group\">\r\n            <div id=\"divEvntExprGroup\"></div>\r\n            </Tab>\r\n\r\n            <Tab eventKey=\"expevntmap\" title=\"Expression & Event Map\">\r\n              <div id=\"divEvntExprGroupMap\"></div>\r\n            </Tab>\r\n\r\n            <Tab eventKey=\"clientevent\" title=\"Client Event\">\r\n              <div id=\"divClientEvent\"></div>\r\n            </Tab>\r\n\r\n            <Tab eventKey=\"taskelement\" title=\"Task Element\">\r\n              <div id=\"divTaskElements\"></div>\r\n            </Tab>\r\n\r\n          </Tabs>\r\n\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n    throw(error);\r\n  }\r\n}\r\n\r\nexport default ScreenDefiner;\r\n","\r\nfunction StageMasterList({ stageList, setStageValue, delStage }) {\r\n\r\n\r\n\r\n    if (stageList !== undefined) {\r\n        return (\r\n\r\n\r\n            stageList.map((data, index) => {\r\n                const { StageId, ScreenId, StageName, Ord, StageTypeId, StageFile, StageType } = data;\r\n\r\n                return (\r\n\r\n                    // <div>{Ord} - {StageId} - {StageName} - {StageType} </div>\r\n\r\n                    <tr key={index}>\r\n                        <td>{Ord}</td>\r\n                        <td>{StageId}</td>\r\n                        <td> <button onClick={() => (setStageValue(data))} class=\"btn btn-link\">{StageName}</button>  </td>\r\n                        <td>{StageType}</td>\r\n                        <td>\r\n                            <button onClick={() => (delStage(StageId))} class=\"btn btn-light clr-gray\"><i class=\"fa fa-trash-o\"></i></button>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    //     <tr key={index}>\r\n                    //     <td>  <input type=\"text\" value={Method} onChange={(evnt)=>(handleChange(index, evnt))} name=\"Method\" className=\"form-control\"/> </td>\r\n                    //     <td><input type=\"text\" value={ToolTip}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"ToolTip\" className=\"form-control\"/> </td>\r\n                    //     <td><input type=\"text\" value={Icon}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"Icon\" className=\"form-control\" /> </td>\r\n                    //     <td>  <input type=\"text\" value={CSS} onChange={(evnt)=>(handleChange(index, evnt))} name=\"CSS\" className=\"form-control\"/> </td>\r\n                    //     <td><input type=\"text\" value={Style}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"Style\" className=\"form-control\"/> </td>\r\n                    //     <td><input type=\"text\" value={Condition}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"Condition\" className=\"form-control\" /> </td>\r\n                    //     <td><button className=\"btn btn-outline-danger\" onClick={()=>(deleteTableRows(index))}>x</button></td>\r\n                    // </tr>\r\n\r\n                )\r\n            })\r\n\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <></>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default StageMasterList;","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from 'react-toastify';\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport { GetAllStageList } from \"../utilities/getallstage\";\r\nimport { generateUUID, compressBase64, decompressBase64, } from \"../utilities/utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\nimport StageMasterList from \"./StageMasterList\";\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nconst schema = yup.object().shape({\r\n  txtStageName: yup.string().required(\"Pls provide stage name\"),\r\n  cmbStageTypeId: yup.string().required(\"Pls select stage type\"),\r\n  ntxtOrd: yup.string().required(\"Pls provide order\")\r\n});\r\n\r\n/* Main method */\r\nfunction StageMaster({ ScrId }) {\r\n\r\n  const [stgTypes, setStgTypes] = useState([]);\r\n  const [stgList, setStgList] = useState([]);\r\n  const [alert, setAlert] = useState(\"\");\r\n  const [isLoading, setLoanding] = useState(false);\r\n\r\n  const { register, handleSubmit, formState: { errors }, reset, } = useForm({ resolver: yupResolver(schema) });\r\n\r\n  const LoadCombo = async () => {\r\n    const opt = '|STGTY|';\r\n    const optw = '';\r\n    const Response = await FetchCombodata(opt, optw);\r\n    setStgTypes(Response.body.stgty)\r\n  };\r\n\r\n  const FetchAllStageList = async (ScrId) => {\r\n    const StageList = await GetAllStageList(ScrId);\r\n    setStgList(StageList.body.Stages);\r\n  };\r\n\r\n  useEffect(() => { LoadCombo(); }, []);\r\n  useEffect(() => { FetchAllStageList(ScrId); }, []);\r\n\r\n  const ResetValue = () => {\r\n    reset({ txtStageId: \"\", txtStageName: \"\",ntxtOrd:\"\",cmbStageTypeId:\"\",txtStageFile:\"\"})\r\n  }\r\n\r\n  function setStageValue(data)\r\n  {\r\n    reset({ txtStageId: data.StageId, txtStageName: data.StageName, ntxtOrd : data.Ord,\r\n      cmbStageTypeId : data.StageTypeId  , txtStageFile: data.StageFile })  \r\n  }\r\n\r\n  const delStage = async (StageId) => {\r\n\r\n    if (window.confirm(\"Are you sure, do you want delete this stage ?\")) {\r\n\r\n      let frmData = {\r\n        txtStageId: StageId\r\n      };\r\n\r\n      const DelStageMaster = apiendpoints.DelStageMaster;\r\n\r\n      /* Header */\r\n      const convID = generateUUID();\r\n      const frmHdr = {\r\n        convid: convID,\r\n        tag: \"Delete Stage\",\r\n        orgid: \"\",\r\n        vendid: \"0\",\r\n      };\r\n\r\n      const reqHdr = {};\r\n      const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n      try {\r\n\r\n        const response = await api.post(\r\n          DelStageMaster,\r\n          compressBase64(reqdata),\r\n          reqHdr\r\n        );\r\n\r\n        const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n        if (strResponse.hdr.rst == \"SUCCESS\") {\r\n          setTimeout(() => {\r\n\r\n            setAlert({ AlertType: \"Success\", message: \"Successfully updated\" });\r\n            toast.success(\"Successfully updated\");\r\n\r\n            setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n            ResetValue();\r\n            FetchAllStageList(ScrId);\r\n            setLoanding(false);\r\n          }, 300);\r\n        }\r\n        else {\r\n          let msg = JSON.stringify(strResponse.fdr[0].rstmsg)\r\n          setTimeout(() => {\r\n            setAlert({ AlertType: \"Error\", message: msg });\r\n            toast.error(msg);\r\n            setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n            setLoanding(false);\r\n          }, 300);\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        toast.error(\"Unable to process request\");\r\n        setAlert({ AlertType: \"Error\", message: \"Unable to process request\" });\r\n        setLoanding(false);\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  const onSubmitHandler = async (data) => {\r\n\r\n    let StageId = data.txtStageId;\r\n    if (data.txtStageId == undefined)\r\n      StageId = \"0\";\r\n\r\n    let frmData = {\r\n      txtStageId: StageId,\r\n      txtScreenId: ScrId,\r\n      txtStageName: data.txtStageName,\r\n      ntxtOrd: data.ntxtOrd,\r\n      cmbStageTypeId: data.cmbStageTypeId,\r\n      txtStageFile: data.txtStageFile\r\n    };\r\n\r\n    const UpdStageMaster = apiendpoints.UpdStageMaster;\r\n\r\n    // console.log(frmData);\r\n\r\n    //e.preventDefault();\r\n\r\n    setLoanding(true);\r\n\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"Stage Update\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const reqHdr = {};\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    try {\r\n\r\n      const response = await api.post(\r\n        UpdStageMaster,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      if (strResponse.hdr.rst == \"SUCCESS\")\r\n      {\r\n        setTimeout(() => {\r\n          \r\n          setAlert({ AlertType: \"Success\", message: \"Successfully updated\" });\r\n          toast.success(\"Successfully updated\");\r\n\r\n          setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n          ResetValue();\r\n          FetchAllStageList(ScrId);\r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n      else {\r\n        setAlert({ AlertType: \"Error\", message: JSON.stringify(strResponse.fdr[0].rstmsg) });\r\n        setLoanding(false);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      setAlert({ AlertType: \"Error\", message: \"Unable to process request\" });\r\n      setLoanding(false);\r\n    }\r\n  }\r\n\r\n  try {\r\n    return (\r\n      <>\r\n\r\n        <div className=\"\">\r\n          {isLoading ? <Spinner></Spinner> : \"\"}\r\n          <Alerts alert={alert} />\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n\r\n          <div className=\"col-md-4\">\r\n\r\n            <form onSubmit={handleSubmit(onSubmitHandler)} autoComplete=\"off\" >\r\n\r\n              <div className=\"col-md-12\">\r\n                <label htmlFor=\"txtStageName\" className=\"form-label\">Stage Name</label>\r\n                <input\r\n                  {...register(\"txtStageName\")}\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                />\r\n                <p className=\"err-msg\">{errors.txtStageName?.message}</p>\r\n              </div>\r\n\r\n              <div className=\"col-md-12\">\r\n                <label htmlFor=\"cmbStageTypeId\" className=\"form-label\">Stage Type Id (1-Normal 2 - Auto Run )</label>\r\n                <select {...register(\"cmbStageTypeId\")} className=\"form-control\" onChange={\"\"}>\r\n                  <option value=\"\">- Select -</option>\r\n                  {\r\n                    stgTypes.map((res) =>\r\n                      (<option key={res.k} value={res.k}>{res.v}</option>))\r\n                  }\r\n                </select>\r\n                <p className=\"err-msg\">{errors.cmbStageTypeId?.message}</p>\r\n              </div>\r\n\r\n              <div className=\"col-md-12\">\r\n                <label htmlFor=\"txtStageFile\" className=\"form-label\">Stage File</label>\r\n                <input\r\n                  {...register(\"txtStageFile\")}\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"row pad-top-15\">\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"ntxtOrd\" className=\"form-label\">\r\n                    Stage Order\r\n                  </label>\r\n                  <input\r\n                    {...register(\"ntxtOrd\")}\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                  />\r\n                   <p className=\"err-msg\">{errors.ntxtOrd?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"txtStageId\" className=\"form-label\">Stage Id</label>\r\n                  <input\r\n                    {...register(\"txtStageId\")}\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    disabled=\"disabled\"\r\n                    readonly=\"readonly\"\r\n                  />\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className=\"row pad-top-15\">\r\n\r\n                <div className=\"col-md-3\">\r\n                  <button type=\"submit\" className=\"btn btn-success\">\r\n                    Submit\r\n                  </button>\r\n                </div>\r\n\r\n                <div className=\"col-md-3\">\r\n                  <button type=\"button\" className=\"btn btn-warning\" onClick={ResetValue}>\r\n                    Reset\r\n                  </button>\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </form>\r\n\r\n          </div>\r\n\r\n          <div className=\"col-md-8\">\r\n\r\n            <table className=\"lst-grid\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Ord</th>\r\n                  <th>Id</th>\r\n                  <th>Stage</th>\r\n                  <th>Type</th>\r\n                  <th>Manage</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <StageMasterList stageList={stgList} setStageValue={setStageValue} delStage={delStage} />\r\n              </tbody>\r\n            </table>\r\n\r\n          </div>\r\n\r\n\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nexport default StageMaster;","import React from \"react\";\r\nimport { useState, useEffect, useRef} from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport api from \"../api/Webcall\";\r\nimport { GetAllStageList } from \"../utilities/getallstage\";\r\nimport { GetStgClientEvents } from \"../utilities/GetStgEvents\";\r\nimport { GetExpGrpLst } from \"../utilities/geteventexpression\";\r\n\r\nimport { generateUUID, compressBase64, decompressBase64, } from \"../utilities/utils\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n\r\nfunction TaskElements({ ScrId }) {\r\n\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [isLoading, setLoanding] = useState(false);\r\n  const { register, getValues, setValue, formState: { errors }, reset, } = useForm();\r\n  const ref = useRef();\r\n  const [alert, setAlert] = useState(\"\");\r\n\r\n  const handleFileChange = (event) => {\r\n    if (event.target.files.length > 0) {\r\n      setSelectedFile(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const OnMainSubmitHandler = async (e) => {\r\n\r\n    e.preventDefault(); // prevent page refresh\r\n    \r\n    var fileCtrl = ref.current.value;\r\n    var filePath = ref.current.value;\r\n\r\n    var fExt = \".pdf,.doc,.txt,.csv,.xls,.xlsx,.jpg\";\r\n    var allowedExtns = fExt.replace(/\\,/g, \"|\");\r\n    allowedExtns = allowedExtns.replace(/\\./g, \"\\\\.\");\r\n    allowedExtns = \"/(\" + allowedExtns.replace(/ /g, \"\") + \")$/i;\";\r\n    allowedExtns = eval(allowedExtns);\r\n    if (!allowedExtns.exec(filePath)) {\r\n      toast.error(\"Invalid file type\");\r\n      ref.current.value = \"\";\r\n      return false;\r\n    }\r\n\r\n    const MAX_FILE_SIZE = 2048; // 2MB\r\n\r\n    if (!selectedFile) {\r\n      toast.error(\"Please choose a file\");\r\n      return false;\r\n    }\r\n\r\n    const fileSizeKiloBytes = selectedFile.size / 1024;\r\n\r\n    if (fileSizeKiloBytes > MAX_FILE_SIZE) {\r\n      toast.error(\"File size is greater than maximum limit\");\r\n      return false;\r\n    }\r\n\r\n    const tmpltDet = {};\r\n    tmpltDet[\"cmbMailTemplateId\"] = getValues(\"cmbMailTemplateId\");\r\n    \r\n    const formData = new FormData();\r\n    formData.append(\"tmpltdet\", JSON.stringify(tmpltDet));\r\n    formData.append(\"file\", selectedFile);\r\n\r\n    try {\r\n      const url = apiendpoints.MailTmpltAttachment;\r\n      let response = await api.post(url, formData);\r\n\r\n      let strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n\r\n      if (strResponse.hdr.rst == \"SUCCESS\") {\r\n        setTimeout(() => {\r\n          setAlert({ AlertType: \"Success\", message: \"Successfully updated\" });\r\n          toast.success(\"Successfully updated\");\r\n          setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n      else {\r\n        let msg = JSON.stringify(strResponse.fdr[0].rstmsg)\r\n        setTimeout(() => {\r\n          setAlert({ AlertType: \"Error\", message: msg });\r\n          toast.error(msg);\r\n          setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n\r\n\r\n\r\n       \r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      setAlert({ AlertType: \"Error\", message: \"Unable to process request\" });\r\n      setLoanding(false);\r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  return (\r\n\r\n    <>\r\n\r\n      <form onSubmit={OnMainSubmitHandler} autocomplete=\"off\">\r\n\r\n        <div className=\"row\">\r\n\r\n          <div className=\"col-md-4\">\r\n            <label htmlFor=\"cmbMailTemplateId\" className=\"form-label\">Mail Template</label>\r\n            <input {...register(\"cmbMailTemplateId\")} type=\"text\" className=\"form-control\" />\r\n          </div>\r\n\r\n          <div className=\"col-md-6\">\r\n            <label htmlFor=\"filAttachment\" className=\"form-label\">Attachment</label>\r\n            <input type=\"file\" name=\"filElements\" onChange={handleFileChange} ref={ref} className=\"form-control\" />\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <br/>\r\n\r\n        <div className=\"row\">\r\n          \r\n          <div className=\"col-md-2\">\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              <span className=\"bi bi-upload\"></span> upload\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n      </form>\r\n    </>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default TaskElements;\r\n","import { generateUUID, compressBase64, decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nexport const GetStgEvents = async (ScrId, StgId) => {\r\n\r\n   let Response;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Stage Events\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: ScrId, cmbStgId: StgId }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n\r\n   await api.post(apiendpoints.Stgevtree, compressBase64(data)).then(function (response) {\r\n      Response = JSON.parse(decompressBase64(response.data));\r\n   })\r\n\r\n   return Response;\r\n\r\n};\r\n\r\n\r\n\r\nexport const GetStgClientEvents = async (ScrId, StgId) => {\r\n\r\n   let Response;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Stage Events\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: ScrId, cmbStgId: StgId }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n\r\n   await api.post(apiendpoints.Stgclntevtree, compressBase64(data)).then(function (response) {\r\n      Response = JSON.parse(decompressBase64(response.data));\r\n   })\r\n\r\n   return Response;\r\n\r\n};\r\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllScreenList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllScreen = apiendpoints.AllScreen;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllScreen\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllScreen;\r\n\r\n console.log(combonurl); \r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n"],"names":["_ref","elmList","setElementValue","delElement","map","data","index","ElmName","ControlType","DataType","Caption","ParentElmName","MaxLength","RangeFrom","RangeTo","SizeInKB","FileExt","IsFrmGrid","ElementId","ControlId","DataTypeId","ParentElementId","ParentControlId","CmbCod","CmbCon","ConStr","Prop","_jsxs","children","_jsx","onClick","class","apiendpoints","appsettings","schema","yup","shape","txtElementName","required","txtCaption","cmbControlType","cmbDataType","ScrId","ctlTypes","setCtlRes","useState","dataTypes","setDtTyRes","cmbConnStrs","setCmbConStrRes","elementList","setElementList","elementDefaultValue","setElementDefaultValue","alert","setAlert","isLoading","setLoanding","register","handleSubmit","formState","errors","reset","getValues","useForm","resolver","yupResolver","FetchElementList","async","ElementLis","GetElementList","body","elements","useEffect","Response","FetchCombodata","ctl","dtty","ctbl","LoadCombo","onChngCtlType","e","ctrlId","target","value","txtSizeInKB","txtFileExt","txtCmbCode","txtCmbCon","cmbDbShortName","txtRangeFrom","txtRangeTo","resetValue","txtElementId","txtParentElement","txtMaxLength","cbIsFrmGrid","txtDefaultValue","window","confirm","frmData","scrid","DelElmMaster","DeleteElement","reqHdr","reqdata","hdr","convid","generateUUID","tag","orgid","vendid","response","api","post","compressBase64","strResponse","JSON","parse","decompressBase64","rst","setTimeout","AlertType","message","toast","success","msg","stringify","fdr","rstmsg","error","err","console","log","onSubmitHandler","ParentElement","cmbDbShotName","UpdateElement","_errors$txtElementNam","_errors$txtCaption","_errors$cmbControlTyp","_errors$cmbDataType","_errors$txtMaxLength","_Fragment","Spinner","Alerts","className","onSubmit","autoComplete","htmlFor","type","onChange","res","v","k","id","readonly","ElementMasterList","ElmId","GetElementDefValue","defaultvalue","FetchElementDefaultValue","stageList","setStageList","stageEvents","setStgEvents","expGroups","setExpGroups","setValue","callServer","endPoint","refreshFlag","StgId","resData","FetchStgEventTree","addExprGroup","treenode","exprGroupIds","StgElmDesignId","stgelmdsgid","EventId","evntid","arrayExpGrps","arrayVal","nOrd","forEach","egrid","obj","exgrpid","ord","push","cmbScrId","cmbStgId","cmbStgElmDsigId","cmbEvntId","expgrps","Updexgrpmap","reorderExprGroupMap","dir","exprGrpMapId","exprgrpmapid","txtDirection","Reordexgrpmap","StgEventTree","root","filter","x","parentid","length","node","StgEventNode","_ref2","lstNode","sort","a","b","open","ty","dangerouslySetInnerHTML","__html","elmname","exprgrpmapids","element","exprGrpMapIds","Delexgrpmap","deleteEventExprGroupMap","deleteExprGroupMap","ExpGroupLst","expGrpIds","Array","nCnt","onChangeSelect","ExprGroupId","mbgElmArray","tf","Id","indexOf","splice","checked","egid","align","egname","evntTree","GetStgEvents","evnts","txtSelectedExpGroupId","StgList","GetAllStageList","Stages","StageTypeId","FetchAllStageList","GetExpGrpLst","expressions","FetchExpGroups","StageId","StageName","disabled","expgr","document","getElementById","innerHTML","elmna","evnt","scrcevntid","stgemldsnid","script","Getclntsrpt","getClientScript","scrceventid","txtScrCEventId","Delclntsrpt","deleteClientScript","GetStgClientEvents","updateClientScript","txtStgElmDsigId","txtEvntId","txtScript","Updclntsrpt","rows","txtStageName","scrId","setScreenId","screenList","setScreenList","scrlstRes","GetAllScreenList","Screens","IsActive","FetchAllActiveScreenList","screenOnChange","stgContainer","createRoot","render","elmContainer","uiContainer","expGrpContainer","expGrpMapContainer","clientEventContainer","handleSelect","key","loadStageTab","loadElementTab","loadUiDesignTab","loadEvntExprGroupTab","loadEvntExprGroupMapTab","loadClientEventTab","loadTaskElementsTab","container","StageMaster","ElementMaster","UIDesign","EvntExprGroup","EvntExprGroupMap","ClientEvents","TaskElements","_errors$cmbScreenId","ScreenId","ScrName","cmbScreenId","BuildScrn","publishScreen","Tabs","defaultActiveKey","onSelect","Tab","eventKey","title","setStageValue","delStage","undefined","Ord","StageFile","StageType","cmbStageTypeId","ntxtOrd","stgTypes","setStgTypes","stgList","setStgList","StageList","stgty","ResetValue","txtStageId","txtStageFile","DelStageMaster","txtScreenId","UpdStageMaster","_errors$txtStageName","_errors$cmbStageTypeI","_errors$ntxtOrd","StageMasterList","selectedFile","setSelectedFile","ref","useRef","handleFileChange","event","files","OnMainSubmitHandler","preventDefault","fileCtrl","current","filePath","fExt","allowedExtns","replace","eval","exec","MAX_FILE_SIZE","fileSizeKiloBytes","size","tmpltDet","formData","FormData","append","url","MailTmpltAttachment","autocomplete","name","Stgevtree","then","Stgclntevtree","AllScreen","headers","Authorization","localStorage","getItem","combonurl"],"sourceRoot":""}