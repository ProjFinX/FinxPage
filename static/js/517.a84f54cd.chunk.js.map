{"version":3,"file":"static/js/517.a84f54cd.chunk.js","mappings":"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","sources":["components/dynamicscreendefinition/StageMasterList.js","components/dynamicscreendefinition/StageMaster.js","components/utilities/getallstage.js"],"sourcesContent":["\r\nfunction StageMasterList({ stageList, setStageValue, delStage }) {\r\n\r\n\r\n\r\n    if (stageList !== undefined) {\r\n        return (\r\n\r\n\r\n            stageList.map((data, index) => {\r\n                const { StageId, ScreenId, StageName, Ord, StageTypeId, StageFile, StageType } = data;\r\n\r\n                return (\r\n\r\n                    // <div>{Ord} - {StageId} - {StageName} - {StageType} </div>\r\n\r\n                    <tr key={index}>\r\n                        <td>{Ord}</td>\r\n                        <td>{StageId}</td>\r\n                        <td> <button onClick={() => (setStageValue(data))} class=\"btn btn-link\">{StageName}</button>  </td>\r\n                        <td>{StageType}</td>\r\n                        <td>\r\n                            <button onClick={() => (delStage(StageId))} class=\"btn btn-light clr-gray\"><i class=\"fa fa-trash-o\"></i></button>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    //     <tr key={index}>\r\n                    //     <td>  <input type=\"text\" value={Method} onChange={(evnt)=>(handleChange(index, evnt))} name=\"Method\" className=\"form-control\"/> </td>\r\n                    //     <td><input type=\"text\" value={ToolTip}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"ToolTip\" className=\"form-control\"/> </td>\r\n                    //     <td><input type=\"text\" value={Icon}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"Icon\" className=\"form-control\" /> </td>\r\n                    //     <td>  <input type=\"text\" value={CSS} onChange={(evnt)=>(handleChange(index, evnt))} name=\"CSS\" className=\"form-control\"/> </td>\r\n                    //     <td><input type=\"text\" value={Style}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"Style\" className=\"form-control\"/> </td>\r\n                    //     <td><input type=\"text\" value={Condition}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"Condition\" className=\"form-control\" /> </td>\r\n                    //     <td><button className=\"btn btn-outline-danger\" onClick={()=>(deleteTableRows(index))}>x</button></td>\r\n                    // </tr>\r\n\r\n                )\r\n            })\r\n\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <></>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default StageMasterList;","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from 'react-toastify';\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport { GetAllStageList } from \"../utilities/getallstage\";\r\nimport { generateUUID, compressBase64, decompressBase64, } from \"../utilities/utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\nimport StageMasterList from \"./StageMasterList\";\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nconst schema = yup.object().shape({\r\n  txtStageName: yup.string().required(\"Pls provide stage name\"),\r\n  cmbStageTypeId: yup.string().required(\"Pls select stage type\"),\r\n  ntxtOrd: yup.string().required(\"Pls provide order\")\r\n});\r\n\r\n/* Main method */\r\nfunction StageMaster({ ScrId }) {\r\n\r\n  const [stgTypes, setStgTypes] = useState([]);\r\n  const [stgList, setStgList] = useState([]);\r\n  const [alert, setAlert] = useState(\"\");\r\n  const [isLoading, setLoanding] = useState(false);\r\n\r\n  const { register, handleSubmit, formState: { errors }, reset, } = useForm({ resolver: yupResolver(schema) });\r\n\r\n  const LoadCombo = async () => {\r\n    const opt = '|STGTY|';\r\n    const optw = '';\r\n    const Response = await FetchCombodata(opt, optw);\r\n    setStgTypes(Response.body.stgty)\r\n  };\r\n\r\n  const FetchAllStageList = async (ScrId) => {\r\n    const StageList = await GetAllStageList(ScrId);\r\n    setStgList(StageList.body.Stages);\r\n  };\r\n\r\n  useEffect(() => { LoadCombo(); }, []);\r\n  useEffect(() => { FetchAllStageList(ScrId); }, []);\r\n\r\n  const ResetValue = () => {\r\n    reset({ txtStageId: \"\", txtStageName: \"\",ntxtOrd:\"\",cmbStageTypeId:\"\",txtStageFile:\"\"})\r\n  }\r\n\r\n  function setStageValue(data)\r\n  {\r\n    reset({ txtStageId: data.StageId, txtStageName: data.StageName, ntxtOrd : data.Ord,\r\n      cmbStageTypeId : data.StageTypeId  , txtStageFile: data.StageFile })  \r\n  }\r\n\r\n  const delStage = async (StageId) => {\r\n\r\n    if (window.confirm(\"Are you sure, do you want delete this stage ?\")) {\r\n\r\n      let frmData = {\r\n        txtStageId: StageId\r\n      };\r\n\r\n      const DelStageMaster = apiendpoints.DelStageMaster;\r\n\r\n      /* Header */\r\n      const convID = generateUUID();\r\n      const frmHdr = {\r\n        convid: convID,\r\n        tag: \"Delete Stage\",\r\n        orgid: \"\",\r\n        vendid: \"0\",\r\n      };\r\n\r\n      const reqHdr = {};\r\n      const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n      try {\r\n\r\n        const response = await api.post(\r\n          DelStageMaster,\r\n          compressBase64(reqdata),\r\n          reqHdr\r\n        );\r\n\r\n        const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n        if (strResponse.hdr.rst == \"SUCCESS\") {\r\n          setTimeout(() => {\r\n\r\n            setAlert({ AlertType: \"Success\", message: \"Successfully updated\" });\r\n            toast.success(\"Successfully updated\");\r\n\r\n            setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n            ResetValue();\r\n            FetchAllStageList(ScrId);\r\n            setLoanding(false);\r\n          }, 300);\r\n        }\r\n        else {\r\n          let msg = JSON.stringify(strResponse.fdr[0].rstmsg)\r\n          setTimeout(() => {\r\n            setAlert({ AlertType: \"Error\", message: msg });\r\n            toast.error(msg);\r\n            setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n            setLoanding(false);\r\n          }, 300);\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        toast.error(\"Unable to process request\");\r\n        setAlert({ AlertType: \"Error\", message: \"Unable to process request\" });\r\n        setLoanding(false);\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  const onSubmitHandler = async (data) => {\r\n\r\n    let StageId = data.txtStageId;\r\n    if (data.txtStageId == undefined)\r\n      StageId = \"0\";\r\n\r\n    let frmData = {\r\n      txtStageId: StageId,\r\n      txtScreenId: ScrId,\r\n      txtStageName: data.txtStageName,\r\n      ntxtOrd: data.ntxtOrd,\r\n      cmbStageTypeId: data.cmbStageTypeId,\r\n      txtStageFile: data.txtStageFile\r\n    };\r\n\r\n    const UpdStageMaster = apiendpoints.UpdStageMaster;\r\n\r\n    // console.log(frmData);\r\n\r\n    //e.preventDefault();\r\n\r\n    setLoanding(true);\r\n\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"Stage Update\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const reqHdr = {};\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    try {\r\n\r\n      const response = await api.post(\r\n        UpdStageMaster,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      if (strResponse.hdr.rst == \"SUCCESS\")\r\n      {\r\n        setTimeout(() => {\r\n          \r\n          setAlert({ AlertType: \"Success\", message: \"Successfully updated\" });\r\n          toast.success(\"Successfully updated\");\r\n\r\n          setTimeout(() => { setAlert({ AlertType: \"null\", message: \"null\", }); }, 600);\r\n          ResetValue();\r\n          FetchAllStageList(ScrId);\r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n      else {\r\n        setAlert({ AlertType: \"Error\", message: JSON.stringify(strResponse.fdr[0].rstmsg) });\r\n        setLoanding(false);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      setAlert({ AlertType: \"Error\", message: \"Unable to process request\" });\r\n      setLoanding(false);\r\n    }\r\n  }\r\n\r\n  try {\r\n    return (\r\n      <>\r\n\r\n        <div className=\"\">\r\n          {isLoading ? <Spinner></Spinner> : \"\"}\r\n          <Alerts alert={alert} />\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n\r\n          <div className=\"col-md-4\">\r\n\r\n            <form onSubmit={handleSubmit(onSubmitHandler)} autoComplete=\"off\" >\r\n\r\n              <div className=\"col-md-12\">\r\n                <label htmlFor=\"txtStageName\" className=\"form-label\">Stage Name</label>\r\n                <input\r\n                  {...register(\"txtStageName\")}\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                />\r\n                <p className=\"err-msg\">{errors.txtStageName?.message}</p>\r\n              </div>\r\n\r\n              <div className=\"col-md-12\">\r\n                <label htmlFor=\"cmbStageTypeId\" className=\"form-label\">Stage Type Id (1-Normal 2 - Auto Run )</label>\r\n                <select {...register(\"cmbStageTypeId\")} className=\"form-control\" onChange={\"\"}>\r\n                  <option value=\"\">- Select -</option>\r\n                  {\r\n                    stgTypes.map((res) =>\r\n                      (<option key={res.k} value={res.k}>{res.v}</option>))\r\n                  }\r\n                </select>\r\n                <p className=\"err-msg\">{errors.cmbStageTypeId?.message}</p>\r\n              </div>\r\n\r\n              <div className=\"col-md-12\">\r\n                <label htmlFor=\"txtStageFile\" className=\"form-label\">Stage File</label>\r\n                <input\r\n                  {...register(\"txtStageFile\")}\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"row pad-top-15\">\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"ntxtOrd\" className=\"form-label\">\r\n                    Stage Order\r\n                  </label>\r\n                  <input\r\n                    {...register(\"ntxtOrd\")}\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                  />\r\n                   <p className=\"err-msg\">{errors.ntxtOrd?.message}</p>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <label htmlFor=\"txtStageId\" className=\"form-label\">Stage Id</label>\r\n                  <input\r\n                    {...register(\"txtStageId\")}\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    disabled=\"disabled\"\r\n                    readonly=\"readonly\"\r\n                  />\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className=\"row pad-top-15\">\r\n\r\n                <div className=\"col-md-3\">\r\n                  <button type=\"submit\" className=\"btn btn-success\">\r\n                    Submit\r\n                  </button>\r\n                </div>\r\n\r\n                <div className=\"col-md-3\">\r\n                  <button type=\"button\" className=\"btn btn-warning\" onClick={ResetValue}>\r\n                    Reset\r\n                  </button>\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </form>\r\n\r\n          </div>\r\n\r\n          <div className=\"col-md-8\">\r\n\r\n            <table className=\"lst-grid\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Ord</th>\r\n                  <th>Id</th>\r\n                  <th>Stage</th>\r\n                  <th>Type</th>\r\n                  <th>Manage</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <StageMasterList stageList={stgList} setStageValue={setStageValue} delStage={delStage} />\r\n              </tbody>\r\n            </table>\r\n\r\n          </div>\r\n\r\n\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nexport default StageMaster;","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllStageList = async (screenid) => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllStage = apiendpoints.AllStage;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllStage\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {txtScreenId:screenid}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllStage;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n\r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n"],"names":["_ref","stageList","setStageValue","delStage","undefined","map","data","index","StageId","ScreenId","StageName","Ord","StageTypeId","StageFile","StageType","_jsxs","children","_jsx","onClick","class","_Fragment","apiendpoints","appsettings","schema","yup","shape","txtStageName","required","cmbStageTypeId","ntxtOrd","ScrId","stgTypes","setStgTypes","useState","stgList","setStgList","alert","setAlert","isLoading","setLoanding","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","FetchAllStageList","async","StageList","GetAllStageList","body","Stages","useEffect","Response","FetchCombodata","stgty","LoadCombo","ResetValue","txtStageId","txtStageFile","window","confirm","frmData","DelStageMaster","reqHdr","reqdata","hdr","convid","generateUUID","tag","orgid","vendid","response","api","post","compressBase64","strResponse","JSON","parse","decompressBase64","rst","setTimeout","AlertType","message","toast","success","msg","stringify","fdr","rstmsg","error","err","console","log","onSubmitHandler","txtScreenId","UpdStageMaster","_errors$txtStageName","_errors$cmbStageTypeI","_errors$ntxtOrd","className","Spinner","Alerts","onSubmit","autoComplete","htmlFor","type","onChange","value","res","k","v","disabled","readonly","StageMasterList","AllStage","screenid","headers","Authorization","localStorage","getItem","combonurl","then"],"sourceRoot":""}