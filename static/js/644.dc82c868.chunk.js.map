{"version":3,"file":"static/js/644.dc82c868.chunk.js","mappings":"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","sources":["components/dynamicscreendefinition/UIDesign.js","components/utilities/getScrexpresiontree.js","components/utilities/getallstage.js","components/utilities/getelementlist.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport { GetAllStageList } from \"../utilities/getallstage\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport { generateUUID, compressBase64, decompressBase64, } from \"../utilities/utils\";\r\nimport { GetElementList } from \"../utilities/getelementlist\";\r\nimport { GetUIDesignTree } from \"../utilities/getScrexpresiontree\";\r\n// import UIElmList from \"./UIElmList\";\r\nimport appsettings from \"../../appsettings.json\";\r\nimport { Color } from \"ag-grid-community\";\r\nimport { getDocument } from \"pdfjs-dist\";\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\nconst schema = yup.object().shape({\r\n  cmbStgId: yup.string().required(\"Pls Select Stage \"),\r\n});\r\n\r\n\r\n/* Main Method */\r\nfunction UIDesign({ ScrId }) {\r\n \r\n  const [stageList, setStageList] = useState([]);\r\n  const [uiTypeList, setUITypes] = useState([]);\r\n  const [elementList, setElementList] = useState([]);\r\n  const [uiTree, setUiTree] = useState([]);\r\n  const [actualUiTree, setActualUiTree] = useState([]);\r\n  const [detailOpenIds, setDetailOpenIds] = useState([]);\r\n\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n\r\n  const { register, handleSubmit, getValues, setValue, formState: { errors }, reset, }\r\n    = useForm({ resolver: yupResolver(schema), });\r\n\r\n  const FetchAllStageList = async (ScrId) => {\r\n    const StgList = await GetAllStageList(ScrId);\r\n    setStageList(StgList.body.Stages.filter((x) => x.StageTypeId !== 9));\r\n  };\r\n\r\n  const FetchUITypes = async () => {\r\n    const opt = \"|UIT|\";\r\n    const optw = \"\";\r\n    const Response = await FetchCombodata(opt, optw);\r\n    setUITypes(Response.body.uit);\r\n  };\r\n\r\n  const FetchElementList = async (ScrId, StgId) => {\r\n    const ElementLis = await GetElementList(ScrId, StgId);\r\n    setElementList(ElementLis.body.elements);\r\n  };\r\n\r\n  const FetchUITree = async (ScrId, StgId) => {\r\n    const uiTree = await GetUIDesignTree(ScrId, StgId);\r\n    setUiTree(uiTree.data.uitree);\r\n    setActualUiTree(uiTree.data.actualUiTree);\r\n  };\r\n\r\n  useEffect(() => { FetchUITypes(); }, []);\r\n  useEffect(() => { FetchAllStageList(ScrId); }, []);\r\n\r\n  const callServer = async (frmData, tag, endPoint) =>{\r\n\r\n    const frmHdr = { convid: generateUUID(), tag: tag, orgid: \"\", vendid: \"0\", };\r\n\r\n    const reqHdr = { };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    try {\r\n      const response = await api.post( endPoint, compressBase64(reqdata), reqHdr );\r\n      const resData  = JSON.parse(decompressBase64(response.data));\r\n\r\n      if (resData.hdr.rst == \"SUCCESS\")\r\n      {\r\n        let StgId = getValues(\"cmbStgId\");\r\n\r\n        setTimeout(() => {\r\n          toast.success(\"Successfully updated\");\r\n          resetFormData();\r\n          FetchElementList(ScrId, StgId);\r\n          FetchUITree(ScrId, StgId);\r\n        }, 300);\r\n      }\r\n      else {\r\n        setTimeout(() => {\r\n          toast.error(JSON.stringify(resData.fdr[0].rstmsg));\r\n        }, 300);\r\n      }\r\n\r\n    } catch (err) {\r\n      setTimeout(() => {\r\n        toast.error(\"Unable to process request\");\r\n      }, 300);\r\n    }\r\n\r\n  };\r\n\r\n  const stageOnChange = (e) => {\r\n    var StgId = e.target.value;\r\n    FetchElementList(ScrId, StgId);\r\n    FetchUITree(ScrId, StgId);\r\n    resetFormData();\r\n  };\r\n\r\n  const copyUiDesign = () => {\r\n\r\n    if (window.confirm(\"Are you sure, replace existing UI design ?\") == 1) {\r\n\r\n      let fromStgId = getValues(\"cmbCpyStgId\");\r\n      let toStgId = getValues(\"cmbStgId\");\r\n      let frmData = { cmbScrId: ScrId, cmbStgFrom: fromStgId, cmbStgTo: toStgId };\r\n      callServer(frmData, \"Copy Stage UI Design\", apiendpoints.Cpystgui);\r\n\r\n    }\r\n\r\n  }\r\n\r\n  const ref = useRef();\r\n\r\n  const uiTypeOnChange = () => {\r\n\r\n  };\r\n\r\n  const mbgElmArray = (tf, ElementId, txtField ) => {\r\n\r\n    let elm = elementList.find(x => x.ElementId==ElementId);\r\n\r\n    let arrayVal;\r\n    if (getValues(txtField) == '') {\r\n      arrayVal = [];\r\n    }\r\n    else {\r\n      arrayVal = JSON.parse(getValues(txtField));\r\n    }\r\n\r\n    if (tf) {\r\n      const index = arrayVal.indexOf(ElementId);\r\n      if (index == -1) {\r\n        arrayVal.push(ElementId);\r\n      }\r\n    }\r\n    else {\r\n      const index = arrayVal.indexOf(ElementId);\r\n      if (index > -1) {\r\n        arrayVal.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    if (arrayVal.length > 0) {\r\n      setValue(\"txtSelectedUi\", 'input');\r\n    }\r\n    else {\r\n      setValue(\"txtSelectedUi\", '');\r\n    }\r\n\r\n    setValue(txtField, JSON.stringify(arrayVal));\r\n\r\n  };\r\n\r\n  const UIElmList = () => {\r\n\r\n    let elmIds = new Array();\r\n    let nCnt = -1;\r\n\r\n    const onChangeSelect = (e, ElementId) => {\r\n      mbgElmArray(e.target.checked, ElementId,\"txtSelectedElm\");\r\n    }\r\n\r\n    const onChangeMandatory = (e, ElementId) => {\r\n      mbgElmArray(e.target.checked, ElementId,\"txtMandatoryElm\");\r\n    }\r\n\r\n    const onChangeReadonly = (e, ElementId) => {\r\n      mbgElmArray(e.target.checked, ElementId,\"txtReadonlyElm\");\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {(elementList.length > 0) ? elementList.map((data, index) => {\r\n\r\n          ++nCnt;\r\n          elmIds[nCnt] = data.ElementId;\r\n\r\n          return (\r\n            <tr key={index}>\r\n              <td><input {...register('S_' + elmIds[nCnt])} type=\"checkbox\" onClick={(e) => onChangeSelect(e, data.ElementId)} /></td>\r\n              <td>{data.ElmName}</td>\r\n              <td>{data.ParentElmName}</td>\r\n              <td><input {...register('M_' + elmIds[nCnt])} type=\"checkbox\" onClick={(e) => onChangeMandatory(e, data.ElementId)} /></td>\r\n              <td><input {...register('R_' + elmIds[nCnt])} type=\"checkbox\" onClick={(e) => onChangeReadonly(e, data.ElementId)} /></td>\r\n            </tr>\r\n          )\r\n\r\n        }) : <></>}\r\n\r\n      </>\r\n    )\r\n\r\n  };\r\n\r\n  const UITree = ({ uiTreeLst }) => {\r\n    if (uiTreeLst) {\r\n      let root = uiTreeLst.filter((x) => x.pruidsgnid == null);\r\n\r\n      return (\r\n        <>\r\n          {(root.length > 0) ?\r\n            <ul>\r\n              {(root.map((node) => {\r\n                return (\r\n                  <UINode uiTreeLst={uiTreeLst} treenode={node} />\r\n                )\r\n              }))}\r\n            </ul>\r\n            : <></>}\r\n        </>\r\n      )\r\n    }\r\n  };\r\n\r\n  const onToggle = (e, id) =>{\r\n\r\n    if (e.nativeEvent.newState == \"open\") {\r\n      const index = detailOpenIds.indexOf(id);\r\n      if (index == -1) {\r\n        detailOpenIds.push(id);\r\n      }\r\n    }\r\n    else {\r\n      const index = detailOpenIds.indexOf(id);\r\n      if (index > -1) {\r\n        detailOpenIds.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    setDetailOpenIds(detailOpenIds);\r\n  };\r\n\r\n  const ordChanged = (e) =>{\r\n\r\n    // console(e.target.value);\r\n\r\n  }\r\n\r\n  const UINode = ({ uiTreeLst, treenode }) => {\r\n\r\n    const handleOnBlur = (id, e) => {\r\n      updateOrder(id, e.target.value);\r\n    };\r\n\r\n    const handleOnCheck = (id, e) => {\r\n      mbgElmArray(e.target.checked, id, \"txtPropElm\");\r\n    }\r\n\r\n    const insertUI = (id) => {\r\n\r\n      let seltUi = getValues(\"txtSelectedUi\");\r\n      let StgId = getValues(\"cmbStgId\");\r\n\r\n      if (seltUi == 'input') {\r\n        let frmData = {\r\n          cmbScrId: ScrId,\r\n          cmbStgId: StgId,\r\n          txtStgUiDesignId: getValues(\"txtStgUiId\"),\r\n          txtParentStgUiId: id,\r\n          cmbUItype: seltUi,\r\n          txtTag: getValues(\"txtTag\"),\r\n          txtClass: getValues(\"txtClass\"),\r\n          txtTagVal: getValues(\"txtTagVal\"),\r\n          txtElmIds: getValues(\"txtSelectedElm\"),\r\n          txtMElmIds: getValues(\"txtMandatoryElm\"),\r\n          txtRElmIds: getValues(\"txtReadonlyElm\")\r\n        };\r\n\r\n        callServer(frmData, \"Update Group UI  Design\", apiendpoints.Updgrpuidsgn);\r\n      }\r\n      else if (seltUi == 'PARENT'){\r\n        callProperty(seltUi, 'Change Parent', null, id);\r\n      }\r\n      else {\r\n        let frmData = {};\r\n\r\n        frmData[\"cmbScrId\"] = ScrId;\r\n        frmData[\"cmbStgId\"] = StgId;\r\n        frmData[\"txtParentStgUiId\"] = id;\r\n        frmData[\"uiType\"] = seltUi;\r\n\r\n        callServer(frmData, \"UI Design\", apiendpoints.Upduidsgn);\r\n\r\n      }\r\n\r\n    };\r\n\r\n    let lstNode = uiTreeLst.filter(x => x.pruidsgnid == treenode.uidsgnid)\r\n    if (lstNode.length > 0) {\r\n      \r\n      return (\r\n        <li>\r\n          <details onToggle={(e) => onToggle(e, treenode.uidsgnid)} open={detailOpenIds.indexOf(treenode.uidsgnid) > -1} >\r\n            <summary id={'id'+treenode.uidsgnid}>\r\n              <input type=\"checkbox\" onChange={(e) => handleOnCheck(treenode.uidsgnid, e)} />\r\n              <button type=\"button\" id={'ui'+treenode.uidsgnid} className=\"btn btn-light\" onClick={() => insertUI(treenode.uidsgnid)} >\r\n                <span dangerouslySetInnerHTML={{ __html: treenode.uiexprn }} ></span>\r\n              </button>\r\n              <button type=\"button\" onClick={() => setParentId(treenode)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-plus\"></i></button>\r\n              <button type=\"button\" onClick={() => setValueToEdit(treenode)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-edit\"></i></button>\r\n              <button type=\"button\" onClick={() => deleteUiTreeLeaf(treenode.uidsgnid)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-trash-o\"></i></button>\r\n              <button type=\"button\" onClick={() => upReorder(treenode.uidsgnid)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-arrow-up\"></i></button>\r\n              <button type=\"button\" onClick={() => downReorder(treenode.uidsgnid)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-arrow-down\"></i></button>\r\n              <input type=\"text\" onBlur={(e) => handleOnBlur(treenode.uidsgnid, e)} />\r\n            </summary>\r\n            <ul>\r\n              {lstNode.map((node) => {\r\n                return (\r\n                  <UINode uiTreeLst={uiTreeLst} treenode={node} />\r\n                )\r\n              })}\r\n            </ul>\r\n          </details>\r\n        </li>\r\n      );\r\n\r\n    }\r\n    else if (treenode.uityp=='div' || treenode.uityp=='grid' || treenode.uityp=='popup'\r\n             || treenode.uityp=='tab' || treenode.uityp=='tabpg') {\r\n        \r\n        return(\r\n          <li id={'id'+treenode.uidsgnid}>\r\n            <input type=\"checkbox\" onChange={(e) => handleOnCheck(treenode.uidsgnid, e)} />\r\n            <button type=\"button\" id={'ui'+treenode.uidsgnid} className=\"btn btn-light\" onClick={() => insertUI(treenode.uidsgnid)} >\r\n              <span dangerouslySetInnerHTML={{ __html: treenode.uiexprn }}></span>\r\n            </button>\r\n            <button type=\"button\" onClick={() => setParentId(treenode)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-plus\"></i></button>\r\n            <button type=\"button\" onClick={() => setValueToEdit(treenode)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-edit\"></i></button>\r\n            <button type=\"button\" onClick={() => deleteUiTreeLeaf(treenode.uidsgnid)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-trash-o\"></i></button>\r\n            <button type=\"button\" onClick={() => upReorder(treenode.uidsgnid)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-arrow-up\"></i></button>\r\n            <button type=\"button\" onClick={() => downReorder(treenode.uidsgnid)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-arrow-down\"></i></button>\r\n            <input type=\"text\" onBlur={(e) => handleOnBlur(treenode.uidsgnid, e)} />\r\n          </li>\r\n        );\r\n\r\n    } else {\r\n      \r\n      return (\r\n        <li id={'id' + treenode.uidsgnid}>\r\n          <input type=\"checkbox\" onChange={(e) => handleOnCheck(treenode.uidsgnid, e)} />\r\n          <span dangerouslySetInnerHTML={{ __html: treenode.uiexprn }}></span>\r\n          <button type=\"button\" onClick={() => setValueToEdit(treenode)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-edit\"></i></button>\r\n          <button type=\"button\" onClick={() => deleteUiTreeLeaf(treenode.uidsgnid)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-trash-o\"></i></button>\r\n          <button type=\"button\" onClick={() => upReorder(treenode.uidsgnid)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-arrow-up\"></i></button>\r\n          <button type=\"button\" onClick={() => downReorder(treenode.uidsgnid)} className=\"btn btn-light clr-gray\"><i className=\"fa fa-arrow-down\"></i></button>\r\n          <input type=\"text\" onBlur={(e) => handleOnBlur(treenode.uidsgnid, e)} />\r\n        </li>\r\n      );\r\n\r\n    }\r\n  };\r\n\r\n  const deleteUiTreeLeaf = (StgUiDesignId) => {\r\n    if (window.confirm(\"Are you sure, do you want delete ?\")) {\r\n      let StgId = getValues(\"cmbStgId\");\r\n      let frmData = { cmbScrId: ScrId, cmbStgId: StgId, txtStgUiDesignId: StgUiDesignId };\r\n      callServer(frmData, \"Delete UI Design\", apiendpoints.Deluidsgn);\r\n\r\n    }\r\n  };\r\n\r\n  const updateOrder  = async (StgUiDesignId, Ord) => {\r\n    let StgId = getValues(\"cmbStgId\");\r\n    let frmData = { cmbScrId: ScrId, cmbStgId: StgId, txtStgUiDesignId: StgUiDesignId,  txtOrd: Ord };\r\n    callServer(frmData, \"Reorder UI Design\", apiendpoints.UpdUiOrd);\r\n  };\r\n\r\n  const reOrder = async (StgUiDesignId, dir) => {\r\n    let StgId = getValues(\"cmbStgId\");\r\n    let frmData = { cmbScrId: ScrId, cmbStgId: StgId, txtStgUiDesignId: StgUiDesignId, txtDirection: dir };\r\n    callServer(frmData, \"Reorder UI Design\", apiendpoints.Reordui);\r\n  };\r\n\r\n  const resetFormData = () => {\r\n\r\n    elementList.map((elm) => {\r\n      setValue('S_' + elm.ElementId, false);\r\n      setValue('M_' + elm.ElementId, false);\r\n      setValue('R_' + elm.ElementId, false);\r\n    });\r\n  \r\n    reset({\r\n      txtStgUiId: \"\", cmbUItype: \"\", txtTag: \"\", txtClass: \"\", txtTagVal: \"\", txtParentStgUiId: \"\",\r\n      txtSelectedElm: \"[]\", txtMandatoryElm: \"[]\", txtReadonlyElm: \"[]\", txtPropElm: \"[]\",\r\n      cbIsAddRow:false, cbIsCheckBox: false, cbIsFilter:false, cbIsManageBtns:false\r\n    })\r\n  };\r\n\r\n  const resetElmSelect  = () => {\r\n    elementList.map((elm) => {\r\n      setValue('S_'+elm.ElementId,false);\r\n      setValue('M_'+elm.ElementId,false);\r\n      setValue('R_'+elm.ElementId,false);\r\n    });\r\n  };\r\n\r\n  const setValueToEdit = (data) => {\r\n    resetElmSelect();\r\n    resetFormData();\r\n    reset({\r\n      txtStgUiId: data.uidsgnid, cmbUItype: data.uityp, txtTag: data.tag, txtClass: data.cls,\r\n      txtTagVal: data.tagval, txtParentStgUiId: data.pruidsgnid, \r\n      txtSelectedElm: \"[]\", txtMandatoryElm: \"[]\", txtReadonlyElm: \"[]\",\r\n      cbIsAddRow:false, cbIsCheckBox: false, cbIsFilter:false, cbIsManageBtns:false\r\n    })\r\n  };\r\n\r\n  const upReorder = (uidsgnid) => {\r\n    var dir = \"U\";\r\n    reOrder(uidsgnid, dir)\r\n  };\r\n\r\n  const downReorder = (uidsgnid) => {\r\n    var dir = \"D\";\r\n    reOrder(uidsgnid, dir)\r\n  };\r\n\r\n  const setParentId = (data) => {\r\n    resetElmSelect();\r\n    reset({\r\n      txtStgUiId: \"\", cmbUItype: \"\", txtTag: \"\", txtClass: \"\", txtTagVal: \"\", txtParentStgUiId: data.uidsgnid,\r\n      txtSelectedElm: \"[]\", txtMandatoryElm: \"[]\", txtReadonlyElm: \"[]\",\r\n      cbIsAddRow:false, cbIsCheckBox: false, cbIsFilter:false, cbIsManageBtns:false\r\n    })\r\n  };\r\n\r\n\r\n  const handleSetMandatory = () =>{\r\n    callProperty('SETMAN', 'Set mandatory');\r\n  };\r\n\r\n\r\n  const handleSetReadonly = () =>{\r\n    callProperty('SETRED', 'Set readonly');\r\n  };\r\n\r\n  const handleRemoveMandatory = () =>{\r\n    callProperty('REMOMAN', 'Remove mandatory');\r\n  };\r\n\r\n  const handleRemoveReadonly = () =>{\r\n    callProperty('REMRED', 'Remove readonly');\r\n  };\r\n\r\n  const handleDeleteUIElm = () =>{\r\n    callProperty('DELETE', 'Delete UI Element');\r\n  };\r\n\r\n  const handleUpdateCSS = () =>{\r\n    let css = getValues('txtClass');\r\n    callProperty('CSS', 'Update UI Element CSS', css);\r\n  };\r\n\r\n  const callProperty = (flag, tag, css, parentid) => {\r\n    let StgId = getValues(\"cmbStgId\");\r\n    let PropElm = getValues(\"txtPropElm\");\r\n    let frmData = { cmbScrId: ScrId, cmbStgId: StgId, txtProp: flag, txtPropElm: PropElm, txtClass: css, txtParentStgUiId: parentid };\r\n    callServer(frmData, tag, apiendpoints.Upduiprop);\r\n  };\r\n\r\n\r\n  const updateGridProperty = () => {\r\n    let StgId = getValues(\"cmbStgId\");\r\n    let PropElm = getValues(\"txtPropElm\");\r\n    let isAddRow = getValues(\"cbIsAddRow\");\r\n    let isCheckBox = getValues(\"cbIsCheckBox\");\r\n    let isFilter = getValues(\"cbIsFilter\");\r\n    let isManageBtns = getValues(\"cbIsManageBtns\");\r\n\r\n    let frmData = { cmbScrId: ScrId, cmbStgId: StgId, txtPropElm: PropElm, cbIsAddRow : isAddRow,\r\n        cbIsCheckBox:isCheckBox, cbIsFilter:isFilter, cbIsManageBtns:isManageBtns };\r\n    callServer(frmData, \"Update Grid Prop\", apiendpoints.Updgrdprop);\r\n\r\n  };\r\n\r\n\r\n  const handleFileChange = (event) => {\r\n    if (event.target.files.length > 0) {\r\n      setSelectedFile(event.target.files[0]);\r\n    }\r\n\r\n  };\r\n\r\n  const OnFileUpladHandler = async (e) => {\r\n    e.preventDefault(); // 👈️ prevent page refresh\r\n\r\n    var fileCtrl = ref.current.value;\r\n    var filePath = ref.current.value;\r\n\r\n    var fExt = \".html\";\r\n    var allowedExtns = fExt.replace(/\\,/g, \"|\");\r\n    allowedExtns = allowedExtns.replace(/\\./g, \"\\\\.\");\r\n    allowedExtns = \"/(\" + allowedExtns.replace(/ /g, \"\") + \")$/i;\";\r\n    allowedExtns = eval(allowedExtns);\r\n    if (!allowedExtns.exec(filePath)) {\r\n      toast.error(\"Invalid file type\");\r\n      ref.current.value = \"\";\r\n      return false;\r\n    }\r\n\r\n    const MAX_FILE_SIZE = 2048; // 2MB\r\n\r\n    if (!selectedFile) {\r\n      toast.error(\"Please choose a file\");\r\n      return false;\r\n    }\r\n\r\n    const fileSizeKiloBytes = selectedFile.size / 1024;\r\n\r\n    if (fileSizeKiloBytes > MAX_FILE_SIZE) {\r\n      toast.error(\"File size is greater than maximum limit\");\r\n      return false;\r\n    }\r\n\r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"uploadfilelments\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    let StgId = getValues(\"cmbStgId\");\r\n\r\n    var scrdet = {};\r\n    scrdet[\"scrid\"] = ScrId;\r\n    scrdet[\"stgid\"] = StgId;\r\n    const formData = new FormData();\r\n\r\n    console.log(fileSizeKiloBytes);\r\n\r\n    formData.append(\"_scrdet\", JSON.stringify(scrdet));\r\n    formData.append(\"file\", selectedFile);\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    try {\r\n      const url = apiendpoints.Uplduihtml;\r\n\r\n      let response = await api.post(url, formData);\r\n\r\n      let strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        //ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        toast.error(JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        // setLoanding(false);\r\n      } else {\r\n        toast.success(\"Successfully updated\");\r\n        setTimeout(() => { }, 600);\r\n        // FetchEventtree(Screenid, StgId);\r\n        // FetchStageElementList(Screenid);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      //ShowAlert(\"Error\", \"Unable to process request\");\r\n      // setLoanding(false);\r\n    }\r\n  };\r\n\r\n  /* Submit form */\r\n  const onSubmitHandler = (data) => {\r\n\r\n    if (data.txtStgUiDesignId !== '')\r\n    {\r\n      resetElmSelect();\r\n      reset({\r\n        txtSelectedElm: \"[]\", txtMandatoryElm: \"[]\", txtReadonlyElm: \"[]\"\r\n      })\r\n    }\r\n\r\n    let frmData = {\r\n      cmbScrId: ScrId,\r\n      cmbStgId: data.cmbStgId,\r\n      txtStgUiDesignId: data.txtStgUiId,\r\n      txtParentStgUiId: data.txtParentStgUiId,\r\n      cmbUItype: data.cmbUItype,\r\n      txtTag: data.txtTag,\r\n      txtClass: data.txtClass,\r\n      txtTagVal: data.txtTagVal,\r\n      txtElmIds: data.txtSelectedElm,\r\n      txtMElmIds: data.txtMandatoryElm,\r\n      txtRElmIds: data.txtReadonlyElm\r\n    };\r\n\r\n    callServer(frmData, \"Update Group UI  Design\", apiendpoints.Updgrpuidsgn);\r\n\r\n  };\r\n\r\n  const selectedUi = (para) => {\r\n\r\n    let seltUi = getValues(\"txtSelectedUi\");\r\n\r\n    if (seltUi == para) {\r\n      setValue(\"txtSelectedUi\", '');\r\n    }\r\n    else {\r\n      setValue(\"txtSelectedUi\", para);\r\n    }\r\n\r\n  };\r\n \r\n\r\n  try {\r\n\r\n    return (\r\n      <>\r\n      \r\n        <form onSubmit={handleSubmit(onSubmitHandler)} autoComplete=\"off\" >\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n\r\n                  <div className=\"row\">\r\n\r\n                    <div className=\"col-md-12\">\r\n                      <label htmlFor=\"cmbStgId\" className=\"form-label\">Stage</label>\r\n                      <select {...register(\"cmbStgId\")} className=\"form-select\" onChange={stageOnChange} >\r\n                        <option value=\"0\">- Select -</option>\r\n                        {\r\n                          stageList.map((x) => (<option key={x.StageId} value={x.StageId}>{x.StageName}</option>))\r\n                        }\r\n                      </select>\r\n                      <p>{errors.cmbStgId?.message}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtUItype\" className=\"form-label\">UI type</label>\r\n                      <select {...register(\"cmbUItype\")} className=\"form-select\" onChange={uiTypeOnChange} >\r\n                        <option value=\"0\">- Select -</option>\r\n                        {\r\n                          uiTypeList.map((x) => (<option key={x.k} value={x.v} >{x.v}</option>))\r\n                        }\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtTag\" className=\"form-label\">H Tag</label>\r\n                      <input {...register(\"txtTag\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\">\r\n                      <label htmlFor=\"txtClass\" className=\"form-label\" >Css Class</label>\r\n                      <input {...register(\"txtClass\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\">\r\n                      <label htmlFor=\"txtTagVal\" className=\"form-label\" >TagVal</label>\r\n                      <input {...register(\"txtTagVal\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n\r\n                    \r\n\r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtParentStgUiId\" className=\"form-label\" >Parent</label>\r\n                      <input {...register(\"txtParentStgUiId\")} type=\"text\" className=\"form-control\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-6\">\r\n                      <label htmlFor=\"txtStgUiId\" className=\"form-label\" >Stage UI Id</label>\r\n                      <input {...register(\"txtStgUiId\")} type=\"text\" className=\"form-control\" disabled=\"disabled\" readonly=\"readonly\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\">\r\n                      <input {...register(\"txtSelectedElm\")} type=\"text\" readonly=\"readonly\" disabled=\"disabled\" className=\"dispNone\" />\r\n                      <input {...register(\"txtMandatoryElm\")} type=\"text\" readonly=\"readonly\" disabled=\"disabled\" className=\"dispNone\" />\r\n                      <input {...register(\"txtReadonlyElm\")} type=\"text\" readonly=\"readonly\" disabled=\"disabled\" className=\"dispNone\" />\r\n                      <input {...register(\"txtPropElm\")} type=\"text\" readonly=\"readonly\" disabled=\"disabled\" className=\"dispNone\" />\r\n                    </div>\r\n\r\n                    <div className=\"row pad-top-15\">\r\n\r\n                      <div className=\"col-md-3\">\r\n                        <button type=\"submit\" className=\"btn btn-success\">\r\n                          Submit\r\n                        </button>\r\n                      </div>\r\n\r\n                      <div className=\"col-md-3\">\r\n                        <button type=\"button\" className=\"btn btn-warning\" onClick={resetFormData} >\r\n                          Reset\r\n                        </button>\r\n                      </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    <fieldset className=\"col-md-12 pad-top-0-5em\">\r\n\r\n                      <legend>Grid Property</legend>\r\n\r\n                      <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                          <label htmlFor=\"cbIsAddRow\" className=\"form-label\">Add Row</label><br />\r\n                          <input {...register(\"cbIsAddRow\")} type=\"checkbox\" />\r\n                        </div>\r\n\r\n                        <div className=\"col-md-3\">\r\n                          <label htmlFor=\"cbIsCheckBox\" className=\"form-label\">CheckBox</label><br />\r\n                          <input {...register(\"cbIsCheckBox\")} type=\"checkbox\" />\r\n                        </div>\r\n\r\n                        <div className=\"col-md-3\">\r\n                          <label htmlFor=\"cbIsFilter\" className=\"form-label\">Col Filter</label><br />\r\n                          <input {...register(\"cbIsFilter\")} type=\"checkbox\" />\r\n                        </div>\r\n\r\n                        <div className=\"col-md-3 pad-bottom-0-5em\">\r\n                          <label htmlFor=\"cbIsManageBtns\" className=\"form-label\">Mng Btns</label><br />\r\n                          <input {...register(\"cbIsManageBtns\")} type=\"checkbox\" />\r\n                        </div>\r\n\r\n                      </div>\r\n\r\n                    </fieldset>\r\n\r\n                    <div className=\"row pad-top-15\">\r\n                    \r\n                      <div className=\"col-md-12\">\r\n                        <label htmlFor=\"cmbCpyStgId\" className=\"form-label\">UI design copy from</label>\r\n                        <select {...register(\"cmbCpyStgId\")} className=\"form-select\" >\r\n                          <option value=\"0\">- Select -</option>\r\n                          {\r\n                            stageList.map((x) => (<option key={x.StageId} value={x.StageId}>{x.StageName}</option>))\r\n                          }\r\n                        </select>\r\n                      </div>\r\n\r\n                      <div className=\"col-md-12\">\r\n                        <button type=\"button\" className=\"btn-link\" onClick={copyUiDesign} >\r\n                          Copy\r\n                        </button>\r\n                      </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"row pad-top-15\">\r\n\r\n                      <div className=\"col-md-12\">\r\n\r\n                        <label htmlFor=\"filElements\" className=\"form-label\">UI Html File</label>\r\n                        <input type=\"file\" name=\"filElements\" onChange={handleFileChange}\r\n                          ref={ref} className=\"form-control\" />\r\n\r\n                      </div>\r\n\r\n                      <div className=\"col-md-12\">\r\n                        <button type=\"button\"\r\n                          onClick={OnFileUpladHandler}\r\n                          className=\"btn btn-primary mar-top-2em\">\r\n                          <span className=\"bi bi-upload\"></span> upload\r\n                        </button>\r\n                      </div>\r\n\r\n                    </div>\r\n\r\n                  </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n\r\n                  <div className=\"row\">\r\n                    \r\n                    \r\n                    <div className=\"col-md-3 ui-div\" onClick={() => selectedUi('HDRDIV')} >HdrDiv</div>\r\n                    <div className=\"col-md-3 ui-div\" onClick={() => selectedUi('HDR')} >Hdr</div>\r\n                    <div className=\"col-md-3 ui-div\" onClick={() => selectedUi('TAB')} >TAB</div>\r\n                    <div className=\"col-md-3 ui-div\" onClick={() => selectedUi('TABPG')} >TabPag</div>\r\n\r\n                    <div className=\"col-md-3 ui-div\" onClick={() => selectedUi('ROW')} >Row</div>\r\n                    <div className=\"col-md-3 ui-div\" onClick={() => selectedUi('DIV')} >Div</div>\r\n                    <div className=\"col-md-2 ui-div\" onClick={() => selectedUi('DIV6')} >Div6</div>\r\n                    <div className=\"col-md-2 ui-div\" onClick={() => selectedUi('DIV4')} >Div4</div>\r\n                    <div className=\"col-md-2 ui-div\" onClick={() => selectedUi('DIV3')} >Div3</div>\r\n                    \r\n                    \r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <input {...register(\"txtSelectedUi\")} type=\"text\" className=\"form-control\" disabled=\"disabled\" readonly=\"readonly\" />\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <table className=\"lst-grid\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>\r\n                            <input {...register(\"cbIsSelectAll\")} type=\"checkbox\" />\r\n                          </th>\r\n                          <th>Element</th>\r\n                          <th>Parent</th>\r\n                          <th>MN</th>\r\n                          <th>RO</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <UIElmList elmList={elementList} register={register} />\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n\r\n              {/* <div className=\"tree\">\r\n              <ul>\r\n\r\n                <li>\r\n                  <details>\r\n                    <summary>Root 1</summary>\r\n                    <ul>\r\n                      <li>R1 Element 1</li>\r\n                      <li>R1 Element 2</li>\r\n                      <li>\r\n                        <details>\r\n                          <summary>R1 Grid 1</summary>\r\n                          <ul>\r\n                            <li>Grid Element 1</li>\r\n                            <li>Grid Element 2</li>\r\n                          </ul>\r\n                        </details>\r\n                      </li>\r\n                      <li>R1 Element 4</li>\r\n                    </ul>\r\n                  </details>\r\n                </li>\r\n\r\n                <li>\r\n                  <details>\r\n                    <summary>Root 2</summary>\r\n                    <ul>\r\n                      <li>R2 Element 1</li>\r\n                      <li>R2 Element 2</li>\r\n                      <li>\r\n                        <details>\r\n                          <summary>R2 Popup 1</summary>\r\n                          <ul>\r\n                            <li>Popup Element 1</li>\r\n                            <li>Popup Element 2</li>\r\n                          </ul>\r\n                        </details>\r\n                      </li>\r\n                      <li>R2 Element 4</li>\r\n                      <li>\r\n                        <details>\r\n                          <summary>R2 Grid 1</summary>\r\n                          <ul>\r\n                            <li>Grid2 Element 1</li>\r\n                            <li>Grid2 Element 2</li>\r\n                          </ul>\r\n                        </details>\r\n                      </li>\r\n                    </ul>\r\n                  </details>\r\n                </li>\r\n\r\n              </ul>\r\n            </div> */}\r\n\r\n\r\n              {/* <ul>\r\n              {uiTree.map((node) => (\r\n                <TreeNode key={node.id} node={node} />\r\n              ))}\r\n            </ul> */}\r\n\r\n\r\n              {/* <NewTreeNode uiTreeLst={actualUiTree} /> */}\r\n\r\n              <div className=\"pad-bottom-0-5em\">\r\n\r\n                <b>Mandatory :</b> \r\n                <button type=\"button\" className=\"btn-link\" onClick={handleSetMandatory}>Set</button>\r\n                <b>/</b>\r\n                <button type=\"button\" className=\"btn-link\" onClick={handleRemoveMandatory}>Remove</button>\r\n\r\n                <b>Readonly :</b>\r\n                <button type=\"button\" className=\"btn-link\" onClick={handleSetReadonly}>Set </button>\r\n                <b>/</b>\r\n                <button type=\"button\" className=\"btn-link\" onClick={handleRemoveReadonly}>Remove</button>\r\n                \r\n                <br/>\r\n\r\n                <button type=\"button\" className=\"btn-link\" onClick={handleDeleteUIElm}>Delete</button>\r\n\r\n                <button type=\"button\" className=\"btn-link\" onClick={handleUpdateCSS}>Update CSS</button>\r\n\r\n                <button type=\"button\" className=\"btn-link\" onClick={() => selectedUi('PARENT')} >Change Parent</button>\r\n\r\n                <button type=\"button\" className=\"btn-link\" onClick={updateGridProperty} >Update Grid Property</button>\r\n\r\n              </div>\r\n\r\n              <div className=\"tree\">\r\n                <UITree uiTreeLst={actualUiTree} />\r\n              </div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </>\r\n    );\r\n\r\n\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n\r\n}\r\n\r\nexport default UIDesign;\r\n","\r\nimport { generateUUID, compressBase64, decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nexport const GetExpressiontree = async (ScrId, GroupId) => {\r\n\r\n   let Response;\r\n\r\n   const ExpressionTree = apiendpoints.GetExpTree;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Exp Tree\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: ScrId, txtExprGroupId: GroupId }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   const reqHdr = { };\r\n   const combonurl = ExpressionTree;\r\n\r\n   await api.post(combonurl, compressBase64(data), reqHdr).then(function (response) {\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n      Response = strResponse;\r\n   })\r\n\r\n\r\n   // var indent = '~~~~~~~~~~~~~~~~~~~~';\r\n\r\n   // const listToTree = (arr = []) => {\r\n   //    let map = {}, node, node1, res = [], i, arr1 = [], obj = {}, children = [];\r\n\r\n   //    for (i = 0; i < arr.length; i += 1) {\r\n\r\n   //       var exprStr = \"\";\r\n\r\n   //       var indentSpace = indent.substring(0, arr[i].lvl).replace(/~/gi, \"&nbsp;&nbsp;&nbsp;\")\r\n\r\n   //       if (arr[i].exprntyid != 1) {\r\n   //          exprStr += \"<span style='color:blue;' >\" + indentSpace + arr[i].exprnty + \"</span>\";\r\n   //          if (arr[i].exprntyid != 3) {\r\n   //             exprStr += \"(\"\r\n   //          }\r\n   //          exprStr += \"<span style='color:maroon;' >\" + arr[i].exprn + \"</span>\";\r\n\r\n   //          if (arr[i].exprntyid == 21) {\r\n   //             exprStr += '-' + arr[i].stgname\r\n   //          }\r\n\r\n   //          if (arr[i].exprntyid != 3) {\r\n   //             exprStr += \")\"\r\n   //          }\r\n   //       }\r\n   //       else {\r\n   //          exprStr += indentSpace + arr[i].exprn;\r\n   //       }\r\n\r\n\r\n   //       map[arr[i].exprnid] = i;\r\n\r\n\r\n   //       obj = { id: arr[i].exprnid, name: exprStr, fixMenu: true, children: children }\r\n   //       arr1 = [...arr1, obj]\r\n   //       arr1[i].children = [];\r\n   //       if (arr[i].prexprnid == null) {\r\n   //          arr[i].prexprnid = 0;\r\n   //       }\r\n\r\n\r\n   //    };\r\n\r\n\r\n   //    for (i = 0; i < arr.length; i += 1) {\r\n   //       node = arr[i];\r\n   //       node1 = arr1[i];\r\n   //       if (node.prexprnid !== 0) {\r\n   //          console.log(arr1[i]);\r\n   //          arr1[map[node.prexprnid]].fixMenu = false;\r\n   //          arr1[map[node.prexprnid]].children.push(node1);\r\n   //       }\r\n   //       else {\r\n   //          res.push(node1);\r\n   //       };\r\n   //    };\r\n   //    return res;\r\n   // };\r\n\r\n\r\n   // const menutree = listToTree(Response.body.expressions)\r\n\r\n   // console.log(menutree)\r\n\r\n   return Response;\r\n\r\n};\r\n\r\nexport const GetEventTree = async (ScrId) => {\r\n\r\n   let Response;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Event Tree\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: ScrId }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   console.log('frmData', frmData)\r\n   const reqHdr = {  };\r\n\r\n   await api.post(apiendpoints.Evtree, compressBase64(data), reqHdr).then(function (response) {\r\n      Response = JSON.parse(decompressBase64(response.data));\r\n   })\r\n\r\n   var indent = '~~~~~~~~~~~~~~~~~~~~';\r\n\r\n   const listToTree = (arr = []) => {\r\n      let map = {}, node, node1, res = [], i, arr1 = [], obj = {}, children = [];\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n\r\n         var exprStr = \"\";\r\n\r\n         var indentSpace = indent.substring(0, arr[i].lvl).replace(/~/gi, \"&nbsp;&nbsp;&nbsp;\")\r\n\r\n         exprStr += indentSpace + \"<span style='color:blue;'>\";\r\n\r\n\r\n         if (arr[i].flag == 1)\r\n            exprStr += \"Stg-\";\r\n         else if (arr[i].flag == 2)\r\n            exprStr += \"Evn-\";\r\n         else if (arr[i].flag == 3)\r\n            exprStr += \"ExGr-\";\r\n         else\r\n            exprStr += \"\";\r\n\r\n         exprStr += \"</span>\" + arr[i].leaf;\r\n\r\n         map[arr[i].id] = i;\r\n\r\n         obj = { id: arr[i].id, name: exprStr, fixMenu: true, children: children }\r\n         arr1 = [...arr1, obj]\r\n         arr1[i].children = [];\r\n         if (arr[i].prntid == null) {\r\n            arr[i].prntid = 0;\r\n         }\r\n\r\n      };\r\n\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n         node = arr[i];\r\n         node1 = arr1[i];\r\n         if (node.prntid !== 0) {\r\n            console.log(arr1[i]);\r\n            arr1[map[node.prntid]].fixMenu = false;\r\n            arr1[map[node.prntid]].children.push(node1);\r\n         }\r\n         else {\r\n            res.push(node1);\r\n         };\r\n      };\r\n      return res;\r\n   };\r\n\r\n\r\n   const menutree = listToTree(Response.body.expressions)\r\n\r\n   console.log(menutree)\r\n\r\n   return { data: { menutree: menutree, expresponse: Response.body.expressions } };\r\n\r\n\r\n\r\n};\r\n\r\n\r\nexport const GetUIDesignTree = async (ScrId, StgId) => {\r\n\r\n   let Response;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Get Stg UI Design\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: ScrId, cmbStgId: StgId }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   console.log('frmData', frmData)\r\n   const reqHdr = { };\r\n\r\n   await api.post(apiendpoints.uidsgn, compressBase64(data), reqHdr).then(function (response) {\r\n      Response = JSON.parse(decompressBase64(response.data));\r\n   })\r\n\r\n   var indent = '~~~~~~~~~~~~~~~~~~~~';\r\n\r\n   const listToTree = (arr = []) => {\r\n      let map = {}, node, node1, res = [], i, arr1 = [], obj = {}, children = [];\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n\r\n         var exprStr = \"\";\r\n\r\n         var indentSpace = indent.substring(0, arr[i].lvl).replace(/~/gi, \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\")\r\n\r\n         exprStr += indentSpace + arr[i].uiexprn;\r\n\r\n         map[arr[i].uidsgnid] = i;\r\n\r\n         obj = { id: arr[i].uidsgnid, name: exprStr, fixMenu: true, children: children }\r\n         arr1 = [...arr1, obj]\r\n         arr1[i].children = [];\r\n         if (arr[i].prntid == null) {\r\n            arr[i].prntid = 0;\r\n         }\r\n\r\n      };\r\n\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n         node = arr[i];\r\n         node1 = arr1[i];\r\n         if (node.prntid !== 0) {\r\n            console.log(arr1[i]);\r\n            arr1[map[node.prntid]].fixMenu = false;\r\n            arr1[map[node.prntid]].children.push(node1);\r\n         }\r\n         else {\r\n            res.push(node1);\r\n         };\r\n      };\r\n      return res;\r\n   };\r\n\r\n   const uitree  = listToTree(Response.body.uidsgn)\r\n   return { data: { uitree: uitree, actualUiTree : Response.body.uidsgn } };\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const data = [\r\n//   {\r\n//     id: 1,\r\n//     name: 'Node 1',\r\n//     children: [\r\n//       {\r\n//         id: 2,\r\n//         name: 'Node 1.1',\r\n//         children: [\r\n//           {\r\n//             id: 3,\r\n//             name: 'Node 1.1.1',\r\n//             children: []\r\n//           }\r\n//         ]\r\n//       },\r\n//       {\r\n//         id: 4,\r\n//         name: 'Node 1.2',\r\n//         children: []\r\n//       }\r\n//     ]\r\n//   },\r\n//   {\r\n//     id: 5,\r\n//     name: 'Node 2',\r\n//     children: [\r\n//       {\r\n//         id: 6,\r\n//         name: 'Node 2.1',\r\n//         children: []\r\n//       },\r\n//       {\r\n//         id: 7,\r\n//         name: 'Node 2.2',\r\n//         children: []\r\n//       }\r\n//     ]\r\n//   }\r\n// ];","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllStageList = async (screenid) => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllStage = apiendpoints.AllStage;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllStage\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {txtScreenId:screenid}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllStage;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n\r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n","import { generateUUID, compressBase64, decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nexport const GetElementList = async (screenid, stageid) => {\r\n\r\n\r\n   let Response;\r\n\r\n\r\n\r\n   const ElementList = apiendpoints.Elementlist;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Elementlist\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { scrid: screenid, stgid: stageid };\r\n   const data = { hdr: frmHdr, body: frmData };\r\n\r\n   const reqHdr = {};\r\n\r\n   const url = ElementList;\r\n   await api.post(url, compressBase64(data), reqHdr).then(function (response) {\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n      Response = strResponse;\r\n\r\n   })\r\n\r\n   return Response;\r\n\r\n};\r\n\r\nexport const GetElementDefValue = async (screenid, elmid) => {\r\n\r\n   let Response;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Element default value\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { scrid: screenid, txtElementId: elmid };\r\n   const data = { hdr: frmHdr, body: frmData };\r\n\r\n   console.log(frmData);\r\n   \r\n   const reqHdr = {};\r\n  \r\n   await api.post( apiendpoints.ElementDefaultValue, compressBase64(data), reqHdr).then(function (response) {\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n      Response = strResponse;\r\n\r\n   })\r\n\r\n   return Response;\r\n\r\n};\r\n"],"names":["apiendpoints","appsettings","schema","yup","shape","cmbStgId","required","UIDesign","_ref","ScrId","stageList","setStageList","useState","uiTypeList","setUITypes","elementList","setElementList","uiTree","setUiTree","actualUiTree","setActualUiTree","detailOpenIds","setDetailOpenIds","selectedFile","setSelectedFile","register","handleSubmit","getValues","setValue","formState","errors","reset","useForm","resolver","yupResolver","FetchAllStageList","async","StgList","GetAllStageList","body","Stages","filter","x","StageTypeId","FetchUITypes","Response","FetchCombodata","uit","FetchElementList","StgId","ElementLis","GetElementList","elements","FetchUITree","GetUIDesignTree","data","uitree","useEffect","callServer","frmData","tag","endPoint","reqHdr","reqdata","hdr","convid","generateUUID","orgid","vendid","response","api","post","compressBase64","resData","JSON","parse","decompressBase64","rst","setTimeout","toast","success","resetFormData","error","stringify","fdr","rstmsg","err","stageOnChange","e","target","value","copyUiDesign","window","confirm","fromStgId","toStgId","cmbScrId","cmbStgFrom","cmbStgTo","Cpystgui","ref","useRef","uiTypeOnChange","mbgElmArray","tf","ElementId","txtField","arrayVal","find","indexOf","push","index","splice","length","UIElmList","elmIds","Array","nCnt","_jsx","_Fragment","children","map","_jsxs","type","onClick","onChangeSelect","checked","ElmName","ParentElmName","onChangeMandatory","onChangeReadonly","UITree","_ref2","uiTreeLst","root","pruidsgnid","node","UINode","treenode","onToggle","id","nativeEvent","newState","ordChanged","_ref3","handleOnBlur","updateOrder","handleOnCheck","insertUI","seltUi","txtStgUiDesignId","txtParentStgUiId","cmbUItype","txtTag","txtClass","txtTagVal","txtElmIds","txtMElmIds","txtRElmIds","Updgrpuidsgn","callProperty","Upduidsgn","lstNode","uidsgnid","open","onChange","className","dangerouslySetInnerHTML","__html","uiexprn","setParentId","setValueToEdit","deleteUiTreeLeaf","upReorder","downReorder","onBlur","uityp","StgUiDesignId","Deluidsgn","Ord","txtOrd","UpdUiOrd","reOrder","dir","txtDirection","Reordui","elm","txtStgUiId","txtSelectedElm","txtMandatoryElm","txtReadonlyElm","txtPropElm","cbIsAddRow","cbIsCheckBox","cbIsFilter","cbIsManageBtns","resetElmSelect","cls","tagval","handleSetMandatory","handleSetReadonly","handleRemoveMandatory","handleRemoveReadonly","handleDeleteUIElm","handleUpdateCSS","css","flag","parentid","PropElm","txtProp","Upduiprop","updateGridProperty","isAddRow","isCheckBox","isFilter","isManageBtns","Updgrdprop","handleFileChange","event","files","OnFileUpladHandler","preventDefault","fileCtrl","current","filePath","fExt","allowedExtns","replace","eval","exec","MAX_FILE_SIZE","fileSizeKiloBytes","size","convID","frmHdr","scrdet","formData","FormData","console","log","append","token","localStorage","getItem","url","Uplduihtml","strResponse","message","onSubmitHandler","selectedUi","para","_errors$cmbStgId","onSubmit","autoComplete","htmlFor","StageId","StageName","v","k","disabled","readonly","name","elmList","GetExpressiontree","GroupId","ExpressionTree","GetExpTree","txtExprGroupId","combonurl","then","GetEventTree","Evtree","menutree","node1","i","arr","arguments","undefined","res","arr1","obj","exprStr","substring","lvl","leaf","fixMenu","prntid","listToTree","expressions","expresponse","uidsgn","AllStage","txtScreenId","screenid","headers","Authorization","stageid","ElementList","Elementlist","scrid","stgid","GetElementDefValue","elmid","txtElementId","ElementDefaultValue"],"sourceRoot":""}