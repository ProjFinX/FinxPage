{"version":3,"file":"static/js/442.09d6e086.chunk.js","mappings":"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","sources":["components/dynamicscreendefinition/ScreenMaster.js","components/utilities/apidataformatter.js","components/utilities/getallscreen.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// import \"font-awesome/css/font-awesome.min.css\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\n\r\nimport { GetAllScreenList } from \"../utilities/getallscreen\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Scrollbar } from \"react-scrollbars-custom\";\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../utilities/utils\";\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\nimport { getPostData } from \"../utilities/apidataformatter\";\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nconst CompanyId = localStorage.getItem(\"CompanyId\")\r\n\r\n\r\nconst schema = yup.object().shape({\r\n  txtScreenName: yup.string().required(\"Pls select Screen Name\"),\r\n});\r\n\r\n//rfce - command\r\nfunction ScreenMaster() {\r\n  // Const & Var\r\n\r\n  const [screenresbody, setscreenlistresbody] = useState([]);\r\n  const [alert, setAlert] = useState(\"\");\r\n  const [isLoading, setLoanding] = useState(false);\r\n  const [UserStatusMaster, setUserStatusMaster] = useState([]);\r\n  const [UserStatus, setUserStatus] = useState([]);\r\n  \r\n  const [screenid, setScreenid] = useState(0);\r\n  const [IsCustomScr, setIsCustomScr] = useState(false);\r\n\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    getValues,\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n\r\n\r\n  // General Function\r\n\r\n  const FetchAllScreenList = async () => {\r\n    const ScreenListResponse = await GetAllScreenList();\r\n    setscreenlistresbody(ScreenListResponse.body.Screens);\r\n\r\n    console.log(ScreenListResponse.body.Screens);\r\n\r\n  };\r\n\r\n  //   fetch combo values\r\n\r\n  \r\n  // Useeffect\r\n\r\n  useEffect(() => {\r\n    FetchAllScreenList();\r\n  }, []);\r\n\r\n  useEffect(() => {    \r\n  }, [IsCustomScr]);\r\n\r\n\r\n\r\n  // Event function start\r\n\r\n  const onSubmitHandler = async (data) => {\r\n     let scrpath= \"\";\r\n     let ScreenId = data.txtScreenId;\r\n    if(data.cbIsCustomScreen)\r\n       scrpath = data.txtCustScreenPath;\r\n\r\n       if(data.txtScreenId==undefined)\r\n         ScreenId = \"0\";\r\n\r\n    let frmData = {\r\n      txtScreenId: ScreenId,\r\n      txtScrName: data.txtScreenName,\r\n      cbIsActive: data.cbIsActive,\r\n      cbIsSubmit: data.cbIsSubmit,\r\n      cbIsSave: data.cbIsSave,\r\n      cbIsSaveClose: data.cbIsSaveClose,\r\n      cbIsClose: data.cbIsClose,\r\n      cbIsAction: data.cbIsAction,\r\n      cbIsCustomScreen: data.cbIsCustomScreen,\r\n      txtScrPath: scrpath\r\n    };\r\n\r\n    const UpdScreenMaster = apiendpoints.UpdScreenMaster;\r\n\r\n    setLoanding(true);\r\n\r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"cngusrstus\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n\r\n    console.log(reqdata);\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        UpdScreenMaster,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        setLoanding(false);\r\n      } else {\r\n        setTimeout(() => {\r\n          console.log(strResponse.fdr);\r\n          toast.success(\"Successfully updated\");\r\n          ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n          setTimeout(() => {\r\n            setAlert({\r\n              AlertType: \"null\",\r\n              message: \"null\",\r\n            });\r\n          }, 600);\r\n          ResetScreenValue();\r\n          FetchAllScreenList();          \r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      ShowAlert(\"Error\", \"Unable to process request\");\r\n      setLoanding(false);\r\n    }\r\n  }\r\n\r\n\r\n  const publishscreen = async() =>{\r\n\r\n    \r\n\r\n    let qdata = getValues();\r\n\r\n    let frmData = {};\r\n        frmData[\"scrid\"] = qdata.txtScreenId;\r\n        frmData[\"scrname\"] = qdata.txtScreenName;\r\n\r\n        const buildscrURL = apiendpoints.BuildScrn;\r\n        \r\n        frmData = getPostData(\"BuildScreen\", frmData);\r\n\r\n        const response = await api.post(buildscrURL, compressBase64(frmData));\r\n\r\n        let bldresp = JSON.parse(decompressBase64(response.data));\r\n\r\n\r\n       if(bldresp.hdr.rst ==\"SUCCESS\"){\r\n\r\n        \r\n        toast.success(\"Screen Published \");\r\n\r\n       }\r\n       else{\r\n        toast.error(\"Failed to Publish\")\r\n       }\r\n\r\n\r\n       \r\n\r\n  }\r\n\r\n\r\n  //---------------onSubmitHandler end------\r\n\r\n  \r\n\r\n  \r\n  function SetScreenValue(rowval)  \r\n  {\r\n  \r\n    // window.alert( rowval.IsActive);\r\n\r\n    reset({\r\n      txtScreenId: rowval.ScreenId, txtScreenName: rowval.ScrName,\r\n      cbIsActive: rowval.IsActive, cbIsCustomScreen: rowval.IsCustomScreen,\r\n      cbIsSubmit:rowval.IsSubmitCancel, cbIsSave:rowval.IsSave,\r\n      cbIsSaveClose:rowval.IsSaveClose, cbIsClose:rowval.IsClose,\r\n      cbIsAction:rowval.IsAction,\r\n      txtCustScreenPath: (rowval.ScrPath) ? rowval.ScrPath : ''\r\n    })\r\n\r\n    setScreenid(rowval.ScreenId)\r\n\r\n  }\r\n\r\n  function ResetScreenValue()  \r\n  {\r\n    reset({ txtScreenId: \"\", txtScreenName: \"\", txtCustScreenPath:\"\", cbIsActive:false,\r\n      cbIsCustomScreen:false, cbIsSubmit:false, cbIsSave:false, cbIsSaveClose:false,\r\n      cbIsClose:false, cbIsAction:false,\r\n     })    \r\n  }\r\n\r\n  const CheckboxhandleChange = (e) => {\r\n\r\n    if (e.target.value == true) {\r\n      setIsCustomScr(true)\r\n    }\r\n    else {\r\n      setIsCustomScr(false)\r\n    }\r\n\r\n  };\r\n  // Event Function End\r\n\r\n  // Main Function\r\n\r\n  const ShowAlert = (alertType, message) => {\r\n    setAlert({\r\n      AlertType: alertType,\r\n      message: message,\r\n    });\r\n  };\r\n\r\n  try {\r\n    return (\r\n      <>\r\n        <section className=\"vh-100\">\r\n          <div className=\"container h-100\">\r\n            {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\r\n                  <div className=\"col-lg-12 col-xl-11\"> */}\r\n            <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\r\n              <div className=\"card-header\">\r\n                <strong className=\"card-title\">Create New Screen</strong>\r\n              </div>\r\n              <div className=\"card-body p-md-5\">\r\n                {isLoading ? <Spinner></Spinner> : \"\"}\r\n                <Alerts alert={alert} />\r\n\r\n                <form\r\n                  onSubmit={handleSubmit(onSubmitHandler)}\r\n                  autocomplete=\"off\"\r\n                >\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <label htmlFor=\"txtScreenName\" className=\"form-label\">\r\n                          {\" \"}\r\n                          Screen Name\r\n                        </label>\r\n                        <input\r\n                          {...register(\"txtScreenName\")}\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                        />\r\n                        <p>{errors.txtScreenName?.message}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <label htmlFor=\"txtScreenId\" className=\"form-label\">\r\n                          {\" \"}\r\n                          Screen Id\r\n                        </label>\r\n                        <input\r\n                          {...register(\"txtScreenId\")}\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          disabled=\"disabled\"\r\n                          readonly=\"readonly\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    \r\n                    <div className=\"col-md-1\">\r\n                        <input {...register(\"cbIsActive\")} type=\"checkbox\" />\r\n                        {\" \"}<label htmlFor=\"cbIsActive\" className=\"form-label\">Active</label>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-2\">\r\n                        <input {...register(\"cbIsSubmit\")} type=\"checkbox\" />\r\n                        {\" \"}<label htmlFor=\"cbIsSubmit\" className=\"form-label\">Submit & Cancel</label>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-1\">\r\n                        <input {...register(\"cbIsSave\")} type=\"checkbox\" />\r\n                        {\" \"}<label htmlFor=\"cbIsSave\" className=\"form-label\">Save</label>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-2\">\r\n                        <input {...register(\"cbIsSaveClose\")} type=\"checkbox\"/>\r\n                        {\" \"}<label htmlFor=\"cbIsSaveClose\" className=\"form-label\">Save & Close</label>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-1\">\r\n                        <input {...register(\"cbIsClose\")} type=\"checkbox\"/>\r\n                        {\" \"}<label htmlFor=\"cbIsClose\" className=\"form-label\">Close</label>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-1\">\r\n                        <input {...register(\"cbIsAction\")} type=\"checkbox\" />\r\n                        {\" \"}<label htmlFor=\"cbIsAction\" className=\"form-label\">Action</label>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-2\">\r\n                      <input {...register(\"cbIsCustomScreen\")} type=\"checkbox\"\r\n                        onChange={(e) => { CheckboxhandleChange( { target: { value: e.target.checked } } ); } } />\r\n                      {\" \"}\r\n                      <label htmlFor=\"cbIsCustomScreen\" className=\"form-label\" >Is Custom Screen</label>\r\n                    </div>\r\n\r\n                  </div>\r\n                  \r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <label htmlFor=\"txtCustScreenPath\" className=\"form-label\">\r\n                          {\" \"}\r\n                          Custom Screen path\r\n                        </label>\r\n                        <input\r\n                          {...register(\"txtCustScreenPath\")}\r\n                          type=\"text\"\r\n                          className=\"form-control\"                         \r\n                          disabled= {(IsCustomScr)?false: true}                    \r\n                        />\r\n                        <p>{errors.txtCustScreenPath?.message}</p>\r\n                      </div>\r\n                    </div>\r\n                   \r\n                  </div>\r\n                  \r\n                  <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Submit\r\n                  </button>\r\n                  <button type=\"button\" className=\"btn m-3 btn-success\" onClick={() => publishscreen()}>\r\n                    Publish\r\n                  </button>\r\n                </form>\r\n              </div>\r\n\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Id</th>\r\n                    <th>Sreen</th>\r\n                    <th>Status</th>\r\n                    <th>Is Custom</th>\r\n                    <th>\r\n                      <button\r\n                        className=\"btn btn-success\"\r\n                        onClick={() => {\r\n                          ResetScreenValue();\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        <i className=\"bi bi-table\"></i> Add{\" \"}\r\n                      </button>\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {screenresbody.map((x) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>{x.ScreenId}</td>\r\n                        <td>{x.ScrName}</td>\r\n                        <td>{ x.IsActive? \"Active\":\"InActive\"\r\n                            }</td>\r\n                       \r\n                        <td>{ x.IsCustomScreen? \"YES\":\"NO\"\r\n                            }</td>\r\n                           <td>\r\n                          <button\r\n                            className=\"btn btn-primary\"\r\n                            onClick={() => {\r\n                              SetScreenValue(x);\r\n                            }}\r\n                          >\r\n                            {\" \"}\r\n                            <i className=\"bi bi-pen\"></i> Edit\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nexport default ScreenMaster;","import { generateUUID } from \"./utils\";\r\n\r\nexport function getPostData(tag, frmData, adTag, adData){\r\n\r\n    var frmHdr = {};\r\n    frmHdr[\"convid\"] = generateUUID();\r\n    frmHdr[\"tag\"] = tag;\r\n    frmHdr[\"orgid\"] = \"\"\r\n    frmHdr[\"vendid\"] = \"0\"\r\n\r\n    var data = {};\r\n    data[\"hdr\"] = frmHdr;\r\n    data[\"body\"] = frmData;\r\n    if (adData) {\r\n        data[adTag] = adData;\r\n    }\r\n\r\n    return data;\r\n\r\n}","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllScreenList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllScreen = apiendpoints.AllScreen;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllScreen\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllScreen;\r\n\r\n console.log(combonurl); \r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n"],"names":["apiendpoints","appsettings","schema","localStorage","getItem","yup","shape","txtScreenName","required","screenresbody","setscreenlistresbody","useState","alert","setAlert","isLoading","setLoanding","UserStatusMaster","setUserStatusMaster","UserStatus","setUserStatus","screenid","setScreenid","IsCustomScr","setIsCustomScr","register","handleSubmit","formState","errors","getValues","reset","useForm","resolver","yupResolver","FetchAllScreenList","async","ScreenListResponse","GetAllScreenList","body","Screens","console","log","useEffect","onSubmitHandler","scrpath","ScreenId","data","txtScreenId","cbIsCustomScreen","txtCustScreenPath","undefined","frmData","txtScrName","cbIsActive","cbIsSubmit","cbIsSave","cbIsSaveClose","cbIsClose","cbIsAction","txtScrPath","UpdScreenMaster","frmHdr","convid","generateUUID","tag","orgid","vendid","reqHdr","headers","Authorization","reqdata","hdr","response","api","post","compressBase64","strResponse","JSON","parse","decompressBase64","rst","ShowAlert","stringify","fdr","rstmsg","setTimeout","toast","success","AlertType","message","ResetScreenValue","err","error","alertType","_errors$txtScreenName","_errors$txtCustScreen","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Spinner","Alerts","onSubmit","autocomplete","htmlFor","type","disabled","readonly","onChange","e","target","value","CheckboxhandleChange","checked","onClick","qdata","buildscrURL","BuildScrn","getPostData","publishscreen","Table","striped","bordered","hover","map","x","ScrName","IsActive","IsCustomScreen","rowval","IsSubmitCancel","IsSave","IsSaveClose","IsClose","IsAction","ScrPath","adTag","adData","Response","AllScreen","combonurl","then"],"sourceRoot":""}