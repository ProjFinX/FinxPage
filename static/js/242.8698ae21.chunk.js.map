{"version":3,"file":"static/js/242.8698ae21.chunk.js","mappings":"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","sources":["components/utilities/getqxmap.js","components/dynamicscreendefinition/TableRowsEd.js","components/dynamicscreendefinition/EventDefiner.js","components/utilities/getScrexpresiontree.js","components/utilities/getallscreen.js","components/utilities/geteventexpression.js","components/utilities/getscrengrpelms.js"],"sourcesContent":["import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\n\n\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const Getqxmap = async (screenid,SeExprnId) => {\n\n\nlet Response;\n\n\n\nconst getqxmapami = apiendpoints.Getqxmap;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"getqxmap\", orgid: \"\", vendid: \"0\" };\n const frmData = {cmbScrId:screenid,txtSeExprnId:SeExprnId}\n const data = { hdr: frmHdr, body: frmData };\n\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const url = getqxmapami;\n\n await api.post(url, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));      \n\n    console.log(strResponse);\n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n","\r\n\r\nfunction TableRows({rowsData, deleteTableRows, handleChange,combodata}) {        \r\n \r\n    return(\r\n        \r\n\r\n       \r\n        rowsData.map((data, index)=>{\r\n            const {cmbElmId, txtColIdx}= data;\r\n            return(\r\n\r\n                <tr key={index}>\r\n                <td>  \r\n\r\n                <select\r\n                        \r\n                      \r\n                        className=\"form-control\"\r\n                        value={cmbElmId} onChange={(evnt)=>(handleChange(index, evnt))} name=\"cmbElmId\" \r\n                      >\r\n                        {<option value=\"0\">-select-</option>}\r\n                        {\r\n                          //Combo Data binding\r\n                          combodata &&\r\n                          combodata.map((res) => (\r\n                            <option key={res.v} value={res.k}>\r\n                              {res.v}\r\n                            </option>\r\n                          ))\r\n                        }\r\n                      </select>\r\n                </td>\r\n                <td><input type=\"text\" value={txtColIdx}  onChange={(evnt)=>(handleChange(index, evnt))} name=\"txtColIdx\" className=\"form-control\"/> </td>\r\n\r\n                <td><button className=\"btn btn-outline-danger\" onClick={()=>(deleteTableRows(index))}>x</button></td>\r\n            </tr>\r\n\r\n            )\r\n        })\r\n   \r\n    )\r\n    \r\n}\r\n\r\nexport default TableRows;","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// import \"font-awesome/css/font-awesome.min.css\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport { GetScreenGroupElms } from \"../utilities/getscrengrpelms\";\r\nimport { GetAllScreenList } from \"../utilities/getallscreen\";\r\nimport { GetExpGrpLst } from \"../utilities/geteventexpression\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Scrollbar } from \"react-scrollbars-custom\";\r\nimport { toast } from 'react-toastify';\r\nimport { GetExpressiontree} from \"../utilities/getScrexpresiontree\";\r\nimport { Getqxmap} from \"../utilities/getqxmap\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../utilities/utils\";\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport TableRows from \"./TableRowsEd\";\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nconst CompanyId = localStorage.getItem(\"CompanyId\")\r\n\r\n\r\nconst schema = yup.object().shape({\r\n  txtExpGroupName: yup.string().required(\"Pls provide Group Name\"),\r\n});\r\n\r\n//rfce - command\r\nfunction EventDefiner() {\r\n  // Const & Var\r\n\r\n  const [ExpGrpresbody, setExpGrpresbody] = useState([]);\r\n  const [alert, setAlert] = useState(\"\");\r\n  const [isLoading, setLoanding] = useState(false);\r\n  \r\n  const [Screenid, setScreenid] = useState(0);\r\n   const [screenfilterlist, setscreenfilterlist] = useState([]);\r\n  const [treedata, settreedata] = useState([]);\r\n  const [actualtreedata, setactualtreedata] = useState([]);\r\n  const [GroupExpid, setGroupExpid] = useState(0);\r\n\r\n  const [gridshow, setgridShow] = useState(false);\r\n  const gridhandleClose = () => setgridShow(false);\r\n  const gridhandleShow = () => setgridShow(true);\r\n\r\n  const [gridname, setgridname] = useState(\"\");\r\n\r\n  const [DBid, setDBid] = useState(0);\r\n  const [cmbctlres, setctlres] = useState([]);\r\n  const [ParentElementId, setParentElementId] = useState(100);\r\n  const [GroupElements, setGroupElements] = useState([]);\r\n  const [childelms, setscrchildelms] = useState([]);\r\n  const [ScExprnId, setScExprnId] = useState(0);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n\r\n\r\n  \r\n  \r\n\r\n\r\n  // General Function\r\n\r\n  const FetchAllScreenList = async () => {\r\n    const ScreenListResponse = await GetAllScreenList(); \r\n    setscreenfilterlist(ScreenListResponse.body.Screens.filter((res) => res.IsActive==true));\r\n  };\r\n\r\n\r\n  const FetchExpGrpList = async (screenid) => {   \r\n    const ExpGrpListResponse = await GetExpGrpLst(screenid);   \r\n     setExpGrpresbody(ExpGrpListResponse.body.expressions);\r\n   \r\n  };\r\n\r\n\r\n  const FetchExpGrpListtree = async (screenid,Groupid) => { \r\n    \r\n   //\r\n\r\n    const FetchExpGrpListtree = await GetExpressiontree(screenid,Groupid);   \r\n\r\n     const expreres =   FetchExpGrpListtree.data;   \r\n     settreedata(expreres.menutree);\r\n     setactualtreedata(expreres.expresponse);\r\n   \r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  //   fetch combo values\r\n\r\n  \r\n  const[resbody,setresbody]= useState([]);\r\n  const LoadCombo = async () => {\r\n      // Update state with incremented value\r\n\r\n      const opt = '|CTBL|SETM|';\r\n      const optw = '';\r\n  // \r\n\r\n  const Response = await FetchCombodata(opt,optw);\r\n\r\n      setctlres(Response.body.ctbl);\r\n      setresbody(Response.body.setm)\r\n      console.log(Response.body)\r\n  }; \r\n\r\n\r\n\r\n  \r\n  // Useeffect\r\n\r\n  useEffect(() => {\r\n    LoadCombo();\r\n    FetchAllScreenList();   \r\n  }, []);\r\n\r\n\r\n  \r\n\r\n  // Event function start\r\n\r\n\r\n  const ScreenOnChange = (e) => {   \r\n\r\n       reset({txtSeExprnId: \"\", txtParentSeExprnId: \"\",cmbSeExprType:0,txtExpression:\"\",txtExprGroupId:\"\"})          \r\n       setScreenid(e.target.value);\r\n       FetchExpGrpList(e.target.value);\r\n       settreedata([]);\r\n       FetchGroupElements(e.target.value);\r\n      \r\n       \r\n  };\r\n\r\n  const OnGroupIdChange = (e) => {\r\n    setParentElementId(e.target.value);\r\n    FetchScreenChildElements(e.target.value, Screenid);\r\n\r\n  };\r\n\r\n\r\n  const FetchScreenChildElements = async (parentelmid, scrid) => {\r\n    // Update state with incremented value\r\n     const opt = \"|DUELM|\";\r\n\r\n    const optw = {\r\n      DUELM: \"ScreenId=\" + scrid + \" and ParentElementId=\" + parentelmid,\r\n    };\r\n\r\n    const Response = await FetchCombodata(opt, optw);\r\n\r\n    console.log(Response);\r\n\r\n    setscrchildelms(Response.body.duelm);\r\n  };\r\n  //--------\r\n\r\n  const onDBChange = (e) => {   \r\n    setDBid(e.target.value);    \r\n  };\r\n\r\n\r\n  const FetchGroupElements = async (srid) => {\r\n    const GroupElmsResponse = await GetScreenGroupElms(srid);\r\n    console.log(GroupElmsResponse.body.elements);\r\n    setGroupElements(GroupElmsResponse.body.elements);\r\n  };\r\n\r\n    //--------------------------------------------------------------------------------------------------------\r\n\r\n    const ReorderExpression = async (SeExprnId,dir) => {\r\n      console.log(SeExprnId);\r\n  \r\n      let frmData = {cmbScrId:Screenid, txtExprGroupId:GroupExpid,txtSeExprnId:SeExprnId,txtDirection:dir};\r\n  \r\n      const convID = generateUUID();\r\n      const frmHdr = {\r\n        convid: convID,\r\n        tag: \"Reord\",\r\n        orgid: \"\",\r\n        vendid: \"0\",\r\n      };\r\n  \r\n      const token = localStorage.getItem(\"token\");\r\n      const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n      const reqdata = { hdr: frmHdr, body: frmData };\r\n      const Reord = apiendpoints.Reord;\r\n  \r\n  \r\n      try {\r\n        //\r\n        const response = await api.post(\r\n          Reord,\r\n          compressBase64(reqdata),\r\n          reqHdr\r\n        );\r\n  \r\n        const strResponse = JSON.parse(decompressBase64(response.data));\r\n  \r\n        if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n          toast.error(JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        } else {\r\n          toast.success(\"Reorder Successfully\");\r\n          reset({cmbScreenId:\"0\", txtSeExprnId: \"\", txtParentSeExprnId: \"0\",cmbSeExprType:0,txtExpression:\"\"})  \r\n          setExpGrpresbody([]);\r\n        }\r\n      } catch (err) {\r\n        toast.error(\"Unable to process request\");\r\n      }\r\n    };\r\n\r\n\r\n\r\n    const DeleteExpression = async (SeExprnId) => {\r\n      console.log(SeExprnId);\r\n  \r\n      let frmData = { cmbScrId:Screenid, txtExprGroupId:GroupExpid,txtSeExprnId:SeExprnId};\r\n  \r\n      const convID = generateUUID();\r\n      const frmHdr = {\r\n        convid: convID,\r\n        tag: \"DeleteExp\",\r\n        orgid: \"\",\r\n        vendid: \"0\",\r\n      };\r\n  \r\n      const token = localStorage.getItem(\"token\");\r\n      const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n      const reqdata = { hdr: frmHdr, body: frmData };\r\n      const Delexprn = apiendpoints.Delexprn;\r\n  \r\n  \r\n      try {\r\n        //\r\n        const response = await api.post(\r\n          Delexprn,\r\n          compressBase64(reqdata),\r\n          reqHdr\r\n        );\r\n  \r\n        const strResponse = JSON.parse(decompressBase64(response.data));\r\n  \r\n        if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n          toast.error(JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        } else {\r\n          toast.success(\"Deleted Successfully\"); \r\n          reset({cmbSeExprType:0,txtExpression:\"\"})  \r\n          FetchExpGrpListtree(Screenid,GroupExpid)\r\n         // setExpGrpresbody([]);\r\n        }\r\n      } catch (err) {\r\n        toast.error(\"Unable to process request\");\r\n      }\r\n    };\r\n\r\n    \r\n  // - Delete element\r\n\r\n  const DeleteGroup = async (rowval) => {\r\n    console.log(rowval);\r\n\r\n    let frmData = { cmbScrId:Screenid, txtExprGroupId:rowval.egid};\r\n\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"DeleteExpGroup\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n    const Delexprngrp = apiendpoints.Delexprngrp;\r\n\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        Delexprngrp,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        toast.error(JSON.stringify(strResponse.fdr[0].rstmsg));\r\n      } else {\r\n        toast.success(\"Deleted Successfully\");\r\n        setExpGrpresbody([]);\r\n        reset({ txtSeExprnId: \"\", txtParentSeExprnId: \"0\",cmbSeExprType:0,txtExpression:\"\"}) \r\n      }\r\n    } catch (err) {\r\n      toast.error(\"Unable to process request\");\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  const SaveExpressionValue = async (data) => {\r\n    \r\n\r\n    console.log(data);\r\n\r\n    \r\n    let frmData = { cmbScrId:data.cmbScreenId,txtExprGroupId:GroupExpid,txtSeExprTypeId:data.cmbSeExprType,\r\n                txtSeExprnId:data.txtSeExprnId,txtParentSeExprnId:data.txtParentSeExprnId,\r\n                txtExpression:data.txtExpression};\r\n\r\n         \r\n    const UpdateExpression = apiendpoints.UpdateExpression;\r\n\r\n\r\n    console.log(frmData);\r\n\r\n    setLoanding(true);\r\n\r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"UpdateExpression\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n\r\n    console.log(reqdata);\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        UpdateExpression,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        setLoanding(false);\r\n      } else {\r\n        setTimeout(() => {\r\n          console.log(strResponse.fdr);\r\n          ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n          toast.success(\"Successfully expression updated\");\r\n          setTimeout(() => {\r\n            setAlert({\r\n              AlertType: \"null\",\r\n              message: \"null\",\r\n            });\r\n          }, 600);\r\n\r\n          // ResetScreenValue();\r\n           FetchExpGrpListtree(data.cmbScreenId,GroupExpid)\r\n         // setScreenid(data.cmbScreenId);\r\n         // FetchExpGrpList(data.txtExprGroupId);\r\n         \r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      ShowAlert(\"Error\", \"Unable to process request\");\r\n      setLoanding(false);\r\n    }       \r\n\r\n\r\n\r\n  }\r\n\r\n  const onSubmitHandler = async (data) => {\r\n    \r\n    \r\n       if(data.txtExpGroupName==undefined)\r\n          return;\r\n\r\n    let frmData = { cmbScrId:data.cmbScreenId, txtExprGroupId:data.txtExprGroupId,txtSeExpGroupName:data.txtExpGroupName};\r\n\r\n    const updExpressionGroup = apiendpoints.UpdExpressionGroup;\r\n\r\n\r\n\r\n\r\n\r\n    setLoanding(true);\r\n\r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"updExpressionGroup\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n\r\n    console.log(reqdata);\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        updExpressionGroup,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        setLoanding(false);\r\n      } else {\r\n        setTimeout(() => {\r\n          console.log(strResponse.fdr);\r\n          ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n          toast.success(\"Successfully updated\");\r\n          setTimeout(() => {\r\n            setAlert({\r\n              AlertType: \"null\",\r\n              message: \"null\",\r\n            });\r\n          }, 600);\r\n          // ResetScreenValue();\r\n\r\n\r\n       \r\n          setScreenid(data.cmbScreenId);\r\n          FetchExpGrpList(data.txtExpGroupId);\r\n          FetchExpGrpListtree(data.cmbScreenId,data.txtExpGroupId)\r\n\r\n          setLoanding(false);\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      ShowAlert(\"Error\", \"Unable to process request\");\r\n      setLoanding(false);\r\n    }\r\n  }\r\n\r\n\r\n  //---------------onSubmitHandler end------\r\n\r\n  \r\n  function AddParentExpression(rowval)  \r\n  {\r\n    reset({ txtSeExprnId: \"\", txtParentSeExprnId: \"0\",cmbSeExprType:0,txtExpression:\"\"})  \r\n  }\r\n  \r\n  function SetScreenValue(rowval)  \r\n  {\r\n    console.log(rowval);\r\n    FetchExpGrpListtree(Screenid,rowval.egid)\r\n   \r\n    reset({ txtExprGroupId: rowval.egid, txtExpGroupName: rowval.egname,txtSeExprnId: \"\", txtParentSeExprnId: \"\",cmbSeExprType:0,txtExpression:\"\"}) \r\n    setGroupExpid(rowval.egid)\r\n  }\r\n\r\n  function ResetScreenValue()  \r\n  {\r\n    \r\n    reset({cmbScreenId:\"0\" , txtExprGroupId: \"\", txtExpGroupName: \"\",txtSeExprnId: \"\", txtParentSeExprnId: \"\",cmbSeExprType:0,txtExpression:\"\"})    \r\n    settreedata([]);\r\n\r\n\r\n\r\n  }\r\n\r\n  \r\n  // Event Function End\r\n\r\n  // Main Function\r\n\r\n  const ShowAlert = (alertType, message) => {\r\n    setAlert({\r\n      AlertType: alertType,\r\n      message: message,\r\n    });\r\n  };\r\n\r\n\r\n  // popup table methods\r\n\r\n  const [rowsData, setRowsData] = useState([]);\r\n\r\n  const addTableRows = () => {\r\n    const rowsInput = {\r\n      cmbElmId: \"\",\r\n      txtColIdx: \"\",\r\n     \r\n    };\r\n    setRowsData([...rowsData, rowsInput]);     \r\n\r\n   \r\n\r\n  };\r\n\r\n\r\n  const deleteTableRows = (index) => {\r\n    const rows = [...rowsData];\r\n    rows.splice(index, 1);\r\n    setRowsData(rows);\r\n  };\r\n\r\n  const handleChange = (index, evnt) => {\r\n    const { name, value } = evnt.target;\r\n    const rowsInput = [...rowsData];\r\n    rowsInput[index][name] = value;\r\n    setRowsData(rowsInput);\r\n  };\r\n\r\n  \r\n\r\n  // Popup submit\r\n\r\n  const onGridModalSubmitHandler = async (data) => {\r\n   \r\n    let frmData = { cmbScrId:data.cmbScreenId,txtSeExprnId:data.txtpopupScexpnId, cmbCompDbId:data.cmbDbShortName,cmbElmGrpId:data.CmbGrpElementId,\r\n          cmbBindTy:data.txtBindingType, map:rowsData};\r\n\r\n    const UpdateQxMap = apiendpoints.UpdateQxMap;\r\n\r\n    console.log(frmData);\r\n\r\n\r\n    \r\n    setLoanding(true);\r\n\r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"UpdateQxMap\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n\r\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n\r\n    console.log(reqdata);\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        UpdateQxMap,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      console.log(strResponse);\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n          ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n          setLoanding(false);\r\n      } else {\r\n        setTimeout(() => {\r\n          console.log(strResponse.fdr);\r\n          ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\r\n          toast.success(\"Successfully updated\");\r\n          setTimeout(() => {\r\n            setAlert({\r\n              AlertType: \"null\",\r\n              message: \"null\",\r\n            });\r\n          }, 600);\r\n          // ResetScreenValue();\r\n       \r\n           setRowsData([]) \r\n           reset({txtpopupScexpnId:\"\", cmbDbShortName: \"\", CmbGrpElementId: \"\",txtBindingType: \"\"})                    \r\n           setLoanding(false);\r\n           setgridShow(false)\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      ShowAlert(\"Error\", \"Unable to process request\");\r\n      setLoanding(false);\r\n    }\r\n\r\n\r\n\r\n  }\r\n  //--Grid submit -end\r\n\r\n  function tableToJson(table) {\r\n    try {\r\n      var data = []; // first row needs to be headers\r\n      var headers = [];\r\n      for (var i = 0; i < table.rows[0].cells.length; i++) {\r\n        if (\r\n          table.rows[0].cells[i].innerHTML.toLowerCase().indexOf(\"button\") == \"-1\"\r\n        ) {\r\n          headers[i] = table.rows[0].cells[i].innerHTML.replace(/ /gi, \"\");\r\n        }\r\n      }\r\n      // go through cells\r\n      for (var i = 1; i < table.rows.length; i++) {\r\n        var tableRow = table.rows[i];\r\n        var rowData = {};\r\n        for (var j = 0; j < tableRow.cells.length - 1; j++) {\r\n          rowData[headers[j]] = fetchstringinputboxvalue(\r\n            tableRow.cells[j].innerHTML\r\n          );\r\n        }\r\n        data.push(rowData);\r\n      }\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(err.message);\r\n    }\r\n  }\r\n\r\n    function fetchstringinputboxvalue(str)\r\n    {\r\n      var val ;   \r\n      val = (str.substr(str.indexOf('value'),500).replace(\"value=\",\"\")).replace(\">\",\"\")                    \r\n\r\n      return val.replace('\"',\"\").replace('\"',\"\").trimEnd(); ;\r\n    }\r\n\r\n\r\n  \r\n\r\n  const TreeNode = ({ node }) => {\r\n\r\n    const hasChildren = node.children.length > 0;\r\n\r\n    const handleAdd = () => {\r\n      // Add logic here for handling add button click\r\n      console.log(`Add clicked for node ${node.id}`);\r\n\r\n      var value = actualtreedata.filter(function(item) {\r\n        return item.exprnid == node.id\r\n      })\r\n  \r\n      console.log(value);\r\n      var aryval = value[0]\r\n\r\n      reset({ txtParentSeExprnId: aryval.exprnid })   \r\n    };\r\n  \r\n    const handleEdit = () => {\r\n      // Add logic here for handling edit button click\r\n      console.log(`Edit clicked for node ${node.id}`);\r\n    \r\n\r\n        var value = actualtreedata.filter(function(item) {\r\n          return item.exprnid == node.id\r\n        })\r\n    \r\n        console.log(value);\r\n        var aryval = value[0]\r\n\r\n        reset({ txtSeExprnId: aryval.exprnid, txtParentSeExprnId: aryval.prexprnid,cmbSeExprType:aryval.exprntyid,txtExpression:aryval.exprn })    \r\n\r\n    };\r\n\r\n    const handleDelete = () => {\r\n      \r\n      var value = actualtreedata.filter(function(item) {\r\n        return item.exprnid == node.id\r\n      })\r\n  \r\n      console.log(value);\r\n      var aryval = value[0]\r\n      DeleteExpression(aryval.exprnid)\r\n      \r\n    };\r\n\r\n    const handleUp = () => {\r\n      \r\n      var value = actualtreedata.filter(function(item) {\r\n        return item.exprnid == node.id\r\n      })\r\n  \r\n      console.log(value);\r\n      var aryval = value[0];\r\n      var dir = \"U\";\r\n      ReorderExpression(aryval.exprnid,dir)\r\n      \r\n    };\r\n\r\n    const handleDown = () => {\r\n      \r\n      var value = actualtreedata.filter(function(item) {\r\n        return item.exprnid == node.id\r\n      })\r\n  \r\n      console.log(value);\r\n      var aryval = value[0]\r\n      var dir = \"D\";\r\n      ReorderExpression(aryval.exprnid,dir)\r\n      \r\n    };\r\n  \r\n\r\n    // Popup  window event\r\n\r\n    const handlepopup =async() => {\r\n      \r\n        FetchScreenChildElements(0, Screenid);\r\n\r\n      var value = actualtreedata.filter(function(item) {\r\n        return item.exprnid == node.id\r\n       })\r\n      var aryval = value[0]\r\n      setScExprnId(aryval.exprnid)   \r\n      reset({ txtpopupScexpnId: aryval.exprnid})   \r\n      console.log(aryval.exprnid);\r\n\r\n     \r\n          \r\n     \r\n      if (ScExprnId!=aryval.exprnid)\r\n      {\r\n         setRowsData([])        \r\n      \r\n        const qxmpresponse= await Getqxmap(Screenid,aryval.exprnid);\r\n      \r\n        console.log(qxmpresponse);\r\n        if (qxmpresponse.body.expdet !=undefined)\r\n        {      \r\n           \r\n          reset({cmbDbShortName: qxmpresponse.body.expdet.compdbid, txtBindingType: qxmpresponse.body.expdet.bindty,\r\n                                                                   CmbGrpElementId:qxmpresponse.body.expdet.elmgrpid})           \r\n\r\n        }\r\n        \r\n       \r\n\r\n        if (qxmpresponse.body.expmap !=undefined)\r\n        {  \r\n         \r\n            qxmpresponse.body.expmap.forEach(function (itm) {    \r\n            const rowsInput = {\r\n              cmbElmId: itm.elmid,\r\n              txtColIdx: itm.colnaidx,             \r\n            };\r\n            addTableRows() \r\n            setRowsData([...rowsData, rowsInput]);\r\n          }\r\n          )\r\n        }\r\n  \r\n       \r\n      }\r\n     \r\n      gridhandleShow();\r\n\r\n    };\r\n\r\n\r\n\r\n      \r\n\r\n\r\n  \r\n  \r\n    return (\r\n\r\n      <div>\r\n\r\n  \r\n         <div className=\"row\">\r\n         <div className=\"col-sm\">\r\n         <div className=\"mb-3\">\r\n         <span >  <span className=\"content\" dangerouslySetInnerHTML={{__html: node.name}}></span> \r\n       \r\n                           \r\n        <button  onClick={handleAdd} class=\"btn btn-light\"><i class=\"fa fa-plus\"></i></button>\r\n        <button onClick={handleEdit} class=\"btn btn-light\"><i class=\"fa fa-edit\"></i></button>\r\n        <button onClick={handleDelete} class=\"btn btn-light\"><i class=\"fa fa-trash-o\"></i></button> \r\n        <button onClick={handleUp} class=\"btn btn-light\"><i class=\"fa fa-arrow-up\"></i></button>\r\n        <button onClick={handleDown} class=\"btn btn-light\"><i class=\"fa fa-arrow-down\"></i></button>  \r\n        <button onClick={handlepopup} class=\"btn btn-light\"><i className=\"bi bi-grid\"></i></button>\r\n       \r\n\r\n         </span>\r\n        </div>\r\n        </div>\r\n       \r\n        </div>\r\n        \r\n\r\n        {hasChildren && (\r\n          <ul>\r\n            {node.children.map(childNode => (\r\n              <li key={childNode.id}>\r\n                <TreeNode node={childNode} />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n       \r\n      </div>\r\n    );\r\n  };\r\n  \r\n\r\n  try {\r\n    return (\r\n      <>\r\n        <section className=\"vh-100\">\r\n          <div className=\"container h-100\">\r\n            {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\r\n                  <div className=\"col-lg-12 col-xl-11\"> */}\r\n            <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\r\n              <div className=\"card-header\">\r\n                <strong className=\"card-title\">Event Definer </strong>\r\n              </div>\r\n              <div className=\"card-body p-md-5\">\r\n                {isLoading ? <Spinner></Spinner> : \"\"}\r\n                <Alerts alert={alert} />\r\n\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\">\r\n                      <form\r\n                        onSubmit={handleSubmit(onSubmitHandler)}\r\n                        autocomplete=\"off\"\r\n                      >\r\n                        <label htmlFor=\"cmbScreenId\" className=\"form-label\">\r\n                          Screen\r\n                        </label>\r\n                        <select\r\n                          {...register(\"cmbScreenId\")}\r\n                          className=\"form-control\"\r\n                          onChange={ScreenOnChange}\r\n                        >\r\n                          <option value=\"0\">- Select -</option>\r\n                          {\r\n                            //Combo Data binding\r\n\r\n                            screenfilterlist.map((res) => (\r\n                              <option key={res.ScreenId} value={res.ScreenId}>\r\n                                {res.ScrName}\r\n                              </option>\r\n                            ))\r\n                          }\r\n                        </select>\r\n                        <p>{errors.cmbScreenId?.message}</p>\r\n                        \r\n                        <label htmlFor=\"txtExpGroupName\" className=\"form-label\">\r\n                          {\" \"}\r\n                          Expression Group Name\r\n                        </label>\r\n                        <input\r\n                          {...register(\"txtExpGroupName\")}\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                        />\r\n                        <p>{errors.txtExpGroupName?.message}</p>\r\n                        <button type=\"submit\" className=\"btn btn-primary\">\r\n                          Save Group\r\n                        </button>\r\n                      \r\n                   <div className=\"row\">\r\n\r\n                   <div className=\"col-sm\">\r\n                          <div className=\"mb-3\">\r\n                            <label\r\n                              htmlFor=\"txtExprGroupId\"\r\n                              className=\"form-label\"\r\n                            >\r\n                              {\" \"}\r\n                              Exp. Group Id\r\n                            </label>\r\n                            <input\r\n                              {...register(\"txtExprGroupId\")}\r\n                              type=\"text\"\r\n                              className=\"form-control\"\r\n                              disabled=\"disabled\"\r\n                              readonly=\"readonly\"\r\n                            />\r\n                            <p>{errors.txtExprGroupId?.message}</p>\r\n                          </div>\r\n                        </div>\r\n\r\n              \r\n                  <div className=\"col-sm\">\r\n                          <div className=\"mb-3\">\r\n                            <label\r\n                              htmlFor=\"txtParentSeExprnId\"\r\n                              className=\"form-label\"\r\n                            >\r\n                              {\" \"}\r\n                              Parent Exp Id\r\n                            </label>\r\n                            <input\r\n                              {...register(\"txtParentSeExprnId\")}\r\n                              type=\"text\"\r\n                              className=\"form-control\"\r\n                              disabled=\"disabled\"\r\n                              readonly=\"readonly\"\r\n                            />\r\n                            <p>{errors.txtParentSeExprnId?.message}</p>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-sm\">\r\n                          <div className=\"mb-3\">\r\n                            <label\r\n                              htmlFor=\"txtSeExprnId\"\r\n                              className=\"form-label\"\r\n                            >\r\n                              {\" \"}\r\n                              Expression Id\r\n                            </label>\r\n                            <input\r\n                              {...register(\"txtSeExprnId\")}\r\n                              type=\"text\"\r\n                              className=\"form-control\"\r\n                              disabled=\"disabled\"\r\n                              readonly=\"readonly\"\r\n                            />\r\n                            <p>{errors.txtSeExprnId?.message}</p>\r\n                          </div>\r\n                        </div>\r\n                       \r\n\r\n                </div>\r\n                        <label htmlFor=\"scrid\" className=\"form-label\">\r\n                        Expression Type\r\n                      </label>\r\n\r\n                      <select\r\n                        {...register(\"cmbSeExprType\")}\r\n                        //value={DBid}\r\n                        className=\"form-control\"\r\n                         onChange={onDBChange}\r\n                      >\r\n                        {<option value=\"0\">-select-</option>}\r\n                        {\r\n                          //Combo Data binding\r\n\r\n                          resbody.map((res) => (\r\n                            <option key={res.v} value={res.k}>\r\n                              {res.v}\r\n                            </option>\r\n                          ))\r\n                        }\r\n                      </select>\r\n\r\n                      <p>{errors.cmbSeExprType?.message}</p>\r\n\r\n                      <label htmlFor=\"txtExpression\" className=\"form-label\">\r\n                        {\" \"}\r\n                        Expression\r\n                      </label>\r\n                      <textarea\r\n                        {...register(\"txtExpression\")}\r\n                        type=\"textarea\"\r\n                        height={20}\r\n                        className=\"form-control\"\r\n                      />\r\n\r\n                      <p>{errors.txtExpression?.message}</p>\r\n\r\n                      <button\r\n                        type=\"submit\"\r\n                        onClick={handleSubmit(SaveExpressionValue)}\r\n                        class=\"btn btn-primary\"\r\n                      >\r\n                        Save Expression\r\n                      </button>\r\n\r\n                       \r\n                </form>\r\n\r\n\r\n                      <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Exp Group Id</th>\r\n                    <th>Group Name</th>\r\n                    <th>\r\n                      <button\r\n                        className=\"btn btn-success\"\r\n                        onClick={() => {\r\n                          ResetScreenValue();\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        <i className=\"bi bi-table\"></i> Add{\" \"}\r\n                      </button>\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {ExpGrpresbody &&\r\n                    ExpGrpresbody.map((x) => {\r\n                      return (\r\n                        <tr>\r\n                          <td>{x.egid}</td>\r\n                          <td>{x.egname}</td>\r\n\r\n                          <td>\r\n                            <button\r\n                              className=\"btn btn-primary\"\r\n                              onClick={() => {\r\n                                SetScreenValue(x);\r\n                              }}\r\n                            >\r\n                              {\" \"}\r\n                              <i className=\"bi bi-pen\"></i>\r\n                            </button>\r\n                          </td>\r\n                          <td>\r\n                            <button\r\n                              className=\"btn btn-danger\"\r\n                              onClick={() => {\r\n                                DeleteGroup(x);\r\n                              }}\r\n                            >\r\n                              {\" \"}\r\n                              <i className=\"bi bi-trash\"></i>\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                </tbody>\r\n              </Table>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\">\r\n                    \r\n                      <button\r\n                        className=\"btn btn-success\"\r\n                        onClick={() => {\r\n                          AddParentExpression();\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        <i className=\"bi bi-table\"></i> Tree Root\r\n                      </button>\r\n                      <div>.</div>\r\n                      <div>\r\n                      \r\n                        <Scrollbar style={{ height: 700 }}>\r\n                  \r\n                        \r\n                          {treedata.map((node) => (\r\n                        \r\n                         <TreeNode key={node.id} node={node} />\r\n                         \r\n                          ))}\r\n                         \r\n                        \r\n                          \r\n                        </Scrollbar>\r\n                      </div>\r\n\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n              \r\n                <div className=\"row\">\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\"></div>\r\n                  </div>\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\">\r\n                      <div className=\"row\">\r\n                       \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\">\r\n                     \r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-sm\">\r\n                    <div className=\"mb-3\">\r\n                     \r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n          \r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n\r\n        <Modal\r\n          show={gridshow}\r\n          onHide={gridhandleClose}\r\n          size=\"xl\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>{gridname} Grid Property</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <form\r\n              \r\n              autocomplete=\"off\"\r\n            >\r\n              <div className=\"row\">\r\n\r\n                <div className=\"col-sm\">\r\n                <div className=\"mb-3\">\r\n                <label htmlFor=\"txtpopupScexpnId\" className=\"form-label\">\r\n                      \r\n                         Expression Id\r\n                      </label>\r\n                      <input\r\n                        value={ScExprnId}\r\n                        {...register(\"txtpopupScexpnId\")}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                      />\r\n                  <p>{errors.txtpopupScexpnId?.message}</p>\r\n                </div>\r\n              </div>\r\n\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                  <label htmlFor=\"scrid\" className=\"form-label\">\r\n                          DB short Name\r\n                        </label>\r\n\r\n                        <select\r\n                          {...register(\"cmbDbShortName\")}\r\n                          value={DBid}\r\n                          className=\"form-control\"  \r\n                          onChange={onDBChange}                      \r\n                        >\r\n                          {<option value=\"0\">-select-</option>}\r\n                          {                           \r\n                            cmbctlres.map((res) => (\r\n                              <option key={res.v} value={res.k}>\r\n                                {res.k}\r\n                              </option>\r\n                            ))\r\n                          }\r\n                        </select>\r\n                  </div>\r\n                </div>\r\n               \r\n\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                  <label\r\n                            htmlFor=\"CmbGrpElementId\"\r\n                            className=\"form-label\"\r\n                          >\r\n                            Group Element\r\n                          </label>\r\n\r\n                          <select\r\n                            value={ParentElementId}\r\n                            {...register(\"CmbGrpElementId\")}\r\n                            className=\"form-control\"  \r\n                            onChange={OnGroupIdChange}                          \r\n                          >\r\n                            {<option value=\"100\">-select-</option>}\r\n                            {GroupElements &&\r\n                              GroupElements.map((res) => (\r\n                                <option key={res.elna} value={res.elid}>\r\n                                  {res.elna}\r\n                                </option>\r\n                              ))}\r\n                          </select>\r\n\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"col-sm\">\r\n                  <div className=\"mb-3\">\r\n                  <label htmlFor=\"txtBindingType\" className=\"form-label\">\r\n                          {\" \"}\r\n                           Binding Type\r\n                        </label>\r\n                        <input\r\n                          {...register(\"txtBindingType\")}\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                        />\r\n                    <p>{errors.txtBindingType?.message}</p>\r\n                  </div>\r\n                </div>\r\n               \r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <table  id=\"tblgridprop\" className=\"table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Element</th>\r\n                      <th>Index/column Name</th>\r\n                      \r\n                      <th>\r\n                        <button type=\"button\"\r\n                          className=\"btn btn-outline-success\"\r\n                          onClick={() => addTableRows()}\r\n                        >\r\n                          +\r\n                        </button>\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <TableRows\r\n                      rowsData={rowsData}\r\n                      deleteTableRows={deleteTableRows}\r\n                      handleChange={handleChange}   \r\n                      combodata={childelms}                   \r\n                    />\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <div className=\"col-sm-4\"></div>\r\n\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={gridhandleClose}>\r\n                  Close\r\n                </Button>\r\n                <Button type=\"submit\"  onClick= {handleSubmit(onGridModalSubmitHandler)} variant=\"secondary\">\r\n                  Update \r\n                </Button>\r\n              </Modal.Footer>\r\n            </form>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nexport default EventDefiner;","\r\nimport { generateUUID, compressBase64, decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nexport const GetExpressiontree = async (ScrId, GroupId) => {\r\n\r\n   let Response;\r\n\r\n   const ExpressionTree = apiendpoints.GetExpTree;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Exp Tree\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: ScrId, txtExprGroupId: GroupId }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   const reqHdr = { };\r\n   const combonurl = ExpressionTree;\r\n\r\n   await api.post(combonurl, compressBase64(data), reqHdr).then(function (response) {\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n      Response = strResponse;\r\n   })\r\n\r\n\r\n   // var indent = '~~~~~~~~~~~~~~~~~~~~';\r\n\r\n   // const listToTree = (arr = []) => {\r\n   //    let map = {}, node, node1, res = [], i, arr1 = [], obj = {}, children = [];\r\n\r\n   //    for (i = 0; i < arr.length; i += 1) {\r\n\r\n   //       var exprStr = \"\";\r\n\r\n   //       var indentSpace = indent.substring(0, arr[i].lvl).replace(/~/gi, \"&nbsp;&nbsp;&nbsp;\")\r\n\r\n   //       if (arr[i].exprntyid != 1) {\r\n   //          exprStr += \"<span style='color:blue;' >\" + indentSpace + arr[i].exprnty + \"</span>\";\r\n   //          if (arr[i].exprntyid != 3) {\r\n   //             exprStr += \"(\"\r\n   //          }\r\n   //          exprStr += \"<span style='color:maroon;' >\" + arr[i].exprn + \"</span>\";\r\n\r\n   //          if (arr[i].exprntyid == 21) {\r\n   //             exprStr += '-' + arr[i].stgname\r\n   //          }\r\n\r\n   //          if (arr[i].exprntyid != 3) {\r\n   //             exprStr += \")\"\r\n   //          }\r\n   //       }\r\n   //       else {\r\n   //          exprStr += indentSpace + arr[i].exprn;\r\n   //       }\r\n\r\n\r\n   //       map[arr[i].exprnid] = i;\r\n\r\n\r\n   //       obj = { id: arr[i].exprnid, name: exprStr, fixMenu: true, children: children }\r\n   //       arr1 = [...arr1, obj]\r\n   //       arr1[i].children = [];\r\n   //       if (arr[i].prexprnid == null) {\r\n   //          arr[i].prexprnid = 0;\r\n   //       }\r\n\r\n\r\n   //    };\r\n\r\n\r\n   //    for (i = 0; i < arr.length; i += 1) {\r\n   //       node = arr[i];\r\n   //       node1 = arr1[i];\r\n   //       if (node.prexprnid !== 0) {\r\n   //          console.log(arr1[i]);\r\n   //          arr1[map[node.prexprnid]].fixMenu = false;\r\n   //          arr1[map[node.prexprnid]].children.push(node1);\r\n   //       }\r\n   //       else {\r\n   //          res.push(node1);\r\n   //       };\r\n   //    };\r\n   //    return res;\r\n   // };\r\n\r\n\r\n   // const menutree = listToTree(Response.body.expressions)\r\n\r\n   // console.log(menutree)\r\n\r\n   return Response;\r\n\r\n};\r\n\r\nexport const GetEventTree = async (ScrId) => {\r\n\r\n   let Response;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Event Tree\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: ScrId }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   console.log('frmData', frmData)\r\n   const reqHdr = {  };\r\n\r\n   await api.post(apiendpoints.Evtree, compressBase64(data), reqHdr).then(function (response) {\r\n      Response = JSON.parse(decompressBase64(response.data));\r\n   })\r\n\r\n   var indent = '~~~~~~~~~~~~~~~~~~~~';\r\n\r\n   const listToTree = (arr = []) => {\r\n      let map = {}, node, node1, res = [], i, arr1 = [], obj = {}, children = [];\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n\r\n         var exprStr = \"\";\r\n\r\n         var indentSpace = indent.substring(0, arr[i].lvl).replace(/~/gi, \"&nbsp;&nbsp;&nbsp;\")\r\n\r\n         exprStr += indentSpace + \"<span style='color:blue;'>\";\r\n\r\n\r\n         if (arr[i].flag == 1)\r\n            exprStr += \"Stg-\";\r\n         else if (arr[i].flag == 2)\r\n            exprStr += \"Evn-\";\r\n         else if (arr[i].flag == 3)\r\n            exprStr += \"ExGr-\";\r\n         else\r\n            exprStr += \"\";\r\n\r\n         exprStr += \"</span>\" + arr[i].leaf;\r\n\r\n         map[arr[i].id] = i;\r\n\r\n         obj = { id: arr[i].id, name: exprStr, fixMenu: true, children: children }\r\n         arr1 = [...arr1, obj]\r\n         arr1[i].children = [];\r\n         if (arr[i].prntid == null) {\r\n            arr[i].prntid = 0;\r\n         }\r\n\r\n      };\r\n\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n         node = arr[i];\r\n         node1 = arr1[i];\r\n         if (node.prntid !== 0) {\r\n            console.log(arr1[i]);\r\n            arr1[map[node.prntid]].fixMenu = false;\r\n            arr1[map[node.prntid]].children.push(node1);\r\n         }\r\n         else {\r\n            res.push(node1);\r\n         };\r\n      };\r\n      return res;\r\n   };\r\n\r\n\r\n   const menutree = listToTree(Response.body.expressions)\r\n\r\n   console.log(menutree)\r\n\r\n   return { data: { menutree: menutree, expresponse: Response.body.expressions } };\r\n\r\n\r\n\r\n};\r\n\r\n\r\nexport const GetUIDesignTree = async (ScrId, StgId) => {\r\n\r\n   let Response;\r\n\r\n   //  /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Get Stg UI Design\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: ScrId, cmbStgId: StgId }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   console.log('frmData', frmData)\r\n   const reqHdr = { };\r\n\r\n   await api.post(apiendpoints.uidsgn, compressBase64(data), reqHdr).then(function (response) {\r\n      Response = JSON.parse(decompressBase64(response.data));\r\n   })\r\n\r\n   var indent = '~~~~~~~~~~~~~~~~~~~~';\r\n\r\n   const listToTree = (arr = []) => {\r\n      let map = {}, node, node1, res = [], i, arr1 = [], obj = {}, children = [];\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n\r\n         var exprStr = \"\";\r\n\r\n         var indentSpace = indent.substring(0, arr[i].lvl).replace(/~/gi, \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\")\r\n\r\n         exprStr += indentSpace + arr[i].uiexprn;\r\n\r\n         map[arr[i].uidsgnid] = i;\r\n\r\n         obj = { id: arr[i].uidsgnid, name: exprStr, fixMenu: true, children: children }\r\n         arr1 = [...arr1, obj]\r\n         arr1[i].children = [];\r\n         if (arr[i].prntid == null) {\r\n            arr[i].prntid = 0;\r\n         }\r\n\r\n      };\r\n\r\n\r\n      for (i = 0; i < arr.length; i += 1) {\r\n         node = arr[i];\r\n         node1 = arr1[i];\r\n         if (node.prntid !== 0) {\r\n            console.log(arr1[i]);\r\n            arr1[map[node.prntid]].fixMenu = false;\r\n            arr1[map[node.prntid]].children.push(node1);\r\n         }\r\n         else {\r\n            res.push(node1);\r\n         };\r\n      };\r\n      return res;\r\n   };\r\n\r\n   const uitree  = listToTree(Response.body.uidsgn)\r\n   return { data: { uitree: uitree, actualUiTree : Response.body.uidsgn } };\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const data = [\r\n//   {\r\n//     id: 1,\r\n//     name: 'Node 1',\r\n//     children: [\r\n//       {\r\n//         id: 2,\r\n//         name: 'Node 1.1',\r\n//         children: [\r\n//           {\r\n//             id: 3,\r\n//             name: 'Node 1.1.1',\r\n//             children: []\r\n//           }\r\n//         ]\r\n//       },\r\n//       {\r\n//         id: 4,\r\n//         name: 'Node 1.2',\r\n//         children: []\r\n//       }\r\n//     ]\r\n//   },\r\n//   {\r\n//     id: 5,\r\n//     name: 'Node 2',\r\n//     children: [\r\n//       {\r\n//         id: 6,\r\n//         name: 'Node 2.1',\r\n//         children: []\r\n//       },\r\n//       {\r\n//         id: 7,\r\n//         name: 'Node 2.2',\r\n//         children: []\r\n//       }\r\n//     ]\r\n//   }\r\n// ];","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllScreenList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllScreen = apiendpoints.AllScreen;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllScreen\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllScreen;\r\n\r\n console.log(combonurl); \r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n","import { generateUUID, compressBase64, decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nexport const GetExpGrpLst = async (screenid) => {\r\n\r\n   let Response;\r\n\r\n   /* Header */\r\n   const convID = generateUUID();\r\n   const frmHdr = { convid: convID, tag: \"Expgroup\", orgid: \"\", vendid: \"0\" };\r\n   const frmData = { cmbScrId: screenid }\r\n   const data = { hdr: frmHdr, body: frmData };\r\n   const reqHdr = {};\r\n\r\n   try {\r\n\r\n      await api.post(apiendpoints.GetExpGrpLst, compressBase64(data), reqHdr).then(function (response) {\r\n         const strResponse = JSON.parse(decompressBase64(response.data));\r\n         Response = strResponse;\r\n      })\r\n\r\n      return Response;\r\n   }\r\n   catch (error) {\r\n      console.log(error); // Network E\r\n   }\r\n};\r\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\n\n\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetScreenGroupElms = async (cmbScrid) => {\n\n\nlet Response;\n\n\n\nconst screengroupelms = apiendpoints.Getscreengrpelms;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"Table List\", orgid: \"\", vendid: \"0\" };\n const frmData = {cmbScrid:cmbScrid}\n const data = { hdr: frmHdr, body: frmData };\n\n console.log(data); \n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n await api.post(screengroupelms, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));      \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n"],"names":["apiendpoints","appsettings","_ref","rowsData","deleteTableRows","handleChange","combodata","map","data","index","cmbElmId","txtColIdx","_jsxs","children","_jsx","className","value","onChange","evnt","name","res","k","v","type","onClick","schema","localStorage","getItem","yup","shape","txtExpGroupName","required","ExpGrpresbody","setExpGrpresbody","useState","alert","setAlert","isLoading","setLoanding","Screenid","setScreenid","screenfilterlist","setscreenfilterlist","treedata","settreedata","actualtreedata","setactualtreedata","GroupExpid","setGroupExpid","gridshow","setgridShow","gridhandleClose","gridname","setgridname","DBid","setDBid","cmbctlres","setctlres","ParentElementId","setParentElementId","GroupElements","setGroupElements","childelms","setscrchildelms","ScExprnId","setScExprnId","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","FetchExpGrpList","async","ExpGrpListResponse","GetExpGrpLst","screenid","body","expressions","FetchExpGrpListtree","Groupid","expreres","GetExpressiontree","menutree","expresponse","resbody","setresbody","useEffect","Response","FetchCombodata","ctbl","setm","console","log","LoadCombo","ScreenListResponse","GetAllScreenList","Screens","filter","IsActive","FetchAllScreenList","ScreenOnChange","e","txtSeExprnId","txtParentSeExprnId","cmbSeExprType","txtExpression","txtExprGroupId","target","FetchGroupElements","OnGroupIdChange","FetchScreenChildElements","parentelmid","scrid","optw","DUELM","duelm","onDBChange","GroupElmsResponse","GetScreenGroupElms","srid","elements","ReorderExpression","SeExprnId","dir","frmData","cmbScrId","txtDirection","frmHdr","convid","generateUUID","tag","orgid","vendid","reqHdr","headers","Authorization","reqdata","hdr","Reord","response","api","post","compressBase64","strResponse","JSON","parse","decompressBase64","rst","toast","error","stringify","fdr","rstmsg","success","cmbScreenId","err","SaveExpressionValue","txtSeExprTypeId","UpdateExpression","ShowAlert","setTimeout","AlertType","message","onSubmitHandler","undefined","txtSeExpGroupName","updExpressionGroup","UpdExpressionGroup","txtExpGroupId","alertType","setRowsData","addTableRows","rows","splice","rowsInput","onGridModalSubmitHandler","txtpopupScexpnId","cmbCompDbId","cmbDbShortName","cmbElmGrpId","CmbGrpElementId","cmbBindTy","txtBindingType","UpdateQxMap","TreeNode","node","hasChildren","length","dangerouslySetInnerHTML","__html","handleAdd","id","item","exprnid","aryval","class","handleEdit","prexprnid","exprntyid","exprn","handleDelete","Delexprn","DeleteExpression","handleUp","handleDown","qxmpresponse","getqxmapami","Getqxmap","url","then","expdet","compdbid","bindty","elmgrpid","expmap","forEach","itm","elmid","colnaidx","childNode","_errors$cmbScreenId","_errors$txtExpGroupNa","_errors$txtExprGroupI","_errors$txtParentSeEx","_errors$txtSeExprnId","_errors$cmbSeExprType","_errors$txtExpression","_errors$txtpopupScexp","_errors$txtBindingTyp","_Fragment","style","borderRadius","Spinner","Alerts","onSubmit","autocomplete","htmlFor","ScreenId","ScrName","disabled","readonly","height","Table","striped","bordered","hover","x","egid","egname","rowval","Delexprngrp","DeleteGroup","Scrollbar","Modal","show","onHide","size","centered","Header","closeButton","Title","Body","elid","elna","TableRows","Footer","Button","variant","ScrId","GroupId","ExpressionTree","GetExpTree","combonurl","GetEventTree","Evtree","node1","i","arr","arguments","arr1","obj","exprStr","substring","lvl","replace","flag","leaf","fixMenu","prntid","push","listToTree","GetUIDesignTree","StgId","cmbStgId","uidsgn","uitree","uiexprn","uidsgnid","actualUiTree","AllScreen","screengroupelms","Getscreengrpelms","cmbScrid"],"sourceRoot":""}