{"version":3,"file":"static/js/308.0e1f3686.chunk.js","mappings":"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","sources":["components/CommunicationDefiner/MailTmplAttachment.js","components/utilities/getsmtpmaster.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { FetchCombodata } from \"../utilities/combodata\";\nimport {\n\n  GetMailTemplateAttachmentList,  \n \n} from \"../utilities/getsmtpmaster\";\nimport api from \"../api/Webcall\";\nimport {\n  generateUUID,\n  compressLZW,\n  decompressLZW,\n  compressBase64,\n  decompressBase64,\n} from \"../utilities/utils\";\nimport Spinner from \"../htmlcomponents/Spinner\";\nimport Alerts from \"../htmlcomponents/Alerts\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Scrollbar } from \"react-scrollbars-custom\";\nimport Table from \"react-bootstrap/Table\";\n\nimport { toast } from 'react-toastify';\nimport appsettings from \"../../appsettings.json\"\nconst apiendpoints = appsettings.ApiEndpoints;\n\n// Yup validation schema\n\nconst schema = yup.object().shape({\n  txtTemplatename: yup\n    .string()\n    .required(\"Template name  can not be empty\") \n  \n});\n\n// Function Component Branch\n\nconst MailTmplAttachment = () => {\n  // Combo Data fetching------------------------------\n  const [smtplst, setsmtplst] = useState([]);\n  const [miltmpltlsbody, setmiltmpltlsresbody] = useState([]);\n  const [resbody, setresbody] = useState([]);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [MailTemplateId, setMailTemplateId] = useState(0);\n  const LoadCombo = async () => {\n    // Update state with incremented value\n\n    const opt = \"|MILTMP|\";\n    const optw = \"\";\n    // debugger;\n\n    const Response = await FetchCombodata(opt, optw); // JSON.stringify(await FetchCombodata(opt,optw));\n\n    setresbody(Response.body.miltmp);\n\n  };\n\n  useEffect(() => {       \n    LoadCombo();\n  }, []);\n\n  // Useeffect\n\n  //-----------------------------\n\n  const {\n    register,\n    getValues,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const [alert, setAlert] = useState(\"\");\n\n  const [isLoading, setLoanding] = useState(false);\n\n  \n  \n  function ResetScreenValue() {\n    reset({\n      filElements: \"\"       \n    });\n  }\n\n\n  \n  const handleFileChange = (event) => {\n    if (event.target.files.length > 0) {\n      setSelectedFile(event.target.files[0]);\n    }\n\n  };\n\n  const MailTemplateOnChange = (e) => {  \n    \n    setMailTemplateId(e.target.value);  \n    FetchMailTemplateAttachmentList(e.target.value)\n\n};\n\nconst DeleteTemplateAttachmentOnclick = (x) => {  \n \n       DeleteTemplateAttachment(x.attchid)\n};\n\n\n\n\n\n  const navigate = useNavigate();\n\n  \n  const FetchMailTemplateAttachmentList = async (MailTemplateId) => {\n    const MailTemplateAttachmentList = await GetMailTemplateAttachmentList(MailTemplateId);\n    console.log(JSON.stringify(MailTemplateAttachmentList));   \n    setmiltmpltlsresbody(MailTemplateAttachmentList.body.attachment);  \n  };\n\n  const DeleteTemplateAttachment = async (attchid) => {\n    \n    const convID = generateUUID();\n    const frmHdr = {\n      convid: convID,\n      tag: \"delmiltmltdoc\",\n      orgid: \"\",\n      vendid: \"0\",\n    };\n    \n    let MailTempltId = parseInt(MailTemplateId);\n    const frmData = {cmbMailTemplateId:MailTempltId,txtMailTmplAttchId:attchid}\n    const reqdata = { hdr: frmHdr, body: frmData };\n    const token = localStorage.getItem(\"token\");\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n    const updmiltmplt = apiendpoints.delmiltmltdoc;\n   \n    console.log(reqdata);\n\n    try {\n      //debugger;\n      const response = await api.post(updmiltmplt, compressBase64(reqdata), reqHdr);\n\n      const strResponse = JSON.parse(decompressBase64(response.data));   \n\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\n        //ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\n        toast.error(JSON.stringify(strResponse.fdr[0].rstmsg));\n        // setLoanding(false);\n      } else {\n        toast.success(\"Successfully updated\");\n        setTimeout(() => { }, 600);\n        // FetchEventtree(Screenid, StgId);\n         FetchMailTemplateAttachmentList(MailTempltId)\n         ResetScreenValue();\n      }\n    } catch (err) {\n      console.log(err.message);\n      toast.error(\"Unable to process request\");\n      //ShowAlert(\"Error\", \"Unable to process request\");\n      // setLoanding(false);\n    }\n  };\n\n  const ref = useRef();\n\n  const OnFileUpladHandler = async (e) => {\n    e.preventDefault(); // 👈️ prevent page refresh\n\n    var fileCtrl = ref.current.value;\n    var filePath = ref.current.value;\n    let MailTempltId = parseInt(MailTemplateId);\n\n    var fExt = \".html\";\n    var allowedExtns = fExt.replace(/\\,/g, \"|\");\n    allowedExtns = allowedExtns.replace(/\\./g, \"\\\\.\");\n    allowedExtns = \"/(\" + allowedExtns.replace(/ /g, \"\") + \")$/i;\";\n    allowedExtns = eval(allowedExtns);\n    if (!allowedExtns.exec(filePath)) {\n      toast.error(\"Invalid file type\");\n      ref.current.value = \"\";\n      return false;\n    }\n\n    const MAX_FILE_SIZE = 2048; // 2MB\n\n    if (!selectedFile) {\n      toast.error(\"Please choose a file\");\n      return false;\n    }\n\n    const fileSizeKiloBytes = selectedFile.size / 1024;\n\n    if (fileSizeKiloBytes > MAX_FILE_SIZE) {\n      toast.error(\"File size is greater than maximum limit\");\n      return false;\n    }\n\n    //e.preventDefault();\n    /* Header */\n    const convID = generateUUID();\n    const frmHdr = {\n      convid: convID,\n      tag: \"uploadfilelments\",\n      orgid: \"\",\n      vendid: \"0\",\n    };\n\n   \n\n    console.log(fileSizeKiloBytes);\n\n\n    \n    const tmpltDet = {};\n    tmpltDet[\"cmbMailTemplateId\"] = getValues(\"cmbMailTemplateId\");\n    \n    const formData = new FormData();\n    formData.append(\"tmpltdet\", JSON.stringify(tmpltDet));\n    formData.append(\"file\", selectedFile);\n\n    const token = localStorage.getItem(\"token\");\n\n    try {\n      const url = apiendpoints.upldmiltmltdoc;\n\n      let response = await api.post(url, formData);\n\n      let strResponse = JSON.parse(decompressBase64(response.data));\n\n      console.log(strResponse);\n\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\n        //ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\n        toast.error(JSON.stringify(strResponse.fdr[0].rstmsg));\n        // setLoanding(false);\n      } else {\n        toast.success(\"Successfully updated\");\n        setTimeout(() => { }, 600);\n        // FetchEventtree(Screenid, StgId);\n        FetchMailTemplateAttachmentList(MailTempltId)\n        ResetScreenValue();\n      }\n    } catch (err) {\n      console.log(err.message);\n      toast.error(\"Unable to process request\");\n      //ShowAlert(\"Error\", \"Unable to process request\");\n      // setLoanding(false);\n    }\n  };\n\n\n\n  const onSubmitHandler = async (data) => {\n    \n  };\n\n  const ShowAlert = (alertType, message) => {\n    setAlert({\n      AlertType: alertType,\n      message: message,\n    });\n  };\n\n  return (\n    <>\n      <section className=\"vh-100\">\n        <div className=\"container h-100\">\n          {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\n                  <div className=\"col-lg-12 col-xl-11\"> */}\n          <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\n            <div className=\"card-header\">\n              <strong className=\"card-title\">Mail Template Attachment</strong>\n            </div>\n            <div className=\"card-body p-md-5\">\n              {isLoading ? <Spinner></Spinner> : \"\"}\n              <Alerts alert={alert} />\n\n              <form onSubmit={handleSubmit(onSubmitHandler)} autocomplete=\"off\">\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                    <label htmlFor=\"cmbMailTemplateId\" className=\"form-label\">\n                        Template name\n                      </label>\n                      <select\n                        {...register(\"cmbMailTemplateId\") } onChange={MailTemplateOnChange}\n                        className=\"form-control\"\n                      >\n                        <option value=\"\">- Select -</option>\n                        {\n                          //Combo Data binding\n                          resbody &&\n                          resbody.map((res) => (\n                            <option key={res.k} value={res.k}>\n                             {res.v}\n                            </option>\n                          ))\n                        }\n                      </select>\n                      <p>{errors.cmbMailTemplateId?.message}</p>\n                    </div>\n                  </div>\n                 \n\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtMailTmpAttchId\" className=\"form-label\">\n                        {\" \"}\n                        Template Attachment Id\n                      </label>\n                      <input\n                        {...register(\"txtMailTmpAttchId\")}\n                        type=\"text\"\n                        disabled=\"disabled\"\n                        readonly=\"readonly\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtMailTmpAttchId?.message}</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                <div className=\"col-md-12\">\n\n                    <label htmlFor=\"filElements\" className=\"form-label\">UI Html File</label>\n                    <input type=\"file\" name=\"filElements\"  {...register(\"filElements\")}  onChange={handleFileChange}\n                     ref={ref} \n                       className=\"form-control\" />\n\n                    </div>\n\n                    <div className=\"col-md-12\">\n                    <button type=\"button\"\n                       onClick={OnFileUpladHandler}\n                      className=\"btn btn-primary mar-top-2em\">\n                      <span className=\"bi bi-upload\"></span> upload\n                    </button>\n                    </div>\n                </div>\n              \n              </form>\n            </div>\n            <Scrollbar style={{ width: 1200, height: 550 }}>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th className=\"text-center\">Id</th>\n                    <th className=\"text-center\">File Name</th>\n                  \n                    <th>\n                      <button\n                        className=\"btn btn-success\"\n                        onClick={() => {\n                         \n                        }}\n                      >\n                        {\" \"}\n                        <i className=\"bi bi-table\"></i> Add{\" \"}\n                      </button>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {miltmpltlsbody &&\n                    miltmpltlsbody.map((x) => {\n                      return (\n                        <tr>\n                          <td>{x.attchid}</td>\n                          <td>{x.filename}</td>                         \n                         \n                          <td>\n                            <button\n                              className=\"btn btn-primary\"   \n                              onClick={() => {\n                                DeleteTemplateAttachmentOnclick(x);\n                              }}                          \n                            >                             \n                              <i className=\"bi bi-pen\"></i> Delete\n                            </button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </Table>\n            </Scrollbar>\n          </div>\n          {/* </div>\n            </div> */}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default MailTmplAttachment;\n","import React, { useState, useEffect } from \"react\";\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const UpdSmtpMaster = async (x) => {\n\n\nlet Response;\nconst updscr  = apiendpoints.updscr ;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n\n let SmtpId = 0;\n if (x.txtSMTPId!=\"\")\n   SmtpId = x.txtSMTPId;\n\n\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"updscr\", orgid: \"\", vendid: \"0\" };\n const frmData = {  \"txtSmtpId\":SmtpId, \"txtHost\":x.txtHostname, \"cbIsSSL\":x.cbIsSSL, \"txtPortNo\":x.txtPort,\n                    \"txtEmail\":x.txtEmail, \"txtPwd\":x.txtPassword, \"cbIsActive\":x.cbIsActive }\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl = updscr;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n export const Getsmtplist = async () => {\n\n\nlet Response;\nconst smtplst = apiendpoints.smtplst;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"smtplst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl =smtplst;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n   \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\nexport const GetMailType = async () => {\n\n\n   let Response;\n   const smtplst = apiendpoints.smtplst;\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n   //  /* Header */\n    const convID = generateUUID();\n    const frmHdr = { convid: convID, tag: \"smtplst\", orgid: \"\", vendid: \"0\" };\n    const frmData = {}\n    const data = { hdr: frmHdr, body: frmData };\n   \n    const token =    localStorage.getItem('token');\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n   \n    const combonurl =smtplst;\n   \n    await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n       const strResponse = JSON.parse(decompressBase64(response.data));\n          \n          Response = strResponse ;\n   \n     })\n   \n     return  Response;\n   \n   };\n\n\n   export const GetMailTemplateList = async () => {\n\n\n      let Response;\n      const miltmpltlst = apiendpoints.miltmpltlst;\n       const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n      //  /* Header */\n       const convID = generateUUID();\n       const frmHdr = { convid: convID, tag: \"miltmpltlst\", orgid: \"\", vendid: \"0\" };\n       const frmData = {}\n       const data = { hdr: frmHdr, body: frmData };\n      \n       const token =    localStorage.getItem('token');\n       const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n      \n       const combonurl =miltmpltlst;\n      \n       await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n          const strResponse = JSON.parse(decompressBase64(response.data));\n         \n             Response = strResponse ;\n      \n        })\n      \n        return  Response;\n      \n      };\n\n\n      export const GetMailTemplateAttachmentList = async (MailTemplateId) => {\n\n\n         let Response;\n         const miltmpltlst = apiendpoints.miltmltdoclst;\n          const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n         //  /* Header */\n          const convID = generateUUID();\n          const frmHdr = { convid: convID, tag: \"miltmltdoclst\", orgid: \"\", vendid: \"0\" };\n          const frmData = {cmbMailTemplateId:MailTemplateId}\n          const data = { hdr: frmHdr, body: frmData };\n         \n          const token =    localStorage.getItem('token');\n          const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n         \n          const combonurl =miltmpltlst;\n         \n          await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n             const strResponse = JSON.parse(decompressBase64(response.data));\n            \n                Response = strResponse ;\n         \n           })\n         \n           return  Response;\n         \n         };\n\n         export const DelMailTmpltAttachmentelmt = async (MailTmplAttchelmtId) => {     \n           \n            let Response;\n            const Delmiltmltdoc = apiendpoints.delatchelm ;\n             const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n            //  /* Header */\n             const convID = generateUUID();\n             const frmHdr = { convid: convID, tag: \"delatchelm\", orgid: \"\", vendid: \"0\" };\n             const frmData = {txtMailAttchElmsId:MailTmplAttchelmtId}\n             const data = { hdr: frmHdr, body: frmData };\n             console.log(frmData); \n             \n             const reqHdr = { };  \n            \n             const combonurl =Delmiltmltdoc;   \n             await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    \n               const strResponse = JSON.parse(decompressBase64(response.data));              \n                   Response = strResponse ;\n            \n              })\n            \n              return  Response;\n            \n            };\n\n            export const GetAtchelmlst  = async (MailTemplateId) => {\n\n\n               let Response;\n               const getatchelmlst = apiendpoints.getatchelmlst;\n                const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n               //  /* Header */\n                const convID = generateUUID();\n                const frmHdr = { convid: convID, tag: \"getatchelmlst\", orgid: \"\", vendid: \"0\" };\n                const frmData = {txtMailTemplateId:MailTemplateId}\n                const data = { hdr: frmHdr, body: frmData };\n               \n                const token =    localStorage.getItem('token');\n                const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n               \n                const combonurl =getatchelmlst;\n               \n                await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n                   const strResponse = JSON.parse(decompressBase64(response.data));\n                  \n                      Response = strResponse ;\n               \n                 })\n               \n                 return  Response;\n               \n               };\n      \n   \n\n"],"names":["apiendpoints","appsettings","schema","yup","shape","txtTemplatename","required","MailTmplAttachment","_errors$cmbMailTempla","_errors$txtMailTmpAtt","smtplst","setsmtplst","useState","miltmpltlsbody","setmiltmpltlsresbody","resbody","setresbody","selectedFile","setSelectedFile","MailTemplateId","setMailTemplateId","LoadCombo","async","Response","FetchCombodata","body","miltmp","useEffect","register","getValues","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","alert","setAlert","isLoading","setLoanding","ResetScreenValue","filElements","handleFileChange","event","target","files","length","MailTemplateOnChange","e","value","FetchMailTemplateAttachmentList","DeleteTemplateAttachmentOnclick","x","DeleteTemplateAttachment","attchid","navigate","useNavigate","MailTemplateAttachmentList","GetMailTemplateAttachmentList","console","log","JSON","stringify","attachment","frmHdr","convid","generateUUID","tag","orgid","vendid","MailTempltId","parseInt","reqdata","hdr","cmbMailTemplateId","txtMailTmplAttchId","reqHdr","headers","Authorization","localStorage","getItem","updmiltmplt","delmiltmltdoc","response","api","post","compressBase64","strResponse","parse","decompressBase64","data","rst","toast","error","fdr","rstmsg","success","setTimeout","err","message","ref","useRef","OnFileUpladHandler","preventDefault","fileCtrl","current","filePath","fExt","allowedExtns","replace","eval","exec","MAX_FILE_SIZE","fileSizeKiloBytes","size","convID","tmpltDet","formData","FormData","append","token","url","upldmiltmltdoc","onSubmitHandler","ShowAlert","alertType","AlertType","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Spinner","Alerts","onSubmit","autocomplete","htmlFor","onChange","map","res","k","v","type","disabled","readonly","txtMailTmpAttchId","name","onClick","Scrollbar","width","height","Table","striped","bordered","hover","filename","Getsmtplist","combonurl","then","GetMailTemplateList","miltmpltlst","miltmltdoclst","DelMailTmpltAttachmentelmt","Delmiltmltdoc","delatchelm","frmData","txtMailAttchElmsId","MailTmplAttchelmtId","GetAtchelmlst","getatchelmlst","txtMailTemplateId"],"sourceRoot":""}