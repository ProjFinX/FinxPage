{"version":3,"file":"static/js/122.b43a4353.chunk.js","mappings":"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","sources":["components/userrole/user.js","components/utilities/getuserlist.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { FetchCombodata } from \"../utilities/combodata\";\nimport api from \"../api/Webcall\";\nimport {\n  generateUUID,\n  compressLZW,\n  decompressLZW,\n  compressBase64,\n  decompressBase64,\n} from \"../utilities/utils\";\nimport Spinner from \"../htmlcomponents/Spinner\";\nimport Alerts from \"../htmlcomponents/Alerts\";\nimport { useNavigate } from \"react-router-dom\";\nimport { GetUserList } from \"../utilities/getuserlist\";\nimport { Scrollbar } from \"react-scrollbars-custom\";\nimport Table from \"react-bootstrap/Table\";\n\n// Yup validation schema\n\nconst schema = yup.object().shape({\n  txtUsername: yup\n    .string()\n    .required(\"User Email  can not be empty\")\n    .email(\"Pls provide Valid  Email id\"),\n  txtFirstname: yup\n    .string()\n    .required(\"First Name can not be empty\")\n    .max(50, \"First name  Max lenght is 50 \"),\n  txtLastname: yup\n    .string()\n    .required(\"Last name not be empty\")\n    .max(50, \"Last name  Max lenght is 50 \"),\n  txtPhone: yup\n    .string()\n    .required(\"Phone no. can not be empty\")\n    .max(15, \"Phone no. Max lenght is 15 \"),\n  cmbCountryId: yup.string().required(\"Please select the Country\"),\n  txtPassword: yup\n    .string()\n    .required(\"Password can not be empty\")\n    .min(3, \"Password Min length is 3\")\n    .max(20, \"Password. Max lenght is 20 \"),\n  txtConformPassword: yup\n    .string()\n    .oneOf([yup.ref(\"txtPassword\"), null], \"Not matched with password\"),\n});\n\n// Function Component Branch\n\nconst User = () => {\n  // Combo Data fetching------------------------------\n\n  const [userresbody, setuserlistresbody] = useState([]);\n  const [resbody, setresbody] = useState([]);\n  const LoadCombo = async () => {\n    // Update state with incremented value\n\n    const opt = \"|CUN|\";\n    const optw = \"\";\n    // debugger;\n\n    const Response = await FetchCombodata(opt, optw); // JSON.stringify(await FetchCombodata(opt,optw));\n\n    setresbody(Response.body.cun);\n    console.log(\"rerendering method\");\n  };\n\n  useEffect(() => {\n    LoadCombo();\n    FetchUserList();\n  }, []);\n\n  // Useeffect\n\n  //-----------------------------\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const [alert, setAlert] = useState(\"\");\n\n  const [isLoading, setLoanding] = useState(false);\n\n  function SetScreenValue(rowval) {\n    console.log(rowval);\n\n    reset({   \n      txtUserId: rowval.UserId,  \n      txtUsername: rowval.Username,\n      txtFirstname: rowval.FName,\n      txtLastname: rowval.LName,\n      txtPhone: rowval.tleid,\n      cmbCountryId: rowval.tleid,\n      txtPassword: rowval.tleid,\n      txtConformPassword: rowval.tleid,\n    });\n  }\n\n\n  function ResetScreenValue() {\n    reset({\n      txtUserId: \"\",  \n      txtUsername: \"\",  \n      txtFirstname: \"\",  \n      txtLastname: \"\",  \n      txtPhone: \"\",  \n      cmbCountryId: \"\",  \n      txtPassword: \"\",  \n      txtConformPassword: \"\"\n    });\n  }\n\n  const navigate = useNavigate();\n\n  const FetchUserList = async () => {\n    const UserListResponse = await GetUserList();\n    console.log(JSON.stringify(UserListResponse));\n    setuserlistresbody(UserListResponse.body.Users);\n\n    console.log(JSON.stringify(UserListResponse.body.Users));\n  };\n\n  const onSubmitHandler = async (data) => {\n    setLoanding(true);\n    console.log(\"Enter Create new branch api call\");\n    console.log(data);\n    //e.preventDefault();\n    /* Header */\n    const convID = generateUUID();\n    const frmHdr = {\n      convid: convID,\n      tag: \"NewUser\",\n      orgid: \"\",\n      vendid: \"0\",\n    };\n    const frmData = data;\n    const reqdata = { hdr: frmHdr, body: frmData };\n    const token = localStorage.getItem(\"token\");\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n    const createusernurl = \"/cmpstp/newusr\";\n    console.log(reqHdr);\n    try {\n      //debugger;\n      const response = await api.post(\n        createusernurl,\n        compressBase64(reqdata),\n        reqHdr\n      );\n      // const response = await PostCallHeader(createbranchnurl, compressBase64(reqdata),reqHdr);\n\n      const strResponse = JSON.parse(decompressBase64(response.data));\n\n      console.log(strResponse);\n      debugger;\n\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr));\n        setLoanding(false);\n      } else {\n        ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0]));\n\n        setLoanding(false);\n        navigate(\"/Home\");\n      }\n    } catch (err) {\n      console.log(err.message);\n      ShowAlert(\"Error\", \"Unable to process request\");\n      setLoanding(false);\n    }\n  };\n\n  const ShowAlert = (alertType, message) => {\n    setAlert({\n      AlertType: alertType,\n      message: message,\n    });\n  };\n\n  return (\n    <>\n      <section className=\"vh-100\">\n        <div className=\"container h-100\">\n          {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\n                  <div className=\"col-lg-12 col-xl-11\"> */}\n          <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\n            <div className=\"card-header\">\n              <strong className=\"card-title\">Create New User</strong>\n            </div>\n            <div className=\"card-body p-md-5\">\n              {isLoading ? <Spinner></Spinner> : \"\"}\n              <Alerts alert={alert} />\n\n              <form onSubmit={handleSubmit(onSubmitHandler)} autocomplete=\"off\">\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtUsername\" className=\"form-label\">\n                        {\" \"}\n                        User Email\n                      </label>\n                      <input\n                        {...register(\"txtUsername\")}\n                        type=\"email\"\n                        className=\"form-control\"\n                        placeholder=\"User Email\"\n                      />\n                      <p>{errors.txtUsername?.message}</p>\n                    </div>\n                  </div>\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                    <label htmlFor=\"txtUserId\" className=\"form-label\">\n                        {\" \"}\n                        User Id\n                      </label>\n                      <input\n                        {...register(\"txtUserId\")}\n                        disabled=\"disabled\"\n                        readonly=\"readonly\"\n                        className=\"form-control\"\n                       \n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtFirstname\" className=\"form-label\">\n                        {\" \"}\n                        First name\n                      </label>\n                      <input\n                        {...register(\"txtFirstname\")}\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"User Email\"\n                      />\n                      <p>{errors.txtFirstname?.message}</p>\n                    </div>\n                  </div>\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtLastname\" className=\"form-label\">\n                        Last Name\n                      </label>\n                      <input\n                        {...register(\"txtLastname\")}\n                        type=\"text\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtLastname?.message}</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtPhone\" className=\"form-label\">\n                        {\" \"}\n                        Phone No.\n                      </label>\n                      <input\n                        {...register(\"txtPhone\")}\n                        type=\"text\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtPhone?.message}</p>\n                    </div>\n                  </div>\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"cmbCountryId\" className=\"form-label\">\n                        Country\n                      </label>\n                      <select\n                        {...register(\"cmbCountryId\")}\n                        className=\"form-control\"\n                      >\n                        <option value=\"\">- Select -</option>\n                        {\n                          //Combo Data binding\n                          resbody.map((res) => (\n                            <option key={res.k} value={res.k}>\n                              {res.v}\n                            </option>\n                          ))\n                        }\n                      </select>\n                      <p>{errors.cmbCountryId?.message}</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtPassword\" className=\"form-label\">\n                        {\" \"}\n                        Password\n                      </label>\n                      <input\n                        {...register(\"txtPassword\")}\n                        type=\"password\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtPassword?.message}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label\n                        htmlFor=\"txtConformPassword\"\n                        className=\"form-label\"\n                      >\n                        {\" \"}\n                        Confirm Password\n                      </label>\n                      <input\n                        {...register(\"txtConformPassword\")}\n                        type=\"password\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtConformPassword?.message}</p>\n                    </div>\n                  </div>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Submit\n                </button>\n              </form>\n            </div>\n            <Scrollbar style={{ width: 1200, height: 550 }}>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th className=\"text-center\">Id</th>\n                    <th className=\"text-center\">User Id</th>\n                    <th className=\"text-center\">First name</th>\n                    <th className=\"text-center\">Phone No.</th>\n                    <th className=\"text-center\">Country</th>\n                   \n                    <th>\n                      <button\n                        className=\"btn btn-success\"\n                        onClick={() => {\n                          ResetScreenValue();\n                        }}\n                      >\n                        {\" \"}\n                        <i className=\"bi bi-table\"></i> Add{\" \"}\n                      </button>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {userresbody &&\n                    userresbody.map((x) => {\n                      return (\n                        <tr>\n                          <td>{x.UserId}</td>\n                          <td>{x.Username}</td>\n                          <td>{x.FName }</td>\n                          <td>{ x.LName}</td>\n                          <td>{ x.LName}</td>\n                          <td>\n                            <button\n                              className=\"btn btn-primary\"\n                              onClick={() => {\n                                SetScreenValue(x);\n                              }}\n                            >\n                              {\" \"}\n                              <i className=\"bi bi-pen\"></i> Edit\n                            </button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </Table>\n            </Scrollbar>\n          </div>\n          {/* </div>\n            </div> */}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default User;\n","import React, { useState, useEffect } from \"react\";\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetUserList = async () => {\n\n\nlet Response;\nconst UserList = apiendpoints.UserList;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl = UserList;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n export const GetAllUserList = async () => {\n\n\nlet Response;\nconst AllUserList = apiendpoints.AllUserList;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl =AllUserList;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n"],"names":["schema","yup","shape","txtUsername","required","email","txtFirstname","max","txtLastname","txtPhone","cmbCountryId","txtPassword","min","txtConformPassword","oneOf","User","_errors$txtUsername","_errors$txtFirstname","_errors$txtLastname","_errors$txtPhone","_errors$cmbCountryId","_errors$txtPassword","_errors$txtConformPas","userresbody","setuserlistresbody","useState","resbody","setresbody","useEffect","async","Response","FetchCombodata","body","cun","console","log","LoadCombo","FetchUserList","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","alert","setAlert","isLoading","setLoanding","navigate","useNavigate","UserListResponse","GetUserList","JSON","stringify","Users","ShowAlert","alertType","message","AlertType","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Spinner","Alerts","onSubmit","data","reqdata","hdr","convid","generateUUID","tag","orgid","vendid","reqHdr","headers","Authorization","localStorage","getItem","response","api","post","compressBase64","strResponse","parse","decompressBase64","rst","fdr","err","autocomplete","htmlFor","type","placeholder","disabled","readonly","value","map","res","k","v","Scrollbar","width","height","Table","striped","bordered","hover","onClick","txtUserId","x","UserId","Username","FName","LName","rowval","tleid","apiendpoints","appsettings","UserList","combonurl","then","GetAllUserList","AllUserList"],"sourceRoot":""}