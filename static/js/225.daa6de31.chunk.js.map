{"version":3,"file":"static/js/225.daa6de31.chunk.js","mappings":"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","sources":["components/userrole/role.js","components/utilities/getrolelist.js","../node_modules/react-bootstrap/esm/Table.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport api from \"../api/Webcall\";\nimport { generateUUID, compressLZW, decompressLZW, compressBase64, decompressBase64 } from \"../utilities/utils\";\nimport Spinner from \"../htmlcomponents/Spinner\";\nimport Alerts from \"../htmlcomponents/Alerts\";\nimport {useNavigate} from \"react-router-dom\";\n\nimport { GetRoleList } from \"../utilities/getrolelist\";\nimport Table from 'react-bootstrap/Table';\n\n// //https://dev.to/fromwentzitcame/working-with-tables-in-react-how-to-render-and-edit-fetched-data-5fl5\n\n\nconst schema = yup.object().shape({\n    txtRoleName: yup.string().required(\"Role name can not be empty\").max(50,\"Role name  Max lenght is 50 \")\n});\n\n\n// Function Component Role\n\nconst Role = () => {\n\n      \n        const [roles, setRoles] = useState({ txtRoleId: \"\", txtRoleName: \"\"});\n\n        const { register, handleSubmit, formState: { errors }, reset } = useForm({\n            resolver: yupResolver(schema), defaultValues: roles\n         });\n\n        \n    \n         \n        const [alert, setAlert] = useState(\"\");\n\n        const [roleid, setRoleid] = useState(0);\n\n        const [isLoading , setLoanding]  = useState(false);\n\n                      \n     \n     const navigate = useNavigate();\n\n    //Fetch Role List from API\n\n            const[roleresbody,setrolelistresbody]= useState([]);\n            const FetchRoleList = async () => {\n                // Update state with incremented value\n\n            // debugger;\n\n              const RoleListResponse = await GetRoleList();\n             \n              console.log(JSON.stringify(RoleListResponse.body.Roles));\n              setrolelistresbody(RoleListResponse.body.Roles)\n            \n             \n            }; \n\n            useEffect(() => {\n                FetchRoleList(); \n                console.log('rerendering')\n               \n            \n            },[roleid])\n\n\n       //-----------------------------\n\n\n     const onSubmitHandler = async(data,e) => {\n      \n      e.preventDefault();\n      setLoanding(true);\n      console.log(\"Enter Create new branch api call\");\n      console.log(data);\n      //e.preventDefault();\n      /* Header */\n      const convID = generateUUID();\n      const frmHdr = {\n            convid: convID,\n            tag: \"NewRole\",\n            orgid: \"\",\n            vendid: \"0\",\n      };    \n      const frmData = data;\n      const reqdata = { hdr: frmHdr, body: frmData }  \n      const token =    localStorage.getItem('token');\n      const reqHdr = { headers: { Authorization: `Bearer ${token}` } };    \n      const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n      const createroleurl =  \"/cmpstp/mngrole\";\n      console.log(reqHdr)\n      try {\n        //debugger;\n        const response = await api.post(createroleurl, compressBase64(reqdata),reqHdr);\n       // const response = await PostCallHeader(createbranchnurl, compressBase64(reqdata),reqHdr);\n       \n         const strResponse = JSON.parse(decompressBase64(response.data));\n\n        console.log(strResponse);\n        \n        if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {             \n             ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\n             setLoanding(false);\n        } else {\n              ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\n              setLoanding(false);\n            //  navigate(\"/Home\");\n        }\n      } catch (err) {\n      \n        console.log(err.message);     \n        ShowAlert(\"Error\", \"Unable to process request\")\n        setLoanding(false);\n        \n      }\n    };\n\n\n    function SetRoleValue(rowval)  \n    {\n    \n\n\n      //setRoles({ txtRoleId: rowval.RoleId, txtRoleName: rowval.RoleName})  ;\n      reset({ txtRoleId: rowval.RoleId, txtRoleName: rowval.RoleName})  \n    \n      setRoleid(rowval.RoleId)\n\n      console.log(handleSubmit);\n\n    }\n\n    function ResetRoleValue()  \n    {\n      \n      reset({ txtRoleId: \"\", txtRoleName: \"\"})    \n\n    }\n\n    \n    \n  const ShowAlert = (alertType, message) => {\n    setAlert({\n      AlertType: alertType,\n      message: message,\n    });\n  };\n\n  try {\n    \n  \n  return (\n\n\n        <>\n          <section className=\"vh-100\">\n            <div className=\"container h-100\">\n                {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\n                  <div className=\"col-lg-12 col-xl-11\"> */}\n                      <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\n                      <div className=\"card-header\">\n                        <strong className=\"card-title\">Create New Role</strong>\n                      </div>\n                      <div className=\"card-body p-md-5\">\n\n                      {isLoading?(<Spinner></Spinner>) :\"\"}                        \n                       <Alerts alert={alert} />                      \n\n                        <form onSubmit={handleSubmit(onSubmitHandler)} autocomplete=\"off\">\n                        <div className=\"row\">\n                              <div className=\"col-sm\">\n                                  <div className=\"mb-3\">\n                                    <label htmlFor=\"txtRoleName\" className=\"form-label\"> Role Name</label>\n                                    <input {...register(\"txtRoleName\")} type=\"text\" className=\"form-control\"   />\n                                    <p>{errors.txtRoleName?.message}</p>\n                                  </div>\n                              </div>\n                              <div className=\"col-sm\">\n                                  <div className=\"mb-3\">\n                                  <label htmlFor=\"txtRoleId\" className=\"form-label\"> Role Id</label>\n                                  <input {...register(\"txtRoleId\")} type=\"text\" className=\"form-control\" disabled=\"disabled\"  readonly=\"readonly\" />      \n                                  </div>\n                              </div>\n                            </div>\n\n                            <div className=\"row\">\n                              <div className=\"col-sm\">\n                                  <div className=\"mb-3\"> \n                                 \n                                    <input {...register(\"cbIsActive\")}  type=\"checkbox\" defaultChecked=\"true\" /> &nbsp; \n                                    <label htmlFor=\"cbIsActive\" className=\"form-label\">Active</label>\n                                    <p>{errors.cbIsActive?.message}</p>                             \n                                                                \n                                  </div>\n                              </div>\n                              <div className=\"col-sm\">\n                                  <div className=\"mb-3\">\n                                   \n                                  </div>\n                              </div>\n                            </div>\n                           \n                            <button type=\"submit\" className=\"btn btn-primary\">\n                            Submit\n                            </button>\n                        </form>\n                      </div>\n\n                      <Table striped bordered hover>\n                          <thead>\n                            <tr>\n                              <th>Id</th>\n                              <th>Role</th>\n                              <th>Status</th>\n                              <th><button  className=\"btn btn-success\" onClick={() => {  \n                                    ResetRoleValue();                                                 \n                                    }} > <i className=\"bi bi-table\"></i> Add </button></th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                           \n                          {\n                                roleresbody.map(x=> {\n                                  return(\n                                      <tr>\n                                  <td>{x.RoleId}</td>\n                                  <td>{x.RoleName}</td>\n                                  <td>{x.BRUMapStatus}</td>\n                                  <td> \n                            \n                                    <button className=\"btn btn-primary\"   onClick={() => {   \n\n                                                  SetRoleValue(x);                                                 \n                                                }} >  <i className=\"bi bi-pen\"></i> Edit</button></td>\n                                 \n                                </tr>\n                                  )} )}\n                          </tbody>\n                        </Table>\n                  </div>\n                {/* </div>\n            </div> */}\n            </div>\n          </section>\n    </>\n  );\n\n} catch (error) {\n\n  console.log(error.message)\n    \n}\n\n};\n\nexport default Role;","import React, { useState, useEffect } from \"react\";\r\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetRoleList = async () => {\r\n\r\n\r\nlet Response;\r\nconst RoleList = apiendpoints.RoleList;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = RoleList;\r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));\r\n    console.log(strResponse);    \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;"],"names":["schema","yup","shape","txtRoleName","required","max","Role","roles","setRoles","useState","txtRoleId","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","defaultValues","alert","setAlert","roleid","setRoleid","isLoading","setLoanding","roleresbody","setrolelistresbody","useNavigate","useEffect","async","RoleListResponse","GetRoleList","console","log","JSON","stringify","body","Roles","FetchRoleList","onSubmitHandler","data","e","preventDefault","reqdata","hdr","convid","generateUUID","tag","orgid","vendid","reqHdr","headers","Authorization","localStorage","getItem","response","api","post","compressBase64","strResponse","parse","decompressBase64","rst","ShowAlert","fdr","rstmsg","err","message","alertType","AlertType","_errors$txtRoleName","_errors$cbIsActive","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Spinner","Alerts","onSubmit","autocomplete","htmlFor","type","disabled","readonly","defaultChecked","cbIsActive","Table","striped","bordered","hover","onClick","map","x","RoleId","RoleName","BRUMapStatus","rowval","error","apiendpoints","appsettings","Response","RoleList","combonurl","then","React","_ref","ref","bsPrefix","borderless","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","responsiveClass"],"sourceRoot":""}