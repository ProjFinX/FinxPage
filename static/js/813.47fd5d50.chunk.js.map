{"version":3,"file":"static/js/813.47fd5d50.chunk.js","mappings":"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","sources":["components/CommunicationDefiner/MailAttchElms.js","components/utilities/getallscreen.js","components/utilities/getsmtpmaster.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { FetchCombodata } from \"../utilities/combodata\";\nimport {\n\n  GetAtchelmlst,\n  DelMailTmpltAttachmentelmt\n} from \"../utilities/getsmtpmaster\";\nimport { GetAllScreenList } from \"../utilities/getallscreen\";\nimport api from \"../api/Webcall\";\nimport {\n  generateUUID,\n  compressLZW,\n  decompressLZW,\n  compressBase64,\n  decompressBase64,\n} from \"../utilities/utils\";\nimport Spinner from \"../htmlcomponents/Spinner\";\nimport Alerts from \"../htmlcomponents/Alerts\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Scrollbar } from \"react-scrollbars-custom\";\nimport Table from \"react-bootstrap/Table\";\n\nimport { toast } from 'react-toastify';\nimport appsettings from \"../../appsettings.json\"\nconst apiendpoints = appsettings.ApiEndpoints;\n\n// Yup validation schema\n\n\n\nconst schema = yup.object().shape({\n  cmbAtchElement: yup\n    .string()\n    .required(\"Eement name  can not be empty\") \n  \n});\n\n// Function Component Branch\n\nconst MailAttchElms = () => {\n  // Combo Data fetching------------------------------\n  const [smtplst, setsmtplst] = useState([]);\n  const [miltmpltlsbody, setmiltmpltlsresbody] = useState([]);\n  const [screenfilterlist, setscreenfilterlist] = useState([]);\n  const [resbody, setresbody] = useState([]);\n  const [childelms, setscrchildelms] = useState([]);\n  const [Screenid, setScreenid] = useState(0);\n  const [MailTemplateId, setMailTemplateId] = useState(0);  \n  const LoadCombo = async () => {\n    // Update state with incremented value\n\n    const opt = \"|MILTMP|\";\n    const optw = \"\";\n    // debugger;\n\n    const Response = await FetchCombodata(opt, optw); // JSON.stringify(await FetchCombodata(opt,optw));\n\n    setresbody(Response.body.miltmp);\n\n  };\n\n  useEffect(() => {       \n    FetchAllScreenList();\n    LoadCombo();\n  }, []);\n\n  // Useeffect\n\n  //-----------------------------\n\n\n\n  \n  const {\n    register,\n    getValues,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const [alert, setAlert] = useState(\"\");\n\n  const [isLoading, setLoanding] = useState(false);\n\n  \n  \n  const MailTemplateOnChange = (e) => {  \n    \n    setMailTemplateId(e.target.value);  \n    FetchMailTemplateAttachmentList(e.target.value)\n\n};\n\n\n\nconst FetchMailTemplateAttachmentList = async (MailTemplateId) => {\n  const MailTemplateAttachmentList = await GetAtchelmlst(MailTemplateId);\n  console.log(JSON.stringify(MailTemplateAttachmentList));   \n  setmiltmpltlsresbody(MailTemplateAttachmentList.body.atchelm);  \n};\n\n\n\n  const ScreenOnChange = (e) => {  \n    \n    setScreenid(e.target.value);  \n    FetchScreenChildElements(0,e.target.value)\n\n};\n\nconst FetchScreenChildElements = async (parentelmid, scrid) => {\n  // Update state with incremented value\n   const opt = \"|DUELM|\";\n\n  const optw = {\n    DUELM: \"ScreenId=\" + scrid + \" and ParentElementId=\" + parentelmid,\n  };\n\n  const Response = await FetchCombodata(opt, optw);\n\n  console.log(Response);\n\n  setscrchildelms(Response.body.duelm);\n};\n\n\n  const navigate = useNavigate();\n\n  \n  const FetchAllScreenList = async () => {\n    const ScreenListResponse = await GetAllScreenList(); \n    setscreenfilterlist(ScreenListResponse.body.Screens.filter((res) => res.IsActive==true));\n  };\n\n\n  const ref = useRef();\n\n  \n  const DeleteTemplateAttachmentOnclick = (rowval) => {  \n \n    DelMailTmpltAttachmentElement(rowval.atchelmid)\n};\n\n\n\nconst DelMailTmpltAttachmentElement = async (MailTemplateelemntId) => {\n  const strResponse = await DelMailTmpltAttachmentelmt(MailTemplateelemntId); \n\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\n        //ShowAlert(\"Error\", JSON.stringify(strResponse.fdr[0].rstmsg));\n        toast.error(JSON.stringify(strResponse.fdr[0].rstmsg));\n        // setLoanding(false);\n      } else {\n        toast.success(\"Successfully Deleted\");\n        setTimeout(() => { }, 600);\n        FetchMailTemplateAttachmentList(MailTemplateId)         \n      }\n\n  \n};\n\n\n\n  const onSubmitHandler = async (data) => {   \n\n\n    let MailAttchElmsId = 0;\n    if (data.txtMailTemplateId!=undefined)\n       MailAttchElmsId = data.txtMailTemplateId;\n\n    const convID = generateUUID();\n    const frmHdr = {\n      convid: convID,\n      tag: \"updatchelm\",\n      orgid: \"\",\n      vendid: \"0\",\n    };\n    const frmData = {\"txtMailAttchElmsId\":MailAttchElmsId,\n                     \"txtMailTemplateId\":data.cmbMailTemplateId,\n                     \"cmbAtchElement\":data.cmbAtchElement}\n\n    const reqdata = { hdr: frmHdr, body: frmData };\n    const token = localStorage.getItem(\"token\");\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n   const updsmtp  = apiendpoints.updatchelm ;\n    console.log(frmData);\n    try {\n      //debugger;\n      const response = await api.post(\n        updsmtp,\n        compressBase64(reqdata),\n        reqHdr\n      );\n   \n      const strResponse = JSON.parse(decompressBase64(response.data));\n\n      console.log(strResponse);\n  \n       \n\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {        \n        ShowAlert(\"Error\", JSON.stringify(strResponse.fdr));\n        toast.error( JSON.stringify(strResponse.fdr));\n        setLoanding(false);\n      } else {\n        setTimeout(() => {\n          console.log(strResponse.fdr);\n          ShowAlert(\"Success\", JSON.stringify(strResponse.fdr[0].rstmsg));\n          toast.success(\"Successfully updated\");\n          FetchMailTemplateAttachmentList(data.cmbMailTemplateId)       \n          setTimeout(() => {\n            setAlert({\n              AlertType: \"null\",\n              message: \"null\",\n            });\n          }, 600);\n           // ResetScreenValue();\n          // FetchMailAttchElmsList();\n            setLoanding(false);\n        }, 300); \n       \n      }\n    } catch (err) {\n      console.log(err.message);\n      ShowAlert(\"Error\", \"Unable to process request\");\n      setLoanding(false);\n    }\n  };\n  const ShowAlert = (alertType, message) => {\n    setAlert({\n      AlertType: alertType,\n      message: message,\n    });\n  };\n\n  return (\n    <>\n      <section className=\"vh-100\">\n        <div className=\"container h-100\">\n          {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\n                  <div className=\"col-lg-12 col-xl-11\"> */}\n          <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\n            <div className=\"card-header\">\n              <strong className=\"card-title\">Mail Template Attachment</strong>\n            </div>\n            <div className=\"card-body p-md-5\">\n              {isLoading ? <Spinner></Spinner> : \"\"}\n              <Alerts alert={alert} />\n\n              <form onSubmit={handleSubmit(onSubmitHandler)} autocomplete=\"off\">\n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                    <label htmlFor=\"cmbMailTemplateId\" className=\"form-label\">\n                        Template name\n                      </label>\n                      <select\n                        {...register(\"cmbMailTemplateId\")}\n                        className=\"form-control\"  onChange={MailTemplateOnChange} \n                      >\n                        <option value=\"\">- Select -</option>\n                        {\n                          //Combo Data binding\n                          resbody &&\n                          resbody.map((res) => (\n                            <option key={res.k} value={res.k}>\n                             {res.v}\n                            </option>\n                          ))\n                        }\n                      </select>\n                      <p>{errors.cmbMailTemplateId?.message}</p>\n                    </div>\n                  </div>\n                 \n\n                  <div className=\"col-sm\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"txtMailAttchElmsId\" className=\"form-label\">\n                        {\" \"}\n                        Template Attachment Id\n                      </label>\n                      <input\n                        {...register(\"txtMailAttchElmsId\")}\n                        type=\"text\"\n                        disabled=\"disabled\"\n                        readonly=\"readonly\"\n                        className=\"form-control\"\n                      />\n                      <p>{errors.txtMailAttchElmsId?.message}</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n               \n                <div className=\"col-sm\">\n                                    <div className=\"mb-3\">\n                                        <label htmlFor=\"cmbScreenId\" className=\"form-label\">Screen</label>\n                                        <select {...register(\"cmbScreenId\")}  className=\"form-control\"  onChange={ScreenOnChange}> \n                                            <option value=\"0\">- Select -</option>\n                                            {  //Combo Data binding\n                                                        \n                                                        screenfilterlist.map((res) => \n                                                        (<option key={res.ScreenId} value={res.ScreenId}>{res.ScrName}</option>))\n                                            }\n                                            \n                                        </select>\n                                        <p>{errors.cmbScreenId?.message}</p>\n                                    </div>\n                                </div>\n                                <div className=\"col-sm\">\n                      <div className=\"mb-3\">\n                        <label htmlFor=\"cmbAtchElement\" className=\"form-label\">\n                          {\" \"}\n                          Element\n                        </label>\n                        <select {...register(\"cmbAtchElement\")}  className=\"form-control\"  onChange={\"\"}> \n                                            <option value=\"0\">- Select -</option>\n                                            {                                                         \n                                                        childelms.map((res) => \n                                                        (<option key={res.k} value={res.k}>{res.v}</option>))\n                                            }\n                                        </select>\n                                        <p>{errors.cmbAtchElement?.message}</p>\n                      </div>\n                  \n                    </div>\n\n                    <div className=\"col-md-12\">\n                  \n                    </div>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Submit\n                </button>\n              \n              </form>\n            </div>\n            <Scrollbar style={{ width: 1200, height: 550 }}>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th className=\"text-center\">Id</th>\n                    <th className=\"text-center\">Element</th>   \n                  \n                    <th>\n                      <button\n                        className=\"btn btn-success\"\n                        onClick={() => {\n                         \n                        }}\n                      >\n                        {\" \"}\n                        <i className=\"bi bi-table\"></i> Add{\" \"}\n                      </button>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {miltmpltlsbody &&\n                    miltmpltlsbody.map((x) => {\n                      return (\n                        <tr>\n                          <td>{x.atchelmid}</td>\n                          <td>{x.elmna}</td>\n                         \n                         \n                          <td>\n                            <button\n                              className=\"btn btn-primary\"\n                              onClick={() => {\n                                DeleteTemplateAttachmentOnclick(x);\n                              }}\n                            >\n                              {\" \"}\n                              <i className=\"bi bi-pen\"></i> Delete\n                            </button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </Table>\n            </Scrollbar>\n          </div>\n          {/* </div>\n            </div> */}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default MailAttchElms;\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllScreenList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllScreen = apiendpoints.AllScreen;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllScreen\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllScreen;\r\n\r\n console.log(combonurl); \r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const UpdSmtpMaster = async (x) => {\n\n\nlet Response;\nconst updscr  = apiendpoints.updscr ;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n\n let SmtpId = 0;\n if (x.txtSMTPId!=\"\")\n   SmtpId = x.txtSMTPId;\n\n\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"updscr\", orgid: \"\", vendid: \"0\" };\n const frmData = {  \"txtSmtpId\":SmtpId, \"txtHost\":x.txtHostname, \"cbIsSSL\":x.cbIsSSL, \"txtPortNo\":x.txtPort,\n                    \"txtEmail\":x.txtEmail, \"txtPwd\":x.txtPassword, \"cbIsActive\":x.cbIsActive }\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl = updscr;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\n export const Getsmtplist = async () => {\n\n\nlet Response;\nconst smtplst = apiendpoints.smtplst;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"smtplst\", orgid: \"\", vendid: \"0\" };\n const frmData = {}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n const combonurl =smtplst;\n\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n   \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n\nexport const GetMailType = async () => {\n\n\n   let Response;\n   const smtplst = apiendpoints.smtplst;\n    const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n   //  /* Header */\n    const convID = generateUUID();\n    const frmHdr = { convid: convID, tag: \"smtplst\", orgid: \"\", vendid: \"0\" };\n    const frmData = {}\n    const data = { hdr: frmHdr, body: frmData };\n   \n    const token =    localStorage.getItem('token');\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n   \n    const combonurl =smtplst;\n   \n    await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n       const strResponse = JSON.parse(decompressBase64(response.data));\n          \n          Response = strResponse ;\n   \n     })\n   \n     return  Response;\n   \n   };\n\n\n   export const GetMailTemplateList = async () => {\n\n\n      let Response;\n      const miltmpltlst = apiendpoints.miltmpltlst;\n       const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n      //  /* Header */\n       const convID = generateUUID();\n       const frmHdr = { convid: convID, tag: \"miltmpltlst\", orgid: \"\", vendid: \"0\" };\n       const frmData = {}\n       const data = { hdr: frmHdr, body: frmData };\n      \n       const token =    localStorage.getItem('token');\n       const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n      \n       const combonurl =miltmpltlst;\n      \n       await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n          const strResponse = JSON.parse(decompressBase64(response.data));\n         \n             Response = strResponse ;\n      \n        })\n      \n        return  Response;\n      \n      };\n\n\n      export const GetMailTemplateAttachmentList = async (MailTemplateId) => {\n\n\n         let Response;\n         const miltmpltlst = apiendpoints.miltmltdoclst;\n          const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n         //  /* Header */\n          const convID = generateUUID();\n          const frmHdr = { convid: convID, tag: \"miltmltdoclst\", orgid: \"\", vendid: \"0\" };\n          const frmData = {cmbMailTemplateId:MailTemplateId}\n          const data = { hdr: frmHdr, body: frmData };\n         \n          const token =    localStorage.getItem('token');\n          const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n         \n          const combonurl =miltmpltlst;\n         \n          await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n             const strResponse = JSON.parse(decompressBase64(response.data));\n            \n                Response = strResponse ;\n         \n           })\n         \n           return  Response;\n         \n         };\n\n         export const DelMailTmpltAttachmentelmt = async (MailTmplAttchelmtId) => {     \n           \n            let Response;\n            const Delmiltmltdoc = apiendpoints.delatchelm ;\n             const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n            //  /* Header */\n             const convID = generateUUID();\n             const frmHdr = { convid: convID, tag: \"delatchelm\", orgid: \"\", vendid: \"0\" };\n             const frmData = {txtMailAttchElmsId:MailTmplAttchelmtId}\n             const data = { hdr: frmHdr, body: frmData };\n             console.log(frmData); \n             \n             const reqHdr = { };  \n            \n             const combonurl =Delmiltmltdoc;   \n             await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n    \n               const strResponse = JSON.parse(decompressBase64(response.data));              \n                   Response = strResponse ;\n            \n              })\n            \n              return  Response;\n            \n            };\n\n            export const GetAtchelmlst  = async (MailTemplateId) => {\n\n\n               let Response;\n               const getatchelmlst = apiendpoints.getatchelmlst;\n                const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n               //  /* Header */\n                const convID = generateUUID();\n                const frmHdr = { convid: convID, tag: \"getatchelmlst\", orgid: \"\", vendid: \"0\" };\n                const frmData = {txtMailTemplateId:MailTemplateId}\n                const data = { hdr: frmHdr, body: frmData };\n               \n                const token =    localStorage.getItem('token');\n                const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n               \n                const combonurl =getatchelmlst;\n               \n                await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\n                   const strResponse = JSON.parse(decompressBase64(response.data));\n                  \n                      Response = strResponse ;\n               \n                 })\n               \n                 return  Response;\n               \n               };\n      \n   \n\n"],"names":["apiendpoints","appsettings","schema","yup","shape","cmbAtchElement","required","MailAttchElms","_errors$cmbMailTempla","_errors$txtMailAttchE","_errors$cmbScreenId","_errors$cmbAtchElemen","smtplst","setsmtplst","useState","miltmpltlsbody","setmiltmpltlsresbody","screenfilterlist","setscreenfilterlist","resbody","setresbody","childelms","setscrchildelms","Screenid","setScreenid","MailTemplateId","setMailTemplateId","useEffect","FetchAllScreenList","async","Response","FetchCombodata","body","miltmp","LoadCombo","register","getValues","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","alert","setAlert","isLoading","setLoanding","FetchMailTemplateAttachmentList","MailTemplateAttachmentList","GetAtchelmlst","console","log","JSON","stringify","atchelm","FetchScreenChildElements","parentelmid","scrid","optw","DUELM","duelm","useNavigate","ScreenListResponse","GetAllScreenList","Screens","filter","res","IsActive","DelMailTmpltAttachmentElement","useRef","strResponse","DelMailTmpltAttachmentelmt","MailTemplateelemntId","hdr","rst","toast","error","fdr","rstmsg","success","setTimeout","ShowAlert","alertType","message","AlertType","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Spinner","Alerts","onSubmit","MailAttchElmsId","undefined","data","txtMailTemplateId","frmHdr","convid","generateUUID","tag","orgid","vendid","frmData","cmbMailTemplateId","reqdata","reqHdr","headers","Authorization","localStorage","getItem","updsmtp","updatchelm","response","api","post","compressBase64","parse","decompressBase64","err","autocomplete","htmlFor","onChange","e","target","value","map","k","v","type","disabled","readonly","txtMailAttchElmsId","ScreenId","ScrName","cmbScreenId","Scrollbar","width","height","Table","striped","bordered","hover","onClick","x","atchelmid","elmna","AllScreen","combonurl","then","Getsmtplist","GetMailTemplateList","miltmpltlst","GetMailTemplateAttachmentList","miltmltdoclst","Delmiltmltdoc","delatchelm","MailTmplAttchelmtId","getatchelmlst"],"sourceRoot":""}