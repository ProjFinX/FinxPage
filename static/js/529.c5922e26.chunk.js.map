{"version":3,"file":"static/js/529.c5922e26.chunk.js","mappings":"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","sources":["components/utilities/getdbtablelist.js","components/utilities/gettablecolumn.js","components/utilities/getdomaindatamap.js","components/dynamicscreendefinition/DMelemDropdown.jsx","components/dynamicscreendefinition/DomainDataMapping.js","components/utilities/getallscreen.js","components/utilities/getscrengrpelms.js"],"sourcesContent":["import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\n\n\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetDBTableList = async (cmbScrid,cmbDbShotName) => {\n\n\nlet Response;\n\n\n\nconst TableList = apiendpoints.GetTableList;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"Table List\", orgid: \"\", vendid: \"0\" };\n const frmData = {cmbScrid:cmbScrid,cmbDbShotName:cmbDbShotName}\n const data = { hdr: frmHdr, body: frmData };\n\n console.log(data); \n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n await api.post(TableList, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));      \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\n\n\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetTableColumn = async (cmbScrid,tbcmbDbShotName,cmbTblName) => {\n\n\nlet Response;\n\n\n\nconst TableColumn = apiendpoints.GetTableColumn;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"Table List\", orgid: \"\", vendid: \"0\" };\n const frmData = {cmbScrid:cmbScrid,cmbDbShotName:tbcmbDbShotName,cmbTblName:cmbTblName}\n const data = { hdr: frmHdr, body: frmData };\n\n console.log(data); \n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n await api.post(TableColumn, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));      \n       Response = strResponse ;\n\n       \n console.log(Response); \n\n  })\n\n  return  Response;\n\n};\n","import React, { useState, useEffect } from \"react\";\nimport { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetDomainDataMap = async (DDMapId) => {\n\n\nlet Response;\nconst  DomainDataMapping = apiendpoints.GetDomainDataMapping;\n\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"brchlst\", orgid: \"\", vendid: \"0\" };\n const frmData = {txtDDMapId:DDMapId}\n const data = { hdr: frmHdr, body: frmData };\n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n console.log(frmData)\n\n\n await api.post(DomainDataMapping, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));\n    console.log(strResponse);    \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n\n","\r\n\r\nimport React , {useCallback , useState , useEffect} from 'react';\r\n\r\n  function DMelemDropdown(props) {\r\n\r\n    \r\n\r\n    const [value, setValue] = useState(props.value);\r\n\r\n    const onChangeListener = useCallback(\r\n        (event , props) => {\r\n            \r\n            \r\n        props.ontblcolChange(event , props.id)\r\n            setValue(event.target.value)\r\n\r\n    },\r\n\r\n\r\n        []\r\n      );\r\n      useEffect(() => {\r\n        setValue(props.value);\r\n    }, []);\r\n\r\n        \r\n    return (\r\n      <select  className=\"form-control\" value={value} onChange={event => onChangeListener(event , props)}>\r\n         <option value=\"0\">- Select -</option>\r\n        {props.options?.map && props.options.map((option) => (\r\n          <option key={option.v} value={option.k}>{option.v}</option>\r\n        ))}\r\n      </select>\r\n    );\r\n  }\r\n\r\n  export default DMelemDropdown;","import React from \"react\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\n// import \"font-awesome/css/font-awesome.min.css\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport api from \"../api/Webcall\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\n\r\nimport { GetAllScreenList } from \"../utilities/getallscreen\";\r\nimport { GetDBTableList } from \"../utilities/getdbtablelist\";\r\nimport { GetScreenGroupElms } from \"../utilities/getscrengrpelms\";\r\nimport { GetTableColumn } from \"../utilities/gettablecolumn\";\r\n\r\nimport { GetDomainDataMap } from \"../utilities/getdomaindatamap\";\r\nimport { FetchCombodata } from \"../utilities/combodata\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Scrollbar } from \"react-scrollbars-custom\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../utilities/utils\";\r\nimport appsettings from \"../../appsettings.json\";\r\nimport DMelemDropdown from \"./DMelemDropdown\";\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\nconst schema = yup.object().shape({\r\n  txtDDName: yup.string().required(\"Pls Provide the Domain Data mappe Name\"),\r\n});\r\n\r\n// cmbScrid: Screenid,\r\n// txtDDMapId:data.txtDDMapId,\r\n// txtDDName: data.txtDDName,\r\n// cmbDbShotName:data.cmbDbShotName ,\r\n// cmbTblName:data.cmbTblName ,\r\n// txtPrKey:data.txtPrKey,\r\n// cmbGrpElementId:data.cmbGrpElementId,\r\n\r\n// function tableToJson(table) {\r\n//   var data = [];\r\n//   for (var i = 1; i < table.rows.length; i++) {\r\n//     var tableRow = table.rows[i];\r\n//     var rec = {};\r\n//     var rowData = [];\r\n\r\n//     for (var j = 0; j < tableRow.cells.length; j++) {\r\n//       rowData.push(tableRow.cells[j].innerHTML);\r\n//     }\r\n\r\n//     var res = fetchstringcombovalue(rowData[3]);\r\n//     rec = { tc: res, eid: rowData[0] };\r\n\r\n//     data.push(rec);\r\n//   }\r\n//   return data;\r\n// }\r\n\r\n// function fetchstringcombovalue(str) {\r\n//   var val;\r\n//   val = str\r\n//     .substr(str.indexOf(\"value\"), 500)\r\n//     .replace(\"value=\", \"\")\r\n//     .replace(\">\", \"\");\r\n\r\n//   return val.replace('\"', \"\").replace('\"', \"\").trimEnd();\r\n// }\r\n\r\n//rfce - command\r\nfunction DomainDataMapping() {\r\n  const [isLoading, setLoanding] = useState(false);\r\n  const [Screenid, setScreenid] = useState(\"\");\r\n  const [DBid, setDBid] = useState(0);\r\n  const [screenfilterlist, setscreenfilterlist] = useState([]);\r\n  const [tablelist, settablelist] = useState([]);\r\n  const [Tableid, setTableid] = useState([]);\r\n  const [GroupElements, setGroupElements] = useState([]);\r\n  const [TableColumn, setTableColumn] = useState([]);\r\n  const [PrkeyColumn, setPrkeyColumn] = useState(\"\");\r\n  const [childelms, setscrchildelms] = useState([]);\r\n  const [ParentElementId, setParentElementId] = useState(100);\r\n  const [ColName, SetColName] = useState(\"\");\r\n  const [ddmres, setddmres] = useState([]);\r\n  const [Tablename, setTablename] = useState(\"\");\r\n  const [DDMapId, setDDMapId] = useState(\"\");\r\n  const [cmbctlres, setctlres] = useState([]);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const FetchAllScreenList = async () => {\r\n    const ScreenListResponse = await GetAllScreenList();\r\n    setscreenfilterlist(\r\n      ScreenListResponse.body.Screens.filter((res) => res.IsActive == true)\r\n    );\r\n  };\r\n\r\n  const ontblcolChange = (e, id) => {\r\n    \r\n    const updatedTableColumn = TableColumn.map((key) => {\r\n      if (key.id === id) {\r\n        //key.tblelm = e.target.value;\r\n\r\n        return { ...key, tblelm: e.target.value };\r\n      } else {\r\n        return key;\r\n      }\r\n    });\r\n    return setTableColumn(updatedTableColumn);\r\n  };\r\n\r\n  // Const & Var\r\n\r\n  //   fetch combo values\r\n\r\n  const LoadCombo = async () => {\r\n    // Update state with incremented value\r\n\r\n    const opt = \"|CTBL|DDM|\";\r\n    const optw = \"\";\r\n\r\n    const Response = await FetchCombodata(opt, optw);\r\n\r\n    setctlres(Response.body.ctbl);\r\n\r\n    setddmres(Response.body.ddm);\r\n    \r\n  };\r\n\r\n  //Event   methoth\r\n\r\n  //-------------1 ---- Domain Data Main combo ------------------------------\r\n\r\n  const DDMapperOnChange = (e) => {\r\n    FetchDDMapper(e.target.value);\r\n    setDDMapId(e.target.value);\r\n  };\r\n\r\n  const FetchDDMapper = async (DDMapId) => {\r\n    reset({\r\n      cmbScrid: 0,\r\n      txtDDName: \"\",\r\n      cmbDbShortName: \"\",\r\n      cmbTblName: \"\",\r\n      txtPrKey: \"\",\r\n      CmbGrpElementId: 100,\r\n    });\r\n\r\n    setPrkeyColumn(\"\");\r\n    setTableColumn([]);\r\n\r\n    const GroupElmsResponse = await GetDomainDataMap(DDMapId);\r\n    \r\n    var ddmres = GroupElmsResponse.body;\r\n\r\n    reset({\r\n      cmbScrid: ddmres.scrid,\r\n      txtDDName: ddmres.ddname,\r\n      cmbDbShortName: ddmres.shorname,\r\n      cmbTblName: ddmres.tblname,\r\n      txtPrKey: ddmres.prkey,\r\n      CmbGrpElementId: ddmres.grpeid,\r\n    });\r\n\r\n    setScreenid(ddmres.scrid);\r\n    setDBid(ddmres.shorname);\r\n    FetchGroupElements(ddmres.scrid);\r\n    setTablename(ddmres.tblname);\r\n    setPrkeyColumn(ddmres.prkey);\r\n    setParentElementId(ddmres.grpeid);\r\n    var tl = await FetchTableList(ddmres.scrid, ddmres.shorname);\r\n\r\n    \r\n    var value = tl.filter(function (item) {\r\n      return item.na == ddmres.tblname;\r\n    });\r\n    var aryval = value[0];\r\n    FetchScreenChildElements(ddmres.grpeid, ddmres.scrid);\r\n    const tablecl = await FetchTableColumn(\r\n      ddmres.scrid,\r\n      ddmres.shorname,\r\n      aryval.id\r\n    );\r\n\r\n    \r\n    let updatedTableColumn = [...tablecl];\r\n\r\nconsole.log(updatedTableColumn);\r\n\r\n    ddmres.colmap.forEach((parentkey) => {\r\n      updatedTableColumn.forEach((childkey) => {\r\n        if (childkey.na === parentkey.tc) {\r\n          childkey.tblelm = parentkey.eid;\r\n        }\r\n      });\r\n    });\r\n    setTableColumn(updatedTableColumn);\r\n    setTableid(aryval.id);\r\n\r\n\r\n  };\r\n\r\n  //---------------------1 combo event end--------------------------------\r\n\r\n  //--------------------2 screen combo-----------------------------------\r\n\r\n  const ScreenOnChange = (e) => {\r\n    setScreenid(e.target.value);\r\n    FetchGroupElements(e.target.value);\r\n  };\r\n\r\n  const FetchGroupElements = async (srid) => {\r\n    const GroupElmsResponse = await GetScreenGroupElms(srid);\r\n    setGroupElements(GroupElmsResponse.body.elements);\r\n  };\r\n\r\n  //------------------------2 screen combo end-------------------------\r\n\r\n  // -----------------------3 DB Name combo -------------------------------\r\n\r\n  const onDBChange = (e) => {\r\n    \r\n    setDBid(e.target.value);\r\n    FetchTableList(Screenid, e.target.value);\r\n  };\r\n\r\n  const FetchTableList = async (Screenid, idbid) => {\r\n    const TableListResponse = await GetDBTableList(Screenid, idbid);\r\n    settablelist(TableListResponse.body.tbls);\r\n\r\n    return TableListResponse.body.tbls;\r\n  };\r\n\r\n  //-----------------------3-DB combo end ------------------\r\n\r\n  //-----------------------4- Table combo ---------------------\r\n\r\n  const OnTableListChange = (e) => {\r\n    \r\n    var value = tablelist.filter(function (item) {\r\n      return item.na == e.target.value;\r\n    });\r\n\r\n    var aryval = value[0];\r\n\r\n    FetchTableColumn(Screenid, DBid, aryval.id);\r\n\r\n    setTablename(e.target.value);\r\n    setTableid(aryval.id);\r\n  };\r\n\r\n  const FetchTableColumn = async (srid, dbid, tblid) => {\r\n    const TableColumnResponse = await GetTableColumn(srid, dbid, tblid);\r\n\r\n    TableColumnResponse.body.cols.forEach(function (itm) {\r\n      itm.tblelm = \"\";\r\n    });\r\n\r\n    setTableColumn(TableColumnResponse.body.cols);\r\n    setPrkeyColumn(TableColumnResponse.body.prkey);\r\n\r\n    return TableColumnResponse.body.cols;\r\n  };\r\n\r\n  //-----------------------4 - Table column end-------------\r\n\r\n  //------------------------5-  Group element Combo ----------\r\n  const OnGroupIdChange = (e) => {\r\n    setParentElementId(e.target.value);\r\n    FetchScreenChildElements(e.target.value, Screenid);\r\n  };\r\n\r\n  const FetchScreenChildElements = async (parentelmid, scrid) => {\r\n    // Update state with incremented value\r\n\r\n    const opt = \"|DUELM|\";\r\n\r\n    const optw = {\r\n      DUELM: \"ScreenId=\" + scrid + \" and ParentElementId=\" + parentelmid,\r\n    };\r\n\r\n    const Response = await FetchCombodata(opt, optw);\r\n\r\n    console.log(Response);\r\n\r\n    setscrchildelms(Response.body.duelm);\r\n  };\r\n  //------------------------5-- Group combo element end--------\r\n\r\n  //----Main submit method-------------------------------\r\n\r\n  const onSubmitHandler = async (data) => {\r\n    var tbldata = [];\r\n    var rec = {};\r\n\r\n    TableColumn.forEach((key) => {\r\n      if (key.tblelm != \"\") {\r\n        rec = { tc: key.na, eid: key.tblelm };\r\n        tbldata.push(rec);\r\n      }\r\n    });\r\n\r\n    var DDMapId = data.txtDDMapid;\r\n    if (DDMapId === \"undefined\") {\r\n      DDMapId = \"0\";\r\n    }\r\n\r\n    \r\n\r\n    let frmData = {\r\n      cmbScrid: Screenid,\r\n      txtDDMapId: DDMapId,\r\n      txtDDName: data.txtDDName,\r\n      cmbDbShotName: data.cmbDbShortName,\r\n      txtTblName: Tablename,\r\n      cmbTblName: Tableid,\r\n      txtPrKey: PrkeyColumn,\r\n      cmbGrpElementId: data.CmbGrpElementId,\r\n      colmap: tbldata,\r\n    };\r\n\r\n    //e.preventDefault();\r\n    /* Header */\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"updateelement\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const reqHdr = { headers: { Authorization: `Bearer ${token}` } };\r\n    const reqdata = { hdr: frmHdr, body: frmData };\r\n    const Updatedomaindatamapping = apiendpoints.UpdtDomainDataMapping;\r\n\r\n    try {\r\n      //\r\n      const response = await api.post(\r\n        Updatedomaindatamapping,\r\n        compressBase64(reqdata),\r\n        reqHdr\r\n      );\r\n\r\n      const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {\r\n        toast.error(JSON.stringify(strResponse.fdr[0].rstmsg));\r\n        setLoanding(false);\r\n      } else {\r\n        setTimeout(() => {\r\n          toast.success(\"Successfully updated\");\r\n        }, 300);\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      toast.error(\"Unable to process request\");\r\n      setLoanding(false);\r\n    }\r\n  };\r\n\r\n  //-------------Main submit method end----------------------------\r\n\r\n  // Useeffect\r\n\r\n  useEffect(() => {\r\n    LoadCombo();\r\n    FetchAllScreenList();\r\n  }, []);\r\n\r\n  // Useeffect\r\n\r\n  useEffect(() => {}, [childelms, DDMapId, tablelist, TableColumn]);\r\n\r\n  useEffect(() => {}, [TableColumn]);\r\n\r\n  try {\r\n    return (\r\n      <>\r\n        <section className=\"vh-100\">\r\n          <div className=\"container h-100\">\r\n            {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\r\n                  <div className=\"col-lg-12 col-xl-11\"> */}\r\n            <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\r\n              <div className=\"card-header\">\r\n                <strong className=\"card-title\">Domain Data Mapping</strong>\r\n              </div>\r\n              <div className=\"card-body p-md-5\">\r\n                {isLoading ? <Spinner></Spinner> : \"\"}\r\n                <Alerts alert={alert} />\r\n\r\n                <form\r\n                  onSubmit={handleSubmit(onSubmitHandler)}\r\n                  autocomplete=\"off\"\r\n                >\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <label htmlFor=\"txtDDMapid\" className=\"form-label\">\r\n                          Edit Domain Data\r\n                        </label>\r\n\r\n                        <select\r\n                          {...register(\"txtDDMapid\")}\r\n                          className=\"form-control\"\r\n                          onChange={DDMapperOnChange}\r\n                        >\r\n                          <option value=\"0\">- Select -</option>\r\n                          {\r\n                            //Combo Data binding\r\n\r\n                            ddmres.length > 0 &&\r\n                              ddmres.map((res) => (\r\n                                <option key={res.k} value={res.k}>\r\n                                  {res.v}\r\n                                </option>\r\n                              ))\r\n                          }\r\n                        </select>\r\n                        <p>{errors.txtDDMapid?.message}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <button type=\"submit\" className=\"btn btn-primary\">\r\n                          Submit\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <label htmlFor=\"txtDDName\" className=\"form-label\">\r\n                          Domain Data Name\r\n                        </label>\r\n                        <input\r\n                          {...register(\"txtDDName\")}\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          id=\"txtDDName\"\r\n                        />\r\n                        <p>{errors.txtDDName?.message}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <div>\r\n                          <label htmlFor=\"cmbScrid\" className=\"form-label\">\r\n                            Screen\r\n                          </label>\r\n\r\n                          <select\r\n                            {...register(\"cmbScrid\")}\r\n                            className=\"form-control\"\r\n                            onChange={ScreenOnChange}\r\n                          >\r\n                            <option value=\"0\">- Select -</option>\r\n                            {\r\n                              //Combo Data binding\r\n\r\n                              screenfilterlist.map((res) => (\r\n                                <option key={res.ScreenId} value={res.ScreenId}>\r\n                                  {res.ScrName}\r\n                                </option>\r\n                              ))\r\n                            }\r\n                          </select>\r\n                          <p>{errors.cmbScrid?.message}</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <label htmlFor=\"scrid\" className=\"form-label\">\r\n                          DB short Name\r\n                        </label>\r\n\r\n                        <select\r\n                          {...register(\"cmbDbShortName\")}\r\n                          value={DBid}\r\n                          className=\"form-control\"\r\n                          onChange={onDBChange}\r\n                        >\r\n                          {<option value=\"0\">-select-</option>}\r\n                          {\r\n                            //Combo Data binding\r\n\r\n                            cmbctlres.map((res) => (\r\n                              <option key={res.v} value={res.k}>\r\n                                {res.k}\r\n                              </option>\r\n                            ))\r\n                          }\r\n                        </select>\r\n\r\n                        <p>{errors.cmbDbShortName?.message}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <div>\r\n                          <label htmlFor=\"cmbTblName\" className=\"form-label\">\r\n                            Table List\r\n                          </label>\r\n\r\n                          <select\r\n                            value={Tablename}\r\n                            {...register(\"cmbTblName\")}\r\n                            className=\"form-control\"\r\n                            onChange={OnTableListChange}\r\n                          >\r\n                            {<option value=\"0\">-select-</option>}\r\n                            {\r\n                              //Combo Data binding\r\n\r\n                              tablelist &&\r\n                                tablelist.map((res) => (\r\n                                  <option key={res.id} value={res.na}>\r\n                                    {res.na}\r\n                                  </option>\r\n                                ))\r\n                            }\r\n                          </select>\r\n                          <p>{errors.cmbTblName?.message}</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <label htmlFor=\"txtPrkey\" className=\"form-label\">\r\n                          primary Key\r\n                        </label>\r\n\r\n                        <input\r\n                          {...register(\"txtPrkey\")}\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          value={PrkeyColumn}\r\n                        />\r\n\r\n                        <p>{errors.txtPrkey?.message}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                      <div className=\"mb-3\">\r\n                        <div>\r\n                          <label\r\n                            htmlFor=\"CmbGrpElementId\"\r\n                            className=\"form-label\"\r\n                          >\r\n                            Group Element\r\n                          </label>\r\n\r\n                          <select\r\n                            value={ParentElementId}\r\n                            {...register(\"CmbGrpElementId\")}\r\n                            className=\"form-control\"\r\n                            onChange={OnGroupIdChange}\r\n                          >\r\n                            {<option value=\"100\">-select-</option>}\r\n                            {GroupElements &&\r\n                              GroupElements.map((res) => (\r\n                                <option key={res.elna} value={res.elid}>\r\n                                  {res.elna}\r\n                                </option>\r\n                              ))}\r\n                          </select>\r\n                          <p>{errors.CmbGrpElementId?.message}</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <label className=\"form-label\">\r\n                    Screen and Table Element Mapping\r\n                  </label>\r\n                  <Scrollbar style={{ width: 1200, height: 550 }}>\r\n                    <Table striped bordered hover id=\"tblgridprop\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th className=\"text-center\">Id</th>\r\n                          <th className=\"text-center\">Column</th>\r\n                          <th className=\"text-center\">Element</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {\r\n                        \r\n                          TableColumn &&\r\n                          TableColumn.map((x) => {\r\n                            return (\r\n                              <tr>\r\n                                <td>{x.id}</td>\r\n                                <td>{x.na}</td>\r\n                                <td>\r\n                                  <DMelemDropdown\r\n                                    options={childelms}\r\n                                    value={x.tblelm}\r\n                                    ontblcolChange={ontblcolChange}\r\n                                    id={x.id}\r\n                                  />\r\n                                </td>\r\n\r\n                                <td>{x.tblelm}</td>\r\n                              </tr>\r\n                            );\r\n                          })\r\n                          \r\n                        }\r\n                      </tbody>\r\n                    </Table>\r\n                  </Scrollbar>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nexport default DomainDataMapping;\r\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\r\nimport api from \"../api/Webcall\";\r\n\r\n\r\nimport appsettings from \"../../appsettings.json\"\r\n\r\nconst apiendpoints = appsettings.ApiEndpoints;\r\n\r\n export const GetAllScreenList = async () => {\r\n\r\n\r\nlet Response;\r\n\r\n\r\n\r\nconst AllScreen = apiendpoints.AllScreen;\r\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n//  /* Header */\r\n const convID = generateUUID();\r\n const frmHdr = { convid: convID, tag: \"AllScreen\", orgid: \"\", vendid: \"0\" };\r\n const frmData = {}\r\n const data = { hdr: frmHdr, body: frmData };\r\n\r\n const token =    localStorage.getItem('token');\r\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \r\n\r\n const combonurl = AllScreen;\r\n\r\n console.log(combonurl); \r\n\r\n await api.post(combonurl, compressBase64(data),reqHdr).then(function (response) {\r\n    const strResponse = JSON.parse(decompressBase64(response.data));      \r\n       Response = strResponse ;\r\n\r\n  })\r\n\r\n  return  Response;\r\n\r\n};\r\n","import { generateUUID, compressBase64,decompressBase64 } from \"./utils\";\nimport api from \"../api/Webcall\";\n\n\nimport appsettings from \"../../appsettings.json\"\n\nconst apiendpoints = appsettings.ApiEndpoints;\n\n export const GetScreenGroupElms = async (cmbScrid) => {\n\n\nlet Response;\n\n\n\nconst screengroupelms = apiendpoints.Getscreengrpelms;\n const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\n//  /* Header */\n const convID = generateUUID();\n const frmHdr = { convid: convID, tag: \"Table List\", orgid: \"\", vendid: \"0\" };\n const frmData = {cmbScrid:cmbScrid}\n const data = { hdr: frmHdr, body: frmData };\n\n console.log(data); \n\n const token =    localStorage.getItem('token');\n const reqHdr = { headers: { Authorization: `Bearer ${token}` } };  \n\n await api.post(screengroupelms, compressBase64(data),reqHdr).then(function (response) {\n    const strResponse = JSON.parse(decompressBase64(response.data));      \n       Response = strResponse ;\n\n  })\n\n  return  Response;\n\n};\n"],"names":["apiendpoints","appsettings","props","_props$options","value","setValue","useState","onChangeListener","useCallback","event","ontblcolChange","id","target","useEffect","_jsxs","className","onChange","children","_jsx","options","map","option","k","v","schema","yup","shape","txtDDName","required","isLoading","setLoanding","Screenid","setScreenid","DBid","setDBid","screenfilterlist","setscreenfilterlist","tablelist","settablelist","Tableid","setTableid","GroupElements","setGroupElements","TableColumn","setTableColumn","PrkeyColumn","setPrkeyColumn","childelms","setscrchildelms","ParentElementId","setParentElementId","ColName","SetColName","ddmres","setddmres","Tablename","setTablename","DDMapId","setDDMapId","cmbctlres","setctlres","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","e","updatedTableColumn","key","tblelm","DDMapperOnChange","FetchDDMapper","async","cmbScrid","cmbDbShortName","cmbTblName","txtPrKey","CmbGrpElementId","GroupElmsResponse","Response","DomainDataMapping","GetDomainDataMapping","frmData","txtDDMapId","data","hdr","convid","generateUUID","tag","orgid","vendid","body","reqHdr","headers","Authorization","localStorage","getItem","console","log","api","post","compressBase64","then","response","strResponse","JSON","parse","decompressBase64","GetDomainDataMap","scrid","ddname","shorname","tblname","prkey","grpeid","FetchGroupElements","aryval","FetchTableList","filter","item","na","FetchScreenChildElements","FetchTableColumn","colmap","forEach","parentkey","childkey","tc","eid","ScreenOnChange","GetScreenGroupElms","srid","elements","onDBChange","idbid","TableListResponse","cmbDbShotName","TableList","GetTableList","GetDBTableList","tbls","OnTableListChange","dbid","tblid","TableColumnResponse","tbcmbDbShotName","GetTableColumn","cols","itm","OnGroupIdChange","parentelmid","optw","DUELM","FetchCombodata","duelm","onSubmitHandler","tbldata","rec","push","txtDDMapid","txtTblName","cmbGrpElementId","frmHdr","reqdata","Updatedomaindatamapping","UpdtDomainDataMapping","rst","toast","error","stringify","fdr","rstmsg","setTimeout","success","err","message","ctbl","ddm","LoadCombo","ScreenListResponse","GetAllScreenList","Screens","res","IsActive","FetchAllScreenList","_errors$txtDDMapid","_errors$txtDDName","_errors$cmbScrid","_errors$cmbDbShortNam","_errors$cmbTblName","_errors$txtPrkey","_errors$CmbGrpElement","_Fragment","style","borderRadius","Spinner","Alerts","alert","onSubmit","autocomplete","htmlFor","length","type","ScreenId","ScrName","txtPrkey","elid","elna","Scrollbar","width","height","Table","striped","bordered","hover","x","DMelemDropdown","AllScreen","combonurl","screengroupelms","Getscreengrpelms"],"sourceRoot":""}