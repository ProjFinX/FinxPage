{"version":3,"file":"static/js/745.f8bcd05b.chunk.js","mappings":"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","sources":["components/company/Branch.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport {FetchCombodata} from '../utilities/combodata';\r\nimport api from \"../api/Webcall\";\r\nimport { generateUUID, compressLZW, decompressLZW, compressBase64, decompressBase64 } from \"../utilities/utils\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport Alerts from \"../htmlcomponents/Alerts\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n\r\n// Yup validation schema \r\n\r\nconst schema = yup.object().shape({\r\n    txtBranchName: yup.string().required(\"Branch Name can not be empty\"),\r\n    txtAddress: yup.string().required(\"Address can not be empty\").min(10).max(250),\r\n    txtCity: yup.string().required(\"City can not be empty\").min(3).max(250),\r\n     cmbProvinceStateId: yup.string().required(\"Please select the Provicence\"),\r\n     txtPhoneNo: yup.string().required(\"Phone no. can not be empty\").max(10,\"Phone no. Max lenght is 10 \"),   \r\n     txtEmail: yup.string().email(\"Pls provide Valid  Email id\").required(\"Email can not be empty\"),\r\n     txtAltEmail: yup.string().email(\"Pls provide Valid Alternate Email id\"),\r\n     txtBookStartedOn: yup.string().required(\"Book Stated on date can not be empty\"),\r\n     txtFYStartsOn: yup.string().required(\"Fin. year Stated on date can not be empty\"),\r\n     cmbBaseCurrid: yup.string().required(\"Please select Base Currency\")\r\n\r\n});\r\n\r\n\r\n// Function Component Branch\r\n\r\nconst Branch = () => {\r\n\r\n\r\n \r\n    \r\n        // Combo Data fetching------------------------------\r\n\r\n        const[resbody,setresbody]= useState([]);\r\n        const LoadCombo = async () => {\r\n            // Update state with incremented value\r\n\r\n            const opt = '|CUN|PSM|';\r\n            const optw = '';\r\n        // debugger;\r\n\r\n        const Response = await FetchCombodata(opt,optw);// JSON.stringify(await FetchCombodata(opt,optw));\r\n\r\n            setresbody(Response.body.psm)\r\n            console.log('rerendering method')\r\n        }; \r\n\r\n        useEffect(() => {\r\n            LoadCombo(); \r\n            console.log('rerendering')\r\n        \r\n        },[])\r\n\r\n\r\n        //-----------------------------\r\n\r\n\r\n        const { register, handleSubmit, formState: { errors }, reset } = useForm({\r\n            resolver: yupResolver(schema),\r\n         });\r\n\r\n         \r\n        const [alert, setAlert] = useState(\"\");\r\n\r\n        const [isLoading , setLoanding]  = useState(false);\r\n\r\n         const [branchmaster, setbranchmaster] = useState({            \r\n          });\r\n\r\n              \r\n     \r\n     const navigate = useNavigate();\r\n     const onSubmitHandler = async(data) => {\r\n      setLoanding(true);\r\n      console.log(\"Enter Create new branch api call\");\r\n      console.log(data);\r\n      //e.preventDefault();\r\n      /* Header */\r\n      const convID = generateUUID();\r\n      const frmHdr = {\r\n            convid: convID,\r\n            tag: \"NewBranch\",\r\n            orgid: \"\",\r\n            vendid: \"0\",\r\n      };    \r\n      const frmData = data;\r\n      const reqdata = { hdr: frmHdr, body: frmData }  \r\n      const token =    localStorage.getItem('token');\r\n      const reqHdr = { headers: { Authorization: `Bearer ${token}` } };    \r\n      const CoreUrl = process.env.REACT_APP_FinXCoreUrl;\r\n      const createbranchnurl =  \"/cmpstp/crtbrch\";\r\n      console.log(reqHdr)\r\n      try {\r\n        //debugger;\r\n        const response = await api.post(createbranchnurl, compressBase64(reqdata),reqHdr);\r\n       // const response = await PostCallHeader(createbranchnurl, compressBase64(reqdata),reqHdr);\r\n       \r\n         const strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n        console.log(strResponse);\r\n  \r\n        if (strResponse.hdr.rst == \"FAILED\" || strResponse.hdr.rst == \"ERROR\") {             \r\n             ShowAlert(\"Error\", JSON.stringify(strResponse.fdr));\r\n             setLoanding(false);\r\n        } else {\r\n              ShowAlert(\"Error\", JSON.stringify(strResponse.fdr));\r\n              setLoanding(false);\r\n              navigate(\"/Home\");\r\n        }\r\n      } catch (err) {\r\n      \r\n        console.log(err.message);     \r\n        ShowAlert(\"Error\", \"Unable to process request\")\r\n        setLoanding(false);\r\n        \r\n      }\r\n  \r\n      \r\n    };\r\n\r\n    \r\n    \r\n  const ShowAlert = (alertType, message) => {\r\n    setAlert({\r\n      AlertType: alertType,\r\n      message: message,\r\n    });\r\n  };\r\n\r\n\r\n  try {\r\n    \r\n\r\n\r\n  return (\r\n\r\n\r\n        <>\r\n          <section className=\"vh-100\">\r\n            <div className=\"container h-100\">\r\n                {/* <div className=\"row d-flex justify-content-center align-items-center h-100\">\r\n                  <div className=\"col-lg-12 col-xl-11\"> */}\r\n                      <div className=\"card text-black\" style={{ borderRadius: \"25px\" }}>\r\n                      <div className=\"card-header\">\r\n                        <strong className=\"card-title\">Branch</strong>\r\n                      </div>\r\n                      <div className=\"card-body p-md-5\">\r\n\r\n                      {isLoading?(<Spinner></Spinner>) :\"\"}                        \r\n                       <Alerts alert={alert} />                       \r\n\r\n                        <form onSubmit={handleSubmit(onSubmitHandler)}>\r\n                            <div className=\"row\">\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"txtBranchName\" className=\"form-label\"> Branch Name</label>\r\n                                    <input {...register(\"txtBranchName\")} type=\"text\" className=\"form-control\"  />\r\n                                    <p>{errors.txtBranchName?.message}</p>\r\n                                  </div>\r\n                              </div>\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"txtAddress\" className=\"form-label\">Address</label>\r\n                                    <textarea {...register(\"txtAddress\")}  type=\"textarea\" height={20} className=\"form-control\"   />\r\n                                    <p>{errors.txtAddress?.message}</p>\r\n                                  </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"txtCity\" className=\"form-label\"> City</label>\r\n                                    <input {...register(\"txtCity\")} type=\"text\" className=\"form-control\"  />\r\n                                    <p>{errors.txtCity?.message}</p>\r\n                                  </div>\r\n                              </div>\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"cmbProvinceStateId\" className=\"form-label\">Province State</label>\r\n                                    <select {...register(\"cmbProvinceStateId\")}  className=\"form-control\" > \r\n                                    <option value=\"\">- Select -</option>\r\n                                    {  //Combo Data binding\r\n                                    resbody.map((res) => \r\n                                    (\r\n                                    <option key={res.k} value={res.k}>{res.v}</option>\r\n                                    ))\r\n                                    }\r\n                                    </select>\r\n                                    <p>{errors.cmbProvinceStateId?.message}</p>\r\n                                  </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"txtPhoneNo\" className=\"form-label\"> Phone no</label>\r\n                                    <input {...register(\"txtPhoneNo\")} type=\"text\" className=\"form-control\"  />\r\n                                    <p>{errors.txtPhoneNo?.message}</p>\r\n                                  </div>\r\n                              </div>\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"txtAltPhoneNo\" className=\"form-label\">Alt Phone no</label>\r\n                                    <input {...register(\"txtAltPhoneNo\")} type=\"text\" className=\"form-control\"  />\r\n                                    <p>{errors.txtAltPhoneNo?.message}</p>\r\n                                  </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"txtEmail\" className=\"form-label\"> EMail</label>\r\n                                    <input {...register(\"txtEmail\")} type=\"email\" className=\"form-control\"  />\r\n                                    <p>{errors.txtEmail?.message}</p>\r\n                                  </div>\r\n                              </div>\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"txtAltEmail\" className=\"form-label\">Alt Email</label>\r\n                                    <input {...register(\"txtAltEmail\")} type=\"email\" className=\"form-control\"  />\r\n                                    <p>{errors.txtAltEmail?.message}</p>\r\n                                  </div>\r\n                              </div>\r\n                            </div>\r\n                           \r\n                            <div className=\"row\">\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"txtBookStartedOn\" className=\"form-label\"> Book Started On</label>\r\n                                    <input {...register(\"txtBookStartedOn\")} type=\"date\" className=\"form-control\"   placeholder=\"YYYY-MM-DD\"/>\r\n                                    <p>{errors.txtBookStartedOn?.message}</p>\r\n                                  </div>\r\n                              </div>\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"txtFYStartsOn\" className=\"form-label\">FY Starts On</label>\r\n                                    <input {...register(\"txtFYStartsOn\")} type=\"date\" className=\"form-control\"   placeholder=\"YYYY-MM-DD\"/>\r\n                                    <p>{errors.txtFYStartsOn?.message}</p>\r\n                                  </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                    <label htmlFor=\"cmbBaseCurrid\" className=\"form-label\"> Base Currency</label>\r\n                                    <select {...register(\"cmbBaseCurrid\")} className=\"form-control\" >\r\n                                    <option value=\"\">- Select -</option>\r\n                                    <option value=\"1\">INR</option>\r\n                                    <option value=\"2\">ZMW</option>\r\n                                    <option value=\"3\">USD</option>\r\n                                    <option value=\"4\">EUR</option>\r\n                                    </select>\r\n                                    <p>{errors.cmbBaseCurrid?.message}</p>\r\n                                  </div>\r\n                              </div>\r\n                              <div className=\"col-sm\">\r\n                                  <div className=\"mb-3\">\r\n                                  </div>\r\n                              </div>\r\n                            </div>\r\n                            <button type=\"submit\" className=\"btn btn-primary\">\r\n                            Submit\r\n                            </button>\r\n                        </form>\r\n                      </div>\r\n                  </div>\r\n                </div>\r\n            {/* </div>\r\n            </div> */}\r\n          </section>\r\n    </>\r\n  );\r\n\r\n} catch (err) {\r\n\r\n  console.log(err.message);     \r\n      \r\n}\r\n\r\n};\r\n\r\nexport default Branch;"],"names":["schema","yup","shape","txtBranchName","required","txtAddress","min","max","txtCity","cmbProvinceStateId","txtPhoneNo","txtEmail","email","txtAltEmail","txtBookStartedOn","txtFYStartsOn","cmbBaseCurrid","Branch","resbody","setresbody","useState","useEffect","async","Response","FetchCombodata","body","psm","console","log","LoadCombo","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","alert","setAlert","isLoading","setLoanding","branchmaster","setbranchmaster","navigate","useNavigate","onSubmitHandler","data","reqdata","hdr","convid","generateUUID","tag","orgid","vendid","reqHdr","headers","Authorization","localStorage","getItem","response","api","post","compressBase64","strResponse","JSON","parse","decompressBase64","rst","ShowAlert","stringify","fdr","err","message","alertType","AlertType","_errors$txtBranchName","_errors$txtAddress","_errors$txtCity","_errors$cmbProvinceSt","_errors$txtPhoneNo","_errors$txtAltPhoneNo","_errors$txtEmail","_errors$txtAltEmail","_errors$txtBookStarte","_errors$txtFYStartsOn","_errors$cmbBaseCurrid","_jsx","_Fragment","children","className","_jsxs","style","borderRadius","Spinner","Alerts","onSubmit","htmlFor","type","height","value","map","res","k","v","txtAltPhoneNo","placeholder"],"sourceRoot":""}