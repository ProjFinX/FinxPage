{"version":3,"file":"static/js/588.28c6b463.chunk.js","mappings":"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","sources":["components/dynamiccontents/BusinessLogics/EventHandler.js","components/dynamiccontents/BusinessLogics/FormDataHelper.js","components/dynamiccontents/Contexts/FormContext.js","components/utilities/DocViewer/drivers/ImageViewer.jsx","components/utilities/DocViewer/drivers/OtherViewer.jsx","components/utilities/DocViewer/drivers/PDFViewer.jsx","components/utilities/DocViewer/DocViewer.jsx","components/htmlcomponents/AccessDenied.jsx","components/htmlcomponents/Timeline.jsx","components/dynamiccontents/components/Sidepanel.jsx","components/htmlcomponents/LoadingLine.jsx","components/dynamiccontents/controls/MultiSearchControl.jsx","components/dynamiccontents/RenderScreen.jsx","components/dynamiccontents/LoadScreen.jsx","components/dynamiccontents/controls/Charts/PieChart.jsx","components/dynamiccontents/controls/HTMLRenderer.js","components/dynamiccontents/controls/FormGrid.js","components/dynamiccontents/OneScreen.jsx","components/dynamiccontents/RenderUI.jsx","components/dynamiccontents/controls/Button.js","components/dynamiccontents/controls/CheckBox.js","components/dynamiccontents/controls/ComboBox.js","components/dynamiccontents/controls/DateBox.js","components/dynamiccontents/controls/DateTimeBox.js","components/dynamiccontents/controls/File.js","components/dynamiccontents/controls/Grid.js","components/dynamiccontents/controls/GridComponents/GrButton.js","components/dynamiccontents/controls/GridComponents/GrCheckbox.js","components/dynamiccontents/controls/GridComponents/GrComboBox.js","components/dynamiccontents/controls/GridComponents/GrDateBox.js","components/dynamiccontents/controls/GridComponents/GrFile.js","components/dynamiccontents/controls/GridComponents/GrHeader.js","components/dynamiccontents/controls/GridComponents/GrModal.js","components/dynamiccontents/controls/GridComponents/GrNumericBox.js","components/dynamiccontents/controls/GridComponents/GrPopupForm.js","components/dynamiccontents/controls/Label.js","components/dynamiccontents/controls/MultiLineTextBox.js","components/dynamiccontents/controls/NumericBox.js","components/dynamiccontents/controls/PopupForm.js","components/dynamiccontents/controls/RadioButton.js","components/dynamiccontents/controls/TextBox.js","components/htmlcomponents/ConfimationModal.jsx","components/utilities/apidataformatter.js"],"sourcesContent":["import { FetchCombodata } from \"../../utilities/combodata\";\r\nimport { getPostData } from \"../../utilities/apidataformatter\";\r\nimport appsettings from \"../../../appsettings.json\";\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../../utilities/utils\";\r\nimport api from \"../../api/Webcall\";\r\nimport FormDataHelper from \"./FormDataHelper\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nvar context = {};\r\n\r\nconst reloadCombo = async (\r\n  srcElementname,\r\n  setValuepar,\r\n  getValues,\r\n  setValue,\r\n  setConmddata,\r\n  elements\r\n) => {\r\n  try {\r\n    // setValuepar = \"cmb_Province\";\r\n\r\n    debugger;\r\n\r\n    const cmbelementdata = elements.find(\r\n      (e) => e.fieldname == setValuepar\r\n    ).elementdata;\r\n\r\n    const opt = \"|\" + cmbelementdata.cod + \"|\";\r\n\r\n    const regex = /\\$\\#\\w+\\#\\$/gi;\r\n\r\n    const found = cmbelementdata.con.match(regex);\r\n\r\n    const val = cmbelementdata.con.replace(\r\n      found[0],\r\n      getValues(found[0].replace(\"$#\", \"\").replace(\"#$\", \"\"))\r\n    );\r\n    const cod = cmbelementdata.cod.toLocaleUpperCase();\r\n    const ctr = cmbelementdata.cstr;\r\n    let optw = {};\r\n\r\n    optw = { [cod]: val };\r\n\r\n    const comcombres = await FetchCombodata(opt, optw, ctr);\r\n\r\n    const finalcmbData = {};\r\n\r\n    if (comcombres.body[cmbelementdata.cod].length > 0) {\r\n      finalcmbData[setValuepar] = comcombres.body[cmbelementdata.cod];\r\n      const cmddata = { ...setValue, ...finalcmbData };\r\n      setConmddata(cmddata);\r\n    } else {\r\n      comcombres.body[cmbelementdata.cod] = [];\r\n\r\n      finalcmbData[setValuepar] = comcombres.body[cmbelementdata.cod];\r\n\r\n      const cmddata = { ...setValue, ...finalcmbData };\r\n\r\n      setConmddata(cmddata);\r\n    }\r\n  } catch {\r\n    console.log(\"Error in loading combo data \");\r\n  }\r\n};\r\n\r\nconst extractFilename = (fileText) => {\r\n  const [fileId, fileName] = fileText.split(\"|\");\r\n\r\n  return { fileId, fileName };\r\n};\r\n/* Initialize the Functions */\r\nexport const Setup = () => {\r\n  context[\"reloadCombo\"] = reloadCombo;\r\n};\r\n\r\n// this is the method performing execution of functions\r\nfunction execFn(fnName, ctx /*, args */) {\r\n  // get passed arguments except first two (fnName, ctx)\r\n  var args = Array.prototype.slice.call(arguments, 2);\r\n  // execute the function with passed parameters and return result\r\n  return ctx[fnName].apply(ctx, args);\r\n}\r\n\r\n// Date Conversion \r\n\r\nconst convertDate = (dateObj) => {\r\n\r\n  // Extract year, month, and day\r\n  const year = dateObj.getFullYear();\r\n  const month = ('0' + (dateObj.getMonth() + 1)).slice(-2); // Months are zero-indexed\r\n  const day = ('0' + dateObj.getDate()).slice(-2);\r\n\r\n  // Format to 'YYYY-MM-DD'\r\n  const formattedDate = `${year}-${month}-${day}`;\r\n\r\n  return formattedDate\r\n\r\n}\r\n\r\nexport const EventCaller = (\r\n  funcname,\r\n  srcElementname,\r\n  setValuepar,\r\n  getValues,\r\n  setValue,\r\n  setConmddata,\r\n  elements\r\n) => {\r\n  execFn(\r\n    funcname,\r\n    context,\r\n    srcElementname,\r\n    setValuepar,\r\n    getValues,\r\n    setValue,\r\n    setConmddata,\r\n    elements\r\n  );\r\n};\r\n\r\nexport const ServerEventCaller = async (\r\n  eDefHldr,\r\n  frmData,\r\n  v,\r\n  stageGridRefs,\r\n  setValue,\r\n  FormContext,\r\n  seteDefHldr\r\n) => {\r\n  let setEventLoading = FormContext.setEventLoading;\r\n\r\n  try {\r\n    debugger;\r\n\r\n    var evntDet = {};\r\n\r\n    let griddata = {};\r\n\r\n    griddata = FormDataHelper.ProcessStageGridData(FormContext);\r\n\r\n    // for (var key in stageGridRefs) {\r\n    //   let rowData = {};\r\n    //   stageGridRefs[key].current.api.forEachNode(node => Object.assign(rowData, { [node.data.rowid]: node.data }));\r\n    //   griddata = { [key]: rowData }\r\n    // };\r\n\r\n    /*Setting Event Loading Animation */\r\n    setEventLoading(true);\r\n\r\n    griddata = { [\"_gridData\"]: JSON.stringify(griddata) };\r\n\r\n    frmData = FormDataHelper.ProcessStageelementsData(\r\n      FormContext.stageElements.elms,\r\n      \"\",\r\n      FormContext\r\n    );\r\n\r\n    /* Update form data with document id  */\r\n    for (var key in eDefHldr.fil) {\r\n      if (eDefHldr.fil.hasOwnProperty(key)) {\r\n        // qdata[key] = eDefHldr.fil[key][\"docid\"];\r\n        frmData[key] = {};\r\n        frmData[key][\"id\"] = eDefHldr.fil[key][\"docid\"];\r\n        frmData[key][\"name\"] = FormContext.getValues(key)[0].name;\r\n      }\r\n    }\r\n\r\n    frmData = { ...frmData, ...griddata };\r\n\r\n    evntDet[\"scrverid\"] = eDefHldr.qdet[\"scrverid\"];\r\n    evntDet[\"scrid\"] = eDefHldr.qdet[\"scrid\"];\r\n    evntDet[\"stgid\"] = eDefHldr.qdet[\"stgid\"];\r\n    evntDet[\"method\"] = v;\r\n    evntDet[\"qid\"] = eDefHldr.qdet[\"qid\"];\r\n    evntDet[\"_rid\"] = \"\";\r\n    evntDet[\"_pgr_rid\"] = \"\";\r\n\r\n    var data = getPostData(\"Call:\" + v, frmData, \"_sev\", evntDet);\r\n\r\n    const endpoints = appsettings.ApiEndpoints;\r\n\r\n    let result = await api.post(endpoints.ServerEvent, compressBase64(data));\r\n\r\n    let strResponse = JSON.parse(decompressBase64(result.data));\r\n\r\n    if (result.status == 200 && strResponse.hdr.rst == \"SUCCESS\") {\r\n      /* Reload Combo */\r\n\r\n      let neweDefHldr = { ...eDefHldr }\r\n\r\n      if (strResponse.body[\"_reloadcmb\"]) {\r\n        let data = {};\r\n\r\n        let key = \"_reloadcmb\";\r\n\r\n        strResponse.body[key].forEach((element) => {\r\n          let finalcmbData = {};\r\n\r\n          //  let cod = FormContext.cntrData[element.elm].cod;\r\n\r\n          finalcmbData[element.elm] = element.data;\r\n\r\n          //finalcmbData[element.elm] = cod;\r\n\r\n          //data = { ...data ,  [cod] : element.data }\r\n\r\n          data = { ...data, ...finalcmbData };\r\n        });\r\n\r\n        const cmddata = { ...FormContext.combodata, ...data };\r\n\r\n        console.log(cmddata);\r\n        await FormContext.setComboData(cmddata);\r\n      }\r\n\r\n      if (strResponse.body[\"_mltsrch\"]) {\r\n\r\n        \r\n        FormContext.setMultiSearchData(strResponse.body[\"_mltsrch\"]);\r\n\r\n        FormContext.setModalVisible(true);\r\n\r\n\r\n      }\r\n      // Wait for the next render cycle before setting values\r\n      requestAnimationFrame(() => {\r\n        for (let key in strResponse.body) {\r\n          if (key == \"_prp\") {\r\n\r\n            strResponse.body._prp.forEach((item , index) => {\r\n              const fieldKey = Object.keys(item)[0];\r\n\r\n              neweDefHldr.stg.prp[fieldKey] = strResponse.body._prp[index][fieldKey]\r\n            });\r\n\r\n\r\n          }\r\n          if (key == \"gridData\") {\r\n            for (let gridKey in strResponse.body.gridData) {\r\n              let newdata = Object.keys(strResponse.body.gridData[gridKey]).map(\r\n                (item) => {\r\n                  return {\r\n                    ...strResponse.body.gridData[gridKey][item],\r\n                    _IsDel: false, // Set _IsDel to false\r\n                  };\r\n                }\r\n              );\r\n\r\n              // stageGridRefs[gridKey].current.api.setRowdata(newdata); // This has bee removed in new ag grid version\r\n              const allRowNodes = [];\r\n              stageGridRefs[gridKey].current.api.forEachNode((node) => allRowNodes.push(node.data));\r\n              stageGridRefs[gridKey].current.api.applyTransaction({ remove: allRowNodes });\r\n              stageGridRefs[gridKey].current.api.applyTransaction({ add: newdata });\r\n\r\n              stageGridRefs[gridKey].current.api.autoSizeAllColumns();\r\n              // stageGridRefs[gridKey].current.api.redrawRows();\r\n            }\r\n          }\r\n          //set Combo values\r\n          if (FormContext.cntrData[key]?.ty == 4) {\r\n            const dateValue = new Date(strResponse.body[key]);\r\n\r\n            //const formattedDate = dateValue.toISOString().split(\"T\")[0];\r\n\r\n            const formattedDate = convertDate(dateValue)\r\n\r\n            eDefHldr.stg.elms[key] && setValue(key, formattedDate);\r\n\r\n            if (eDefHldr.stg.elms[key]) {\r\n\r\n              neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n              neweDefHldr['elmsData'][key] = formattedDate;\r\n            }\r\n\r\n\r\n          } else if (FormContext.cntrData[key]?.ty == 9) {\r\n            let filedetails = [];\r\n            filedetails.push({\r\n              id: strResponse.body[key] && extractFilename(strResponse.body[key])?.fileId,\r\n              name: strResponse.body[key] && extractFilename(strResponse.body[key])?.fileName,\r\n              mode: \"Qdata\",\r\n            });\r\n            if (eDefHldr.stg.elms[key]) {\r\n\r\n              setValue(key, filedetails ,  { shouldValidate: true });\r\n\r\n            }\r\n            else if(eDefHldr.elms[key]) {\r\n              neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n              neweDefHldr['elmsData'][key] = filedetails;\r\n            }\r\n\r\n          } else if (FormContext.cntrData[key]?.ty == 3) {\r\n\r\n            if (eDefHldr.stg.elms[key]) {\r\n\r\n              setValue(key, strResponse.body[key], true);\r\n            }\r\n            else if(eDefHldr.elms[key]) {\r\n              neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n              neweDefHldr['elmsData'][key] = strResponse.body[key];\r\n            }\r\n\r\n          }\r\n          else {\r\n            //Set Other data\r\n            if (eDefHldr.stg.elms[key]) {\r\n\r\n              setValue(key, strResponse.body[key] , { shouldValidate: true });\r\n            }\r\n\r\n            else if(eDefHldr.elms[key]) {\r\n              neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n              neweDefHldr['elmsData'][key] = strResponse.body[key];\r\n            }\r\n\r\n\r\n          }\r\n        }\r\n\r\n        \r\n      //Update State to referesh the properties\r\n      seteDefHldr(neweDefHldr);\r\n\r\n      });\r\n\r\n\r\n    }\r\n\r\n    //This will trigger stop event\r\n    if (result.status == 200 && strResponse.hdr.rst == \"STOP\") {\r\n      for (let key in strResponse.body) {\r\n        if (key == \"gridData\") {\r\n          for (let gridKey in strResponse.body.gridData) {\r\n            let newdata = Object.keys(strResponse.body.gridData[gridKey]).map(\r\n              (item) => {\r\n                return {\r\n                  ...strResponse.body.gridData[gridKey][item],\r\n                  _IsDel: false, // Set _IsDel to false\r\n                };\r\n              }\r\n            );\r\n\r\n            stageGridRefs[gridKey].current.api.applyTransaction({ add: newdata });\r\n\r\n            stageGridRefs[gridKey].current.api.autoSizeAllColumns();\r\n            // stageGridRefs[gridKey].current.api.redrawRows();\r\n          }\r\n        }\r\n        //set Combo values\r\n        if (key == \"_reloadcmb\") {\r\n          let data = {};\r\n\r\n          strResponse.body[key].forEach((element) => {\r\n            let finalcmbData = {};\r\n\r\n            //  let cod = FormContext.cntrData[element.elm].cod;\r\n\r\n            finalcmbData[element.elm] = element.data;\r\n\r\n            //finalcmbData[element.elm] = cod;\r\n\r\n            //data = { ...data ,  [cod] : element.data }\r\n\r\n            data = { ...data, ...finalcmbData };\r\n          });\r\n\r\n          const cmddata = { ...FormContext.combodata, ...data };\r\n\r\n          console.log(cmddata);\r\n          FormContext.setComboData(cmddata);\r\n        }\r\n        //Set Data value\r\n        if (FormContext.cntrData[key]?.ty == 4) {\r\n          const dateValue = new Date(strResponse.body[key]);\r\n\r\n          // const formattedDate = dateValue.toISOString().split(\"T\")[0];\r\n\r\n          const formattedDate = convertDate(dateValue)\r\n\r\n          eDefHldr.stg.elms[key] && setValue(key, formattedDate);\r\n        } else if (FormContext.cntrData[key]?.ty == 9) {\r\n          let filedetails = [];\r\n          filedetails.push({\r\n            id: extractFilename(strResponse.body[key])?.fileId,\r\n            name: extractFilename(strResponse.body[key])?.fileName,\r\n            mode: \"Qdata\",\r\n          });\r\n          eDefHldr.stg.elms[key] && setValue(key, filedetails);\r\n        } else {\r\n          //Set Other data\r\n          eDefHldr.stg.elms[key] && setValue(key, strResponse.body[key]);\r\n        }\r\n      }\r\n\r\n      strResponse.fdr.forEach((item) => {\r\n        setEventLoading(false);\r\n\r\n        toast.error(item.rstmsg, \"Error!\", 2000);\r\n      });\r\n    }\r\n\r\n\r\n    setEventLoading(false);\r\n  } catch (ex) {\r\n    setEventLoading(false);\r\n  }\r\n};\r\n\r\nexport const MultiSearchServerEventCaller = async (\r\n  eDefHldr,\r\n  frmData,\r\n  v,\r\n  stageGridRefs,\r\n  setValue,\r\n  FormContext,\r\n  seteDefHldr,\r\n  selectedRowData\r\n) => {\r\n  let setEventLoading = FormContext.setEventLoading;\r\n\r\n  try {\r\n    debugger;\r\n\r\n    var evntDet = {};\r\n\r\n    let griddata = {};\r\n\r\n    // griddata = FormDataHelper.ProcessStageGridData(FormContext);\r\n\r\n    // for (var key in stageGridRefs) {\r\n    //   let rowData = {};\r\n    //   stageGridRefs[key].current.api.forEachNode(node => Object.assign(rowData, { [node.data.rowid]: node.data }));\r\n    //   griddata = { [key]: rowData }\r\n    // };\r\n\r\n    /*Setting Event Loading Animation */\r\n    setEventLoading(true);\r\n\r\n    // griddata = { [\"_gridData\"]: JSON.stringify(griddata) };\r\n\r\n    // frmData = FormDataHelper.ProcessStageelementsData(\r\n    //   FormContext.stageElements.elms,\r\n    //   \"\",\r\n    //   FormContext\r\n    // );\r\n\r\n    /* Update form data with document id  */\r\n    // for (var key in eDefHldr.fil) {\r\n    //   if (eDefHldr.fil.hasOwnProperty(key)) {\r\n    //     // qdata[key] = eDefHldr.fil[key][\"docid\"];\r\n    //     frmData[key] = {};\r\n    //     frmData[key][\"id\"] = eDefHldr.fil[key][\"docid\"];\r\n    //     frmData[key][\"name\"] = FormContext.getValues(key)[0].name;\r\n    //   }\r\n    // }\r\n\r\n    var othParam = { ...selectedRowData };\r\n    frmData = { \"_othParams\": othParam };\r\n\r\n    evntDet[\"scrverid\"] = eDefHldr.qdet[\"scrverid\"];\r\n    evntDet[\"scrid\"] = eDefHldr.qdet[\"scrid\"];\r\n    evntDet[\"stgid\"] = eDefHldr.qdet[\"stgid\"];\r\n    evntDet[\"method\"] = v;\r\n    evntDet[\"qid\"] = eDefHldr.qdet[\"qid\"];\r\n    evntDet[\"_rid\"] = \"\";\r\n    evntDet[\"_pgr_rid\"] = \"\";\r\n\r\n    var data = getPostData(\"Call:\" + v, frmData, \"_sev\", evntDet);\r\n\r\n    const endpoints = appsettings.ApiEndpoints;\r\n\r\n    let result = await api.post(endpoints.ServerEvent, compressBase64(data));\r\n\r\n    let strResponse = JSON.parse(decompressBase64(result.data));\r\n\r\n    if (result.status == 200 && strResponse.hdr.rst == \"SUCCESS\") {\r\n      /* Reload Combo */\r\n\r\n      let neweDefHldr = { ...eDefHldr }\r\n\r\n      if (strResponse.body[\"_reloadcmb\"]) {\r\n        let data = {};\r\n\r\n        let key = \"_reloadcmb\";\r\n\r\n        strResponse.body[key].forEach((element) => {\r\n          let finalcmbData = {};\r\n\r\n          //  let cod = FormContext.cntrData[element.elm].cod;\r\n\r\n          finalcmbData[element.elm] = element.data;\r\n\r\n          //finalcmbData[element.elm] = cod;\r\n\r\n          //data = { ...data ,  [cod] : element.data }\r\n\r\n          data = { ...data, ...finalcmbData };\r\n        });\r\n\r\n        const cmddata = { ...FormContext.combodata, ...data };\r\n\r\n        console.log(cmddata);\r\n        await FormContext.setComboData(cmddata);\r\n      }\r\n\r\n      if (strResponse.body[\"_mltsrch\"]) {\r\n\r\n        FormContext.setModalVisible(true);\r\n\r\n        FormContext.setMultiSearchData(strResponse.body[\"_mltsrch\"]);\r\n\r\n      }\r\n      // Wait for the next render cycle before setting values\r\n      requestAnimationFrame(() => {\r\n        for (let key in strResponse.body) {\r\n          if (key == \"_prp\") {\r\n            strResponse.body._prp.forEach((item , index)=> {\r\n              const fieldKey = Object.keys(item)[0];\r\n\r\n              neweDefHldr.stg.prp[fieldKey] = strResponse.body._prp[index][fieldKey]\r\n            });\r\n\r\n          }\r\n          if (key == \"gridData\") {\r\n            for (let gridKey in strResponse.body.gridData) {\r\n              let newdata = Object.keys(strResponse.body.gridData[gridKey]).map(\r\n                (item) => {\r\n                  return {\r\n                    ...strResponse.body.gridData[gridKey][item],\r\n                    _IsDel: false, // Set _IsDel to false\r\n                  };\r\n                }\r\n              );\r\n\r\n              stageGridRefs[gridKey].current.api.applyTransaction({ add: newdata });\r\n\r\n              stageGridRefs[gridKey].current.api.autoSizeAllColumns();\r\n              // stageGridRefs[gridKey].current.api.redrawRows();\r\n            }\r\n          }\r\n          //set Combo values\r\n          if (FormContext.cntrData[key]?.ty == 4) {\r\n            const dateValue = new Date(strResponse.body[key]);\r\n\r\n            //const formattedDate = dateValue.toISOString().split(\"T\")[0];\r\n\r\n            const formattedDate = convertDate(dateValue)\r\n\r\n            if (eDefHldr.stg.elms[key]) {\r\n              setValue(key, formattedDate);\r\n            }\r\n            else if(eDefHldr.elms[key]){\r\n              neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n              neweDefHldr['elmsData'][key] = formattedDate;\r\n            }\r\n          } else if (FormContext.cntrData[key]?.ty == 9) {\r\n            let filedetails = [];\r\n            filedetails.push({\r\n              id: strResponse.body[key] && extractFilename(strResponse.body[key])?.fileId,\r\n              name: strResponse.body[key] && extractFilename(strResponse.body[key])?.fileName,\r\n              mode: \"Qdata\",\r\n            });\r\n            if (eDefHldr.stg.elms[key]) {\r\n\r\n              setValue(key, filedetails);\r\n            }\r\n            else if(eDefHldr.elms[key]){\r\n              neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n              neweDefHldr['elmsData'][key] = filedetails;\r\n            }\r\n\r\n          } else if (FormContext.cntrData[key]?.ty == 3) {\r\n\r\n            if (eDefHldr.stg.elms[key]) {\r\n\r\n              setValue(key, strResponse.body[key], true);\r\n            }\r\n\r\n            else if(eDefHldr.elms[key]) {\r\n              neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n              neweDefHldr['elmsData'][key] = strResponse.body[key];\r\n            }\r\n\r\n          }\r\n          else {\r\n            //Set Other data\r\n            if (eDefHldr.stg.elms[key]) {\r\n              setValue(key, strResponse.body[key]);\r\n            }\r\n            else if(eDefHldr.elms[key]) {\r\n              neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n              neweDefHldr['elmsData'][key] = strResponse.body[key];\r\n            }\r\n\r\n\r\n          }\r\n        }\r\n\r\n        //Update State to referesh the properties\r\n        seteDefHldr(neweDefHldr);\r\n      });\r\n\r\n\r\n    }\r\n\r\n    //This will trigger stop event\r\n    if (result.status == 200 && strResponse.hdr.rst == \"STOP\") {\r\n      for (let key in strResponse.body) {\r\n        if (key == \"gridData\") {\r\n          for (let gridKey in strResponse.body.gridData) {\r\n            let newdata = Object.keys(strResponse.body.gridData[gridKey]).map(\r\n              (item) => {\r\n                return {\r\n                  ...strResponse.body.gridData[gridKey][item],\r\n                  _IsDel: false, // Set _IsDel to false\r\n                };\r\n              }\r\n            );\r\n\r\n            stageGridRefs[gridKey].current.api.applyTransaction({ add: newdata });\r\n\r\n            stageGridRefs[gridKey].current.api.autoSizeAllColumns();\r\n            // stageGridRefs[gridKey].current.api.redrawRows();\r\n          }\r\n        }\r\n        //set Combo values\r\n        if (key == \"_reloadcmb\") {\r\n          let data = {};\r\n\r\n          strResponse.body[key].forEach((element) => {\r\n            let finalcmbData = {};\r\n\r\n            //  let cod = FormContext.cntrData[element.elm].cod;\r\n\r\n            finalcmbData[element.elm] = element.data;\r\n\r\n            //finalcmbData[element.elm] = cod;\r\n\r\n            //data = { ...data ,  [cod] : element.data }\r\n\r\n            data = { ...data, ...finalcmbData };\r\n          });\r\n\r\n          const cmddata = { ...FormContext.combodata, ...data };\r\n\r\n          console.log(cmddata);\r\n          FormContext.setComboData(cmddata);\r\n        }\r\n        //Set Data value\r\n        if (FormContext.cntrData[key]?.ty == 4) {\r\n          const dateValue = new Date(strResponse.body[key]);\r\n\r\n          // const formattedDate = dateValue.toISOString().split(\"T\")[0];\r\n\r\n          const formattedDate = convertDate(dateValue)\r\n\r\n          eDefHldr.stg.elms[key] && setValue(key, formattedDate);\r\n        } else if (FormContext.cntrData[key]?.ty == 9) {\r\n          let filedetails = [];\r\n          filedetails.push({\r\n            id: extractFilename(strResponse.body[key])?.fileId,\r\n            name: extractFilename(strResponse.body[key])?.fileName,\r\n            mode: \"Qdata\",\r\n          });\r\n          eDefHldr.stg.elms[key] && setValue(key, filedetails);\r\n        } else {\r\n          //Set Other data\r\n          eDefHldr.stg.elms[key] && setValue(key, strResponse.body[key]);\r\n        }\r\n      }\r\n\r\n      strResponse.fdr.forEach((item) => {\r\n        setEventLoading(false);\r\n\r\n        toast.error(item.rstmsg, \"Error!\", 2000);\r\n      });\r\n    }\r\n\r\n    setEventLoading(false);\r\n  } catch (ex) {\r\n    setEventLoading(false);\r\n  }\r\n};\r\n\r\nexport const GridEventCaller = async (\r\n  eDefHldr,\r\n  frmData,\r\n  v,\r\n  stageGridRefs,\r\n  setValue,\r\n  gridName,\r\n  FormContext,\r\n  rowId,\r\n  popupField,\r\n  rownode,\r\n  seteDefHldr\r\n) => {\r\n  debugger;\r\n\r\n  var evntDet = {};\r\n\r\n  let griddata = {};\r\n\r\n  griddata = FormDataHelper.ProcessStageGridData(FormContext);\r\n\r\n  griddata = { [\"_gridData\"]: JSON.stringify(griddata) };\r\n\r\n  frmData = FormDataHelper.ProcessStageelementsData(\r\n    FormContext.stageElements.elms,\r\n    \"\",\r\n    FormContext\r\n  );\r\n\r\n  frmData = { ...frmData, ...griddata };\r\n\r\n  evntDet[\"scrverid\"] = eDefHldr.qdet[\"scrverid\"];\r\n  evntDet[\"scrid\"] = eDefHldr.qdet[\"scrid\"];\r\n  evntDet[\"stgid\"] = eDefHldr.qdet[\"stgid\"];\r\n  evntDet[\"method\"] = v;\r\n  evntDet[\"qid\"] = eDefHldr.qdet[\"qid\"];\r\n  evntDet[\"_rid\"] = rowId;\r\n  evntDet[\"_pgr_rid\"] = \"\";\r\n\r\n  var data = getPostData(\"Call:\" + v, frmData, \"_sev\", evntDet);\r\n\r\n  const endpoints = appsettings.ApiEndpoints;\r\n\r\n  let result = await api.post(endpoints.ServerEvent, compressBase64(data));\r\n\r\n  let strResponse = JSON.parse(decompressBase64(result.data));\r\n  \r\n  let neweDefHldr = { ...eDefHldr }\r\n\r\n\r\n  if (result.status == 200 && strResponse.hdr.rst == \"SUCCESS\") {\r\n\r\n    if (strResponse.body[\"_reloadcmb\"]) {\r\n      let data = {};\r\n\r\n      let key = \"_reloadcmb\";\r\n\r\n      strResponse.body[key].forEach((element) => {\r\n        let finalcmbData = {};\r\n\r\n        //  let cod = FormContext.cntrData[element.elm].cod;\r\n\r\n        finalcmbData[element.elm] = element.data;\r\n\r\n        //finalcmbData[element.elm] = cod;\r\n\r\n        //data = { ...data ,  [cod] : element.data }\r\n\r\n        data = { ...data, ...finalcmbData };\r\n      });\r\n\r\n      const cmddata = { ...FormContext.combodata, ...data };\r\n\r\n      console.log(cmddata);\r\n      await FormContext.setComboData(cmddata);\r\n    }\r\n\r\n\r\n    \r\n    for (let key in strResponse.body) {\r\n\r\n  \r\n\r\n      if (key === \"gridData\") {\r\n        for (let gridKey in strResponse.body.gridData) {\r\n          let rowData = [];\r\n      \r\n          stageGridRefs[gridKey].current.api.forEachNode((node) =>\r\n            rowData.push(node.data)\r\n          );\r\n      \r\n          Object.keys(strResponse.body.gridData).forEach((item) => {\r\n            for (let rowid in strResponse.body.gridData[item]) {\r\n              rowData = rowData.map(row => {\r\n                if (row._rid === rowid) {\r\n                  return { ...row, ...strResponse.body.gridData[item][rowid] };\r\n                }\r\n                return row;\r\n              });\r\n            }\r\n          });\r\n      \r\n          stageGridRefs[gridKey].current.api.applyTransaction({ update: rowData });\r\n\r\n          //stageGridRefs[gridKey].current.api.setRowData(rowData);\r\n          stageGridRefs[gridKey].current.columnApi.autoSizeAllColumns();\r\n        }\r\n      }\r\n\r\n      if (eDefHldr.stg.elms[key]) {\r\n\r\n        eDefHldr.stg.elms[key] && setValue(key, strResponse.body[key]);\r\n\r\n      }\r\n\r\n      else if(eDefHldr.elms[key]) {\r\n        neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n        neweDefHldr['elmsData'][key] = strResponse.body[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (result.status == 200 && strResponse.hdr.rst == \"STOP\") {\r\n    for (let key in strResponse.body) {\r\n      if (key == \"gridData\") {\r\n        for (let gridKey in strResponse.body.gridData) {\r\n          let rowData = [];\r\n\r\n          stageGridRefs[gridKey].current.api.forEachNode((node) =>\r\n            rowData.push(node.data)\r\n          );\r\n\r\n          let newdata = Object.keys(strResponse.body.gridData).map((item) => {\r\n            // return { ...strResponse.body.gridData[item] };\r\n\r\n            const key = Object.keys(strResponse.body.gridData[item])[0];\r\n            const transformedData = strResponse.body.gridData[item][key];\r\n\r\n            rowData.push(transformedData);\r\n          });\r\n\r\n          stageGridRefs[gridKey].current.api.setRowData(rowData);\r\n\r\n          stageGridRefs[gridKey].current.columnApi.autoSizeAllColumns();\r\n          // stageGridRefs[gridKey].current.api.redrawRows();\r\n        }\r\n      }\r\n      if (eDefHldr.stg.elms[key]) {\r\n\r\n        eDefHldr.stg.elms[key] && setValue(key, strResponse.body[key]);\r\n\r\n      }\r\n\r\n      else if(eDefHldr.elms[key]) {\r\n        neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n        neweDefHldr['elmsData'][key] = strResponse.body[key];\r\n      }\r\n\r\n\r\n    }\r\n\r\n    strResponse.fdr.forEach((item) => {\r\n      toast.error(item.rstmsg, \"Error!\", 2000);\r\n    });\r\n  }\r\n\r\n  seteDefHldr(neweDefHldr);\r\n};\r\n\r\n/* Grid Child Event Caller - This will be used for the event occuring inside the grid elements*/\r\nexport const GridChildEventCaller = async (\r\n  eDefHldr,\r\n  frmData,\r\n  v,\r\n  stageGridRefs,\r\n  setValue,\r\n  gridName,\r\n  FormContext,\r\n  rowId,\r\n  popupField\r\n) => {\r\n  debugger;\r\n\r\n  var evntDet = {};\r\n\r\n  let griddata = {};\r\n\r\n  griddata = FormDataHelper.ProcessStageGridData(FormContext);\r\n\r\n  griddata = { [\"_gridData\"]: JSON.stringify(griddata) };\r\n\r\n  frmData = FormDataHelper.ProcessStageelementsData(\r\n    FormContext.stageElements.elms,\r\n    \"\",\r\n    FormContext\r\n  );\r\n\r\n  frmData = { ...frmData, ...griddata };\r\n\r\n  evntDet[\"scrverid\"] = eDefHldr.qdet[\"scrverid\"];\r\n  evntDet[\"scrid\"] = eDefHldr.qdet[\"scrid\"];\r\n  evntDet[\"stgid\"] = eDefHldr.qdet[\"stgid\"];\r\n  evntDet[\"method\"] = v;\r\n  evntDet[\"qid\"] = eDefHldr.qdet[\"qid\"];\r\n  evntDet[\"_rid\"] = rowId;\r\n  evntDet[\"_pgr_rid\"] = \"\";\r\n\r\n  var data = getPostData(\"Call:\" + v, frmData, \"_sev\", evntDet);\r\n\r\n  const endpoints = appsettings.ApiEndpoints;\r\n\r\n  let result = await api.post(endpoints.ServerEvent, compressBase64(data));\r\n\r\n  let strResponse = JSON.parse(decompressBase64(result.data));\r\n\r\n  if (result.status == 200 && strResponse.hdr.rst == \"SUCCESS\") {\r\n    for (let key in strResponse.body) {\r\n      if (key == \"gridData\") {\r\n        for (let gridKey in strResponse.body.gridData) {\r\n          let rowData = [];\r\n\r\n          stageGridRefs[gridKey].current.api.forEachNode((node) =>\r\n            rowData.push(node.data)\r\n          );\r\n\r\n          let newdata = Object.keys(strResponse.body.gridData).map((item) => {\r\n            // return { ...strResponse.body.gridData[item] };\r\n\r\n            const key = Object.keys(strResponse.body.gridData[item])[0];\r\n            const transformedData = {\r\n              ...strResponse.body.gridData[item][key],\r\n              _IsDel: false,\r\n            };\r\n\r\n            rowData.push(transformedData);\r\n          });\r\n\r\n          stageGridRefs[gridKey].current.api.setRowData(rowData);\r\n\r\n          stageGridRefs[gridKey].current.columnApi.autoSizeAllColumns();\r\n          // stageGridRefs[gridKey].current.api.redrawRows();\r\n        }\r\n      }\r\n      //eDefHldr.stg.elms[gridName].child[popupField].child[key] = strResponse.body[key]\r\n      eDefHldr.stg.elms[gridName].child[popupField].child[key] &&\r\n        setValue(key, strResponse.body[key]);\r\n    }\r\n  }\r\n\r\n  if (result.status == 200 && strResponse.hdr.rst == \"STOP\") {\r\n    for (let key in strResponse.body) {\r\n      if (key == \"gridData\") {\r\n        for (let gridKey in strResponse.body.gridData) {\r\n          let rowData = [];\r\n\r\n          stageGridRefs[gridKey].current.api.forEachNode((node) =>\r\n            rowData.push(node.data)\r\n          );\r\n\r\n          let newdata = Object.keys(strResponse.body.gridData).map((item) => {\r\n            // return { ...strResponse.body.gridData[item] };\r\n\r\n            const key = Object.keys(strResponse.body.gridData[item])[0];\r\n            const transformedData = strResponse.body.gridData[item][key];\r\n\r\n            rowData.push(transformedData);\r\n          });\r\n\r\n          stageGridRefs[gridKey].current.api.setRowData(rowData);\r\n\r\n          stageGridRefs[gridKey].current.columnApi.autoSizeAllColumns();\r\n          // stageGridRefs[gridKey].current.api.redrawRows();\r\n        }\r\n      }\r\n\r\n      eDefHldr.stg.elms[key] && setValue(key, strResponse.body[key]);\r\n    }\r\n\r\n    strResponse.fdr.forEach((item) => {\r\n      toast.error(item.rstmsg, \"Error!\", 2000);\r\n    });\r\n  }\r\n};\r\n\r\n/* Grid Child Event Caller - This will be used for the event occuring inside the grid elements*/\r\nexport const GridChildEventCallerOnSave = async (\r\n  eDefHldr,\r\n  frmData,\r\n  v,\r\n  stageGridRefs,\r\n  setValue,\r\n  gridName,\r\n  FormContext,\r\n  rowId,\r\n  popupField,\r\n  rownode\r\n) => {\r\n  debugger;\r\n\r\n  var evntDet = {};\r\n\r\n  let griddata = {};\r\n\r\n  griddata = FormDataHelper.ProcessStageGridData(FormContext);\r\n\r\n  griddata = { [\"_gridData\"]: JSON.stringify(griddata) };\r\n\r\n  frmData = FormDataHelper.ProcessStageelementsData(\r\n    FormContext.stageElements.elms,\r\n    \"\",\r\n    FormContext\r\n  );\r\n\r\n  frmData = { ...frmData, ...griddata };\r\n\r\n  evntDet[\"scrverid\"] = eDefHldr.qdet[\"scrverid\"];\r\n  evntDet[\"scrid\"] = eDefHldr.qdet[\"scrid\"];\r\n  evntDet[\"stgid\"] = eDefHldr.qdet[\"stgid\"];\r\n  evntDet[\"method\"] = v;\r\n  evntDet[\"qid\"] = eDefHldr.qdet[\"qid\"];\r\n  evntDet[\"_rid\"] = rowId;\r\n  evntDet[\"_pgr_rid\"] = \"\";\r\n\r\n  var data = getPostData(\"Call:\" + v, frmData, \"_sev\", evntDet);\r\n\r\n  const endpoints = appsettings.ApiEndpoints;\r\n\r\n  let result = await api.post(endpoints.ServerEvent, compressBase64(data));\r\n\r\n  let strResponse = JSON.parse(decompressBase64(result.data));\r\n\r\n  if (result.status == 200 && strResponse.hdr.rst == \"SUCCESS\") {\r\n    for (let key in strResponse.body) {\r\n      //eDefHldr.stg.elms[gridName].child[popupField].child[key] = strResponse.body[key]\r\n      eDefHldr.stg.elms[gridName].child[key] &&\r\n        rownode.setDataValue(key, strResponse.body[key]);\r\n    }\r\n  }\r\n\r\n  if (result.status == 200 && strResponse.hdr.rst == \"STOP\") {\r\n    for (let key in strResponse.body) {\r\n      if (key == \"gridData\") {\r\n        for (let gridKey in strResponse.body.gridData) {\r\n          let rowData = [];\r\n\r\n          stageGridRefs[gridKey].current.api.forEachNode((node) =>\r\n            rowData.push(node.data)\r\n          );\r\n\r\n          let newdata = Object.keys(strResponse.body.gridData).map((item) => {\r\n            // return { ...strResponse.body.gridData[item] };\r\n\r\n            const key = Object.keys(strResponse.body.gridData[item])[0];\r\n            const transformedData = strResponse.body.gridData[item][key];\r\n\r\n            rowData.push(transformedData);\r\n          });\r\n\r\n          stageGridRefs[gridKey].current.api.setRowData(rowData);\r\n\r\n          stageGridRefs[gridKey].current.columnApi.autoSizeAllColumns();\r\n          // stageGridRefs[gridKey].current.api.redrawRows();\r\n        }\r\n      }\r\n\r\n      eDefHldr.stg.elms[key] && setValue(key, strResponse.body[key]);\r\n    }\r\n\r\n    strResponse.fdr.forEach((item) => {\r\n      toast.error(item.rstmsg, \"Error!\", 2000);\r\n    });\r\n  }\r\n};\r\n\r\nexport default Setup;\r\n","const FormDataHelper = {\r\n  ProcessStageelementsData: (node, path, FormContext) => {\r\n    if (FormContext) {\r\n      const { getValues, stageGridRefs, stageElements, cntrData, eDefHldr } = FormContext;\r\n\r\n      let qdata = {};\r\n\r\n      for (const key in stageElements.elms) {\r\n        if (typeof node[key] === \"object\" && node[key] !== null) {\r\n          if (cntrData[key].ty == \"14\") {\r\n            // Type 14: Perform actions for type 14\r\n            // You can access child properties and perform specific actions here\r\n            qdata[key] = processPopupformData(node[key]);\r\n          } else if (cntrData[key].ty === 10) {\r\n            // dummy for now\r\n          }\r\n          else if (cntrData[key].ty === 9) {\r\n            qdata[key] = getValues(key)?.[0];\r\n          }\r\n          else if (cntrData[key].ty === 3) {\r\n            qdata[key] = getValues(key);\r\n          }\r\n          else {\r\n            // Handle other types as needed\r\n            qdata[key] = getValues(key);\r\n          }\r\n        }\r\n      }\r\n\r\n      for (const k in eDefHldr?.elmsData) {\r\n\r\n\r\n        if (cntrData[k] && cntrData?.[k]?.ty === 9) {\r\n          qdata[k] = eDefHldr.elmsData[k]?.[0];\r\n        }\r\n        else {\r\n          qdata[k] = eDefHldr.elmsData[k];\r\n        }\r\n        // Handle other types as needed\r\n\r\n      }\r\n\r\n\r\n\r\n      function processPopupformData(parentNode) {\r\n        const popupformData = {}; // Store the data for pop_EmpDetail's child objects\r\n        for (const childKey in parentNode.child) {\r\n          if (typeof parentNode.child[childKey] === \"object\") {\r\n            // Assume some function getDataForChildObject is used to get data for each child\r\n            if (cntrData[childKey].ty != \"10\") {\r\n              const childData = getValues(childKey);\r\n              popupformData[childKey] = childData;\r\n            }\r\n          }\r\n        }\r\n        return popupformData;\r\n      }\r\n\r\n      return qdata;\r\n    }\r\n  } /* Fetch Grid data */,\r\n\r\n  ProcessStageGridData: (FormContext) => {\r\n    if (FormContext) {\r\n      const { getValues, stageGridRefs, stageElements, cntrData } = FormContext;\r\n\r\n      let griddata = {};\r\n\r\n      for (var key in stageGridRefs) {\r\n        let rowData = {};\r\n        stageGridRefs[key].current.api.forEachNode((node) =>\r\n          Object.assign(rowData, { [node.data._rid]: node.data })\r\n        );\r\n        griddata[key] = rowData;\r\n      }\r\n\r\n      return griddata;\r\n    }\r\n  },\r\n};\r\n\r\nexport default FormDataHelper;\r\n","import { createContext } from \"react\";\r\n\r\nexport const FormContext = createContext(null);\r\n","import React, { useState, useEffect, useRef } from 'react';\r\n\r\n\r\nconst ImageViewer = ({ localUrl, postUrl }) => {\r\n  const [imageUrls, setImageUrls] = useState([]);\r\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n  const [zoom, setZoom] = useState(1.0);\r\n  const imgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const loadLocalImage = async () => {\r\n      try {\r\n        setImageUrls([localUrl]);\r\n\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    loadLocalImage();\r\n  }, [localUrl]);\r\n\r\n  const handlePrevImage = () => {\r\n    if (currentImageIndex > 0) {\r\n      setCurrentImageIndex(currentImageIndex - 1);\r\n    }\r\n  };\r\n\r\n  const handleNextImage = () => {\r\n    if (currentImageIndex < imageUrls.length - 1) {\r\n      setCurrentImageIndex(currentImageIndex + 1);\r\n    }\r\n  };\r\n\r\n  const handleZoomIn = () => {\r\n    if (zoom < 2.0) {\r\n      setZoom(zoom + 0.1);\r\n    }\r\n  };\r\n\r\n  const handleZoomOut = () => {\r\n    if (zoom > 0.5) {\r\n      setZoom(zoom - 0.1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className='row'>\r\n        <div className=\"pdf-viewer\">\r\n          <div className=\"pdf-controls\">\r\n            <button className=\"pdf-control\" onClick={handleZoomIn}>Zoom In</button>\r\n            <button className=\"pdf-control\" onClick={handleZoomOut}>Zoom Out</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='row' style={{ display: 'flex', justifyContent: 'center' }}>\r\n      {imageUrls.length > 0 ? (\r\n        <img\r\n          src={imageUrls[currentImageIndex]}\r\n          ref={imgRef}\r\n          style={{ width: `${zoom * 100}%` }}\r\n        />\r\n      ) : (\r\n        <p>Loading image...</p>\r\n      )}\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageViewer;","import React, { useState } from \"react\";\r\nimport { FaDownload, FaSearchMinus, FaSearchPlus } from \"react-icons/fa\";\r\n\r\nfunction OtherViewer(url, filename) {\r\n  function handleDownload() {\r\n    debugger;\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.href = url.url;\r\n    a.download = url.filename;\r\n    a.click();\r\n    URL.revokeObjectURL(url.url);\r\n  }\r\n\r\n  return (\r\n    <div className=\"pdf-viewer\">\r\n      <div className=\"pdf-controls\">\r\n        <button className=\"pdf-control\" onClick={handleDownload}>\r\n          <FaDownload />\r\n        </button>\r\n      </div>\r\n      File cannot be viewed , Unsupported format !\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OtherViewer;\r\n","import React, { useState } from 'react';\r\nimport { Document, Page, pdfjs } from 'react-pdf';\r\nimport { FaDownload, FaSearchMinus, FaSearchPlus } from 'react-icons/fa';\r\n\r\n\r\npdfjs.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/js/pdf.worker.min.mjs`;\r\n\r\n// pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\n\r\n\r\nfunction PdfViewer(url , filename) {\r\n\r\n    debugger;\r\n    const [numPages, setNumPages] = useState(null);\r\n\r\n    const [scale, setScale] = useState(1);\r\n\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n\r\n    function onDocumentLoadSuccess({ numPages }) {\r\n        setNumPages(numPages);\r\n    }\r\n\r\n    function handleZoomIn() {\r\n        setScale(scale + 0.1);\r\n    }\r\n\r\n    function handleZoomOut() {\r\n        setScale(scale - 0.1);\r\n    }\r\n\r\n    function handlePageChange(newPageNumber) {\r\n        setPageNumber(newPageNumber);\r\n    }\r\n\r\n\r\n    function handleDownload() {\r\n\r\n        debugger;\r\n\r\n        const a = document.createElement('a');\r\n      a.href = url.url;\r\n      a.download = url.filename;\r\n      a.click();\r\n      URL.revokeObjectURL(url.url);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"pdf-viewer\">\r\n            <div className=\"pdf-controls\">\r\n                <button className=\"pdf-control\" onClick={handleZoomIn}>\r\n                    <FaSearchPlus />\r\n                </button>\r\n                <button className=\"pdf-control\" onClick={handleZoomOut}>\r\n                    <FaSearchMinus />\r\n                </button>\r\n                <button className=\"pdf-control\" onClick={handleDownload}>\r\n                    <FaDownload />\r\n                </button>\r\n            </div>\r\n            <div className=\"pdf-page-navigation\">\r\n                <button\r\n                    className=\"pdf-page-nav-button\"\r\n                    disabled={pageNumber === 1}\r\n                    onClick={() => handlePageChange(pageNumber - 1)}\r\n                >\r\n                    Previous\r\n                </button>\r\n                <span className=\"pdf-page-number\">\r\n                    Page {pageNumber} of {numPages}\r\n                </span>\r\n                <button\r\n                    className=\"pdf-page-nav-button\"\r\n                    disabled={pageNumber === numPages}\r\n                    onClick={() => handlePageChange(pageNumber + 1)}\r\n                >\r\n                    Next\r\n                </button>\r\n            </div>\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n            <Document file={url.url} onLoadSuccess={onDocumentLoadSuccess}>\r\n                <Page pageNumber={pageNumber} scale={scale} />\r\n            </Document>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PdfViewer;","import React, { useState, useEffect, useRef } from 'react';\r\nimport ImageViewer from './drivers/ImageViewer';\r\nimport OtherViewer from './drivers/OtherViewer';\r\nimport PdfViewer from './drivers/PDFViewer';\r\n\r\n\r\nconst DocViewer = ({ localUrl, postUrl, filename }) => {\r\n\r\n  debugger;\r\n\r\n  const filetype = () => {\r\n\r\n    const extension = filename?.toString().split('.').pop(); // get file extension\r\n\r\n    switch (extension) {\r\n\r\n      case \"pdf\":\r\n        return extension;\r\n      case \"jpg\":\r\n        return \"image\";\r\n      case \"png\":\r\n        return \"image\"\r\n      case \"jpeg\":\r\n        return \"image\";\r\n      case \"jfif\" :\r\n        return \"image\";\r\n      default:\r\n        return \"other\";\r\n\r\n    }\r\n\r\n  }\r\ndebugger;\r\n\r\n  switch (filetype()) {\r\n    case \"image\":\r\n      return <ImageViewer localUrl={localUrl} postUrl={postUrl} />;\r\n    case \"pdf\":\r\n      return <PdfViewer url={localUrl} filename={filename} />;\r\n      case \"other\":\r\n        return <OtherViewer url={localUrl} filename={filename} />;\r\n    default:\r\n      return null;\r\n\r\n\r\n  }\r\n\r\n};\r\nexport default DocViewer;\r\n","import React from \"react\";\r\nimport adimg from \"../../assets/img/accessdenied.jpg\";\r\n\r\nconst AccessDenied = () => {\r\n\r\n    return <>\r\n    \r\n    <div className=\"container text-center\">\r\n      <h1>Access Denied</h1>\r\n      <p>Sorry, you don't have access to this page</p>\r\n      <img  className=\"ms-5\"  src={adimg} alt=\"Access Denied\"/>\r\n    </div>\r\n    \r\n    </>\r\n\r\n\r\n}\r\n\r\n\r\nexport default AccessDenied;","import React from \"react\";\r\n\r\nconst Timeline = (data) => {\r\n  const { TimelineData } = data;\r\n\r\n const formatDate = (datetimeString) => {\r\n    const date = new Date(datetimeString);\r\n    const formattedDate = date.toLocaleDateString(undefined, {\r\n        year : \"2-digit\",\r\n      month: \"short\",\r\n      day: \"numeric\",\r\n    });\r\n    const formattedTime = date.toLocaleTimeString(undefined, {\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n      hour12: false,\r\n    });\r\n    return `${formattedDate} ${formattedTime}`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {TimelineData?.length > 0 && (\r\n        <div id=\"content \">\r\n          <ul className=\"timeline\">\r\n            {TimelineData.map((item) => (\r\n              <li className=\"event\" data-date={formatDate(item.MovementTime)}>\r\n                <section>\r\n                  <i className=\"icon fas fa-map-marker-alt\"></i>\r\n                  <div className=\"details\">\r\n                    <span className=\"title\">{item.StageFrom} - {item.StageTo}</span>\r\n                    {/* <span style={{fontSize :\"10px\"}}>{formatDate(item.MovementTime)}</span> */}\r\n                  </div>\r\n                  <p>\r\n                    {item.UserComment}\r\n                  </p>\r\n                  <div className=\"bottom\">\r\n                    <div>\r\n                     <b>{item.RoleName}</b> \r\n                    </div>\r\n                    <div>\r\n                      <i>-{item.UserName}</i>\r\n                    </div>\r\n                  </div>\r\n                </section>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n\r\n \r\n};\r\n\r\nexport default Timeline;\r\n","import React from \"react\";\r\nimport Timeline from \"../../htmlcomponents/Timeline\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport api from \"../../api/Webcall\";\r\nimport appsettings from \"../../../appsettings.json\";\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../../utilities/utils\";\r\n\r\nexport const Sidepanel = (props) => {\r\n  const { scrid, qid } = props;\r\n  const fieldname = \"_cmbAction\";\r\n  const commentsBox = \"_txtComment\";\r\n\r\n  const {\r\n    register,\r\n    getValues,\r\n    setValue,\r\n    combodata,\r\n    setComboData,\r\n    elements,\r\n    eDefHldr,\r\n    actionHighlight,\r\n    formState: { errors },\r\n  } = useContext(FormContext);\r\n\r\n  const [TimelineData, setTimeLineData] = useState(null);\r\n\r\n  const getTimelineData = async () => {\r\n    const convID = generateUUID();\r\n    const frmHdr = {\r\n      convid: convID,\r\n      tag: \"ReadTimeline\",\r\n      orgid: \"\",\r\n      vendid: \"0\",\r\n    };\r\n    const frmData = { scrid: scrid, qid: qid };\r\n    const data = { hdr: frmHdr, body: frmData };\r\n    const endpoints = appsettings.ApiEndpoints;\r\n    const url = endpoints.Qmvhist;\r\n    let response = await api.post(url, compressBase64(data));\r\n    let strResponse = JSON.parse(decompressBase64(response.data));\r\n    console.log(\"time line data\", strResponse);\r\n    if (strResponse.hdr.rst == \"SUCCESS\") {\r\n      setTimeLineData(strResponse?.body?.qremark);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTimelineData();\r\n  }, [scrid]);\r\n\r\n  const options =\r\n    combodata[fieldname] && Object.keys(combodata[fieldname]).length > 0\r\n      ? combodata[fieldname]\r\n      : [];\r\n\r\n  return (\r\n    <>\r\n      <ul\r\n        className=\"nav nav-pills mb-3 shadow-sm\"\r\n        id=\"pills-tab\"\r\n        role=\"tablist\"\r\n      >\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className=\"nav-link active\"\r\n            id=\"pills-home-tab\"\r\n            data-bs-toggle=\"tab\"\r\n            data-bs-target=\"#pills-home\"\r\n            href=\"#pills-home\"\r\n            role=\"tab\"\r\n            aria-controls=\"pills-home\"\r\n            aria-selected=\"true\"\r\n          >\r\n            Action\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className=\"nav-link\"\r\n            id=\"pills-profile-tab\"\r\n            data-bs-toggle=\"tab\"\r\n            data-bs-target=\"#pills-profile\"\r\n            href=\"#pills-profile\"\r\n            role=\"tab\"\r\n            aria-controls=\"pills-profile\"\r\n            aria-selected=\"false\"\r\n          >\r\n            Timeline\r\n          </a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a\r\n            className=\"nav-link\"\r\n            id=\"pills-contact-tab\"\r\n            data-bs-toggle=\"tab\"\r\n            data-bs-target=\"#pills-contact\"\r\n            href=\"#pills-contact\"\r\n            role=\"tab\"\r\n            aria-controls=\"pills-contact\"\r\n            aria-selected=\"false\"\r\n          >\r\n            Comments\r\n          </a>\r\n        </li> */}\r\n      </ul>\r\n\r\n      <div className=\"tab-content container\" id=\"pills-tabContent p-3\">\r\n        <div\r\n          className=\"tab-pane fade show active\"\r\n          id=\"pills-home\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"pills-home-tab\"\r\n        >\r\n          <select\r\n            className={`${actionHighlight} form-select mb-2`}\r\n            aria-label=\"Default select example\"\r\n            style={{ cursor: \"pointer\" }}\r\n            disabled={false} //{eDefHldr.stg.prp[fieldname].ro}\r\n            {...register(fieldname, {\r\n              // onChange: () => showDescription(),\r\n            })}\r\n          >\r\n            <option key=\"0\" value=\"\">\r\n              --Select Action--\r\n            </option>\r\n            {options.map((item) => (\r\n              <option key={item.k} value={item.k}>\r\n                {item.v}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"3\"\r\n            {...register(commentsBox, {\r\n              // onChange: () => showDescription(),\r\n            })}\r\n          ></textarea>\r\n        </div>\r\n        <div\r\n          className=\"tab-pane fade\"\r\n          id=\"pills-profile\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"pills-profile-tab\"\r\n        >\r\n          <Timeline TimelineData = {TimelineData}></Timeline>\r\n        </div>\r\n        <div\r\n          className=\"tab-pane fade third\"\r\n          id=\"pills-contact\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"pills-contact-tab\"\r\n        >\r\n          <div className=\"form-group addinfo\"></div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react'\r\n\r\nfunction LoadingLine() {\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <style>{`\r\n    .loading-overlay {\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      background-color: rgba(255, 255, 255, 0.1);\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      z-index: 9999;\r\n    }\r\n    .content-blurred {\r\n      filter: blur(5px);\r\n    }\r\n    .content-disabled {\r\n      pointer-events: auto;  /* Disables all interaction */\r\n    }\r\n  `}</style>\r\n\r\n\r\n    <div className=\"loader-line\"></div>\r\n   <div className=\"loading-overlay  content-disabled\"></div>\r\n    </>\r\n  )\r\n}\r\nexport default LoadingLine","import React, { useState } from 'react'\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport { EventCaller, MultiSearchServerEventCaller } from \"../BusinessLogics/EventHandler\";\r\n\r\n\r\n\r\nconst MultiSearchControl = props => {\r\n\r\n   \r\n\r\n    const {\r\n        setValue,\r\n        getValues,\r\n        eDefHldr,\r\n        stageGridRefs,\r\n        watch,\r\n        trigger,\r\n        stageElements,\r\n        cntrData,\r\n        combodata,\r\n        setComboData,\r\n        setEventLoading,\r\n        modalVisible,\r\n        setModalVisible,\r\n        multiSearchData,\r\n        setMultiSearchData,\r\n        seteDefHldr\r\n      } = useContext(FormContext);\r\n\r\n    const FormContextdata = {\r\n        getValues: getValues,\r\n        stageGridRefs: stageGridRefs,\r\n        stageElements: stageElements,\r\n        cntrData: cntrData,\r\n        combodata,\r\n        setComboData,\r\n        setEventLoading,\r\n        modalVisible,\r\n        setModalVisible,\r\n        multiSearchData,\r\n        setMultiSearchData\r\n      };\r\n    \r\n\r\n    const [gridApi, setGridApi] = useState(null);\r\n    const [gridColumnApi, setGridColumnApi] = useState(null);\r\n    const [rowData, setrowData] = useState([]);\r\n    const [columnDefs, setcolumnDefs] = useState([]);\r\n\r\n    const handleClose = () => setModalVisible(false);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        debugger;\r\n        if (modalVisible && multiSearchData) {\r\n            debugger;\r\n\r\n            let colDefs = []\r\n\r\n            // multiSearchData.map.root.map((item) => {\r\n            //     colDefs.push({\r\n            //         field: item.colidx,\r\n            //         headerName: item.colidx,\r\n            //         filter: \"agTextColumnFilter\",\r\n            //         filterParams: {\r\n            //             buttons: [\"reset\", \"apply\"],\r\n            //         },\r\n            //     });\r\n            // });\r\n\r\n            multiSearchData.data.map((item) => {\r\n\r\n                const keys = Object.keys(item); // Get the key names\r\n\r\n                keys.forEach(key => {\r\n                    colDefs.push({\r\n                        field: key,\r\n                        headerName: key,\r\n                        filter: \"agTextColumnFilter\",\r\n                        filterParams: {\r\n                            buttons: [\"reset\", \"apply\"],\r\n                        },\r\n                    });\r\n\r\n                  });\r\n\r\n      \r\n            });\r\n\r\n\r\n            setcolumnDefs(colDefs);\r\n            setrowData(multiSearchData.data);\r\n\r\n\r\n\r\n        }\r\n\r\n    }, [modalVisible, multiSearchData])\r\n\r\n    const handleSelect = () => {\r\n        if (gridApi) {\r\n\r\n            const selectedRow = gridApi.getSelectedRows()[0]; // Get the first selected row\r\n            if (selectedRow) {\r\n                let neweDefHldr= {...eDefHldr}\r\n                console.log('Selected Row Data:', selectedRow);\r\n\r\n                // multiSearchData.map.root.map((item) => {\r\n\r\n                //     let data = selectedRow[item.colidx]\r\n                //     setValue(item.elmna , data)\r\n\r\n                //     neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n                //     neweDefHldr['elmsData'][item.elmna] = data;\r\n\r\n                // })\r\n\r\n                debugger\r\n\r\n\r\n\r\n              //  seteDefHldr(neweDefHldr);\r\n\r\n                debugger;\r\n\r\n                MultiSearchServerEventCaller(\r\n                    eDefHldr,\r\n                    getValues(),\r\n                    multiSearchData.selectmethod,\r\n                    stageGridRefs,\r\n                    setValue,\r\n                    FormContextdata, seteDefHldr,\r\n                    selectedRow\r\n                  );\r\n\r\n\r\n\r\n                // Here you can bind the data to the screen or pass it to another function/component\r\n                \r\n            }\r\n        }\r\n        handleClose(); // Close the modal after selecting\r\n    };\r\n    \r\n\r\n    const onGridReady = (params) => {\r\n        setGridApi(params.api);\r\n        setGridColumnApi(params.columnApi);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Modal show={modalVisible} onHide={handleClose} size=\"xl\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Multi Search</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> <div\r\n                    className=\"ag-theme-alpine\"\r\n                    style={{ height: 400, width: '100%' }}\r\n                >\r\n                    {modalVisible && (\r\n                        <AgGridReact\r\n                            columnDefs={columnDefs}\r\n                            rowData={rowData}\r\n                            rowSelection={\"single\"}\r\n                            onGridReady={onGridReady}\r\n                            pagination={true}\r\n                            paginationPageSize= {5}\r\n                        />\r\n                    )}\r\n                </div></Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleSelect}>\r\n                        Select\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default MultiSearchControl","import React, { useContext, useCallback } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport dynamicdata from \"./dynamicdata.json\";\r\nimport OneScreen from \"./OneScreen\";\r\nimport { FormContext } from \"./Contexts/FormContext\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Setup, ServerEventCaller } from \"./BusinessLogics/EventHandler\";\r\nimport { getPostData } from \"../utilities/apidataformatter\";\r\nimport Spinner from \"../htmlcomponents/Spinner\";\r\nimport appsettings from \"../../appsettings.json\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../utilities/utils\";\r\nimport api from \"../api/Webcall\";\r\nimport { FetchCombodata, FetchQryCombodata } from \"../utilities/combodata\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DocViewer from \"../utilities/DocViewer/DocViewer\";\r\n// React Notification\r\nimport { toast } from \"react-toastify\";\r\nimport AccessDenied from \"../htmlcomponents/AccessDenied\";\r\nimport { Sidepanel } from \"./components/Sidepanel\";\r\nimport Timeline from \"../htmlcomponents/Timeline\";\r\nimport RenderUI from \"./RenderUI\";\r\nimport FormDataHelper from \"./BusinessLogics/FormDataHelper\";\r\nimport LoadinLine from \"../htmlcomponents/LoadingLine\";\r\nimport MultiSearchControl from \"./controls/MultiSearchControl\";\r\n\r\nconst RenderScreen = (props) => {\r\n  const { scrid, stgid, formKey, qid } = props;\r\n  const navigate = useNavigate();\r\n  const [actionHighlight, setactionHighlight] = useState(null);\r\n  const [formkey, setFormKey] = useState(formKey);\r\n  const [isLoading, setLoanding] = useState(false);\r\n  const [loadsuccess, setLoadStatus] = useState(true);\r\n  const formmethods = useForm({ mode: \"onSubmit\" });\r\n  const [stageElements, setstageElements] = useState(null);\r\n  const [eDefHldr, seteDefHldr] = useState(null);\r\n  const [stageGridRefs, setStageGridRefs] = useState();\r\n  const [combodata, setComboData] = useState({});\r\n  const [elements, setElements] = useState([]);\r\n  const [cntrData, setControlsdata] = useState({});\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [docField, setdocField] = useState(null);\r\n  const [gridList, setstageGridList] = useState({});\r\n  const [isFormValid, setFormValid] = useState(true);\r\n  const [docURL, setDocURL] = useState(null);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [formLoad, setIsFormLoad] = useState(false);\r\n  const [isEventLoading, setEventLoading] = useState(false);\r\n  const [multiSearchData, setMultiSearchData] = useState([]);\r\n  const [currentGridRowData, setcurrentGridRowData] = useState([]);\r\n  const [qdets, setqdet] = useState([]);\r\n\r\n  // const scrid = searchParams.get(\"scrid\");\r\n  // const stgid = searchParams.get(\"stgid\");\r\n  const ver = searchParams.get(\"ver\");\r\n  //  const qid = searchParams.get(\"qid\");\r\n\r\n  const {\r\n    register,\r\n    setValue,\r\n    getValues,\r\n    handleSubmit,\r\n    watch,\r\n    reset,\r\n    formState,\r\n    formState: {\r\n      errors,\r\n      isValid,\r\n      isDirty,\r\n      isSubmitting,\r\n      isSubmitted,\r\n      submitCount,\r\n    },\r\n  } = formmethods;\r\n\r\n\r\n\r\n  /* Form Load */\r\n  const loadScreen = async () => {\r\n    /* Header */\r\n    console.log(\"Load Screen Initiated\");\r\n    const convID = generateUUID();\r\n    const frmHdr = { convid: convID, tag: \"CreateQ\", orgid: \"\", vendid: \"0\" };\r\n    const frmData = { scrid: scrid, stgid: stgid, ver: ver, qid: qid };\r\n    const data = { hdr: frmHdr, body: frmData };\r\n    const endpoints = appsettings.ApiEndpoints;\r\n    const url = !qid ? endpoints.CreateQ : endpoints.OpenQ;\r\n\r\n    let response = await api.post(url, compressBase64(data));\r\n    if (response.status == 401) {\r\n      navigate(\"/Login\");\r\n    }\r\n    let strResponse = JSON.parse(decompressBase64(response.data));\r\n    if (strResponse.hdr.rst == \"FAILED\") {\r\n      if (strResponse.fdr[0].rstcode == 1508) {\r\n        setLoadStatus(false);\r\n      }\r\n    }\r\n\r\n    let controlsdata = strResponse.body.elms;\r\n\r\n    let stageElements = strResponse.body.stg;\r\n\r\n    let qDet = strResponse.body.qdet;\r\n\r\n    const elementarraydata = [];\r\n\r\n    debugger;\r\n\r\n    if (strResponse.body.elmsData) {\r\n      for (var element in controlsdata) {\r\n        if (\r\n          controlsdata[element].ty == 10 &&\r\n          strResponse.body.elmsData._gridData\r\n        ) {\r\n\r\n          let griddata = []\r\n          if (strResponse.body.elmsData._gridData[element]) {\r\n\r\n            griddata = Object.values(strResponse.body.elmsData._gridData[element])\r\n\r\n            griddata.map(grdrow => {\r\n\r\n              // Loop through the properties of the JSON object\r\n              for (let key in grdrow) {\r\n                if (grdrow.hasOwnProperty(key)) {\r\n                  if (controlsdata[key]?.ty == 9) {\r\n                    let docvalue = strResponse.body.elmsData?._gridData[element]?.[grdrow._rid]?.[key];\r\n                    if (docvalue) {\r\n                      let filedetails = [];\r\n                      filedetails.push({\r\n                        id: docvalue.id,\r\n                        name: docvalue.name,\r\n                        mode: \"Qdata\",\r\n                      });\r\n                    //  grdrow[key] = filedetails;\r\n\r\n                      grdrow[`_v_${key}`] = filedetails\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n            })\r\n\r\n          }\r\n          // Check Grid element\r\n          controlsdata[element][\"val\"] = strResponse.body.elmsData._gridData[\r\n            element\r\n          ]\r\n            ? griddata//Object.values(strResponse.body.elmsData._gridData[element])\r\n            : [];\r\n        }\r\n        else if (\r\n          controlsdata[element].ty == 4 //Check date data and convert the date\r\n        ) {\r\n          controlsdata[element][\"val\"] = strResponse.body.elmsData[element]\r\n            ? convertDate(new Date(strResponse.body.elmsData[element]))\r\n            : \"\";\r\n\r\n        }\r\n        // Check if its pop up form and its not a child of grid\r\n        else if (\r\n          controlsdata[element].ty == 14 &&\r\n          !controlsdata[element].pid &&\r\n          strResponse.body.elmsData[element]\r\n        ) {\r\n          // Find the child elements of the pop up form using the parent element id\r\n          let eid = controlsdata[element].eid;\r\n          let childelement = findChildElementByPid(controlsdata, eid);\r\n          childelement.forEach((item) => {\r\n            item = Object.keys(item)[0];\r\n            controlsdata[item][\"val\"] = strResponse.body.elmsData[element][item]\r\n              ? strResponse.body.elmsData[element][item]\r\n              : \"\";\r\n          });\r\n        } else if (\r\n          !controlsdata[element].pid &&\r\n          controlsdata[element].ty != 9\r\n        ) {\r\n          controlsdata[element][\"val\"] = strResponse.body.elmsData[element]\r\n            ? strResponse.body.elmsData[element]\r\n            : \"\";\r\n        } else if (controlsdata[element].ty == 9) {\r\n          let docvalue = strResponse.body.elmsData[element];\r\n          if (docvalue) {\r\n            // let docurl = endpoints.dwnld + \"?qid=\" + qid + \"&docid=\" + docid;\r\n            // let response = await api.get(docurl);\r\n            // let docdetails =decompressBase64(response.data);\r\n\r\n            let filedetails = [];\r\n            filedetails.push({\r\n              id: docvalue.id,\r\n              name: docvalue.name,\r\n              mode: \"Qdata\",\r\n            });\r\n            controlsdata[element][\"val\"] = filedetails;\r\n          }\r\n        }\r\n        elementarraydata.push({\r\n          fieldname: element,\r\n          elementdata: controlsdata[element],\r\n        });\r\n      }\r\n    } else {\r\n      for (var element in controlsdata) {\r\n        controlsdata[element][\"val\"] = \"\";\r\n        elementarraydata.push({\r\n          fieldname: element,\r\n          elementdata: controlsdata[element],\r\n        });\r\n      }\r\n    }\r\n\r\n    const stageElementarraydata = [...elementarraydata];\r\n\r\n    function findChildElementByPid(json, pid) {\r\n      const result = [];\r\n\r\n      for (const prop in json) {\r\n        const obj = json[prop];\r\n        if (obj.pid === pid) {\r\n          result.push({ [prop]: obj });\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    /* Commenting it as stage elements participents are handle through UI design */\r\n\r\n    // for (var element in stageElements.elms) {\r\n    //   stageElementarraydata.push({\r\n    //     fieldname: element,\r\n    //     elementdata: stageElements.elms[element],\r\n    //   });\r\n    // }\r\n\r\n    // let stgelts = {};\r\n\r\n    // stageElementarraydata.map(\r\n    //   (item) => (\r\n    //     (stgelts = !{\r\n    //       ...elementarraydata.find((e) => e.fieldname == item.fieldname),\r\n    //     }\r\n    //       ? {}\r\n    //       : { ...elementarraydata.find((e) => e.fieldname == item.fieldname) }),\r\n    //     (item.elementdata = {\r\n    //       ...stgelts.elementdata,\r\n    //       ...item.elementdata,\r\n    //     })\r\n    //   )\r\n    // );\r\n\r\n    /* Loading combo data on formLoad */\r\n    let generalComb = \"\";\r\n    let compComb = \"\";\r\n    let dmdComb = \"\";\r\n    //let ctr = \"\";\r\n    let dmdctr = \"\";\r\n    let optw = \"\";\r\n    const regex = /\\$\\#\\w+\\#\\$/gi;\r\n    const dmdCombobj = [];\r\n    let comboelementdata = [...stageElementarraydata];\r\n\r\n    // Define a recursive function to update empty child objects\r\n    function updateEmptyChildObjects(obj) {\r\n      // Check if the object has a \"child\" property\r\n      if (obj.hasOwnProperty(\"child\")) {\r\n        // Loop over each key-value pair in the \"child\" object\r\n        for (let [key, value] of Object.entries(obj.child)) {\r\n          // Check if the value is an empty object\r\n          if (Object.keys(value).length === 0) {\r\n            // Update the object with a new value\r\n            //  obj.child[key] = {elementdata : controlsdata[key]};\r\n            comboelementdata.push({\r\n              elementdata: controlsdata[key],\r\n              fieldname: key,\r\n            });\r\n          } else {\r\n            // Recursively call the function on non-empty child objects\r\n            updateEmptyChildObjects(value);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Loop over each object in the array\r\n    for (let obj of comboelementdata) {\r\n      // Call the recursive function to update empty child objects\r\n      updateEmptyChildObjects(obj.elementdata);\r\n    }\r\n\r\n\r\n    /* remvoed General Combo */\r\n    // comboelementdata.map((item) => {\r\n    //   if (\r\n    //     item.elementdata.ty === 3 &&\r\n    //     !item.elementdata.con &&\r\n    //     item.elementdata.cod &&\r\n    //     !item.elementdata.cstr||item.elementdata.cstr==0\r\n    //   ) {\r\n    //     generalComb += \"|\" + item.elementdata.cod + \"|\";\r\n    //   }\r\n    // });\r\n\r\n\r\n    comboelementdata.map((item) => {\r\n      if (\r\n        item.elementdata.ty === 3 &&\r\n        !item.elementdata.con &&\r\n        item.elementdata.cod &&\r\n        item.elementdata.cstr\r\n      ) {\r\n        compComb += \"|\" + item.elementdata.cod + \",\" + item.fieldname + \",\" + item.elementdata.cstr;\r\n        // ctr = item.elementdata.cstr;\r\n      }\r\n    });\r\n    compComb += \"|\";\r\n\r\n    debugger;\r\n\r\n    /* Start Query Combo list item */\r\n\r\n    let cmbReq = {\r\n      cmb: []\r\n    }\r\n\r\n    comboelementdata.map((item) => {\r\n      if (\r\n        item.elementdata.ty === 3 &&\r\n        item.elementdata.con &&\r\n        !item.elementdata.cod &&\r\n        item.elementdata.cstr\r\n      ) {\r\n\r\n        const found = item.elementdata.con.match(regex);\r\n        if (!found) {\r\n          cmbReq[\"cmb\"].push({\r\n            elm: item.fieldname, con: item.elementdata.cstr,\r\n            qry: item.elementdata.con\r\n          });\r\n        }\r\n\r\n      }\r\n    });\r\n\r\n    let qryCmbList = await FetchQryCombodata(cmbReq);\r\n\r\n\r\n    /* End Query Combo list item */\r\n\r\n\r\n\r\n    /* Start dependent Query Combo list item */\r\n\r\n    let depQryCmbList = {};\r\n\r\n    let depCmbReq = {\r\n      cmb: []\r\n    }\r\n\r\n    comboelementdata.map(async (item) => {\r\n      if (\r\n        item.elementdata.ty === 3 &&\r\n        item.elementdata.con &&\r\n        !item.elementdata.cod &&\r\n        item.elementdata.cstr\r\n      ) {\r\n\r\n        const found = item.elementdata.con.match(regex);\r\n        if (found) {\r\n\r\n\r\n\r\n          depCmbReq[\"cmb\"].push({\r\n            elm: item.fieldname, con: item.elementdata.cstr,\r\n            qry: item.elementdata.con\r\n          });\r\n\r\n\r\n        }\r\n\r\n      }\r\n    });\r\n\r\n    let depQryCmbLstItems = await FetchQryCombodata(depCmbReq, qDet);\r\n    depQryCmbList = { ...depQryCmbList, ...depQryCmbLstItems };\r\n\r\n\r\n    /* End dependent uery Combo list item */\r\n\r\n    /*Check if there is existing data */\r\n    //  if (strResponse.body.elmsData) {\r\n    stageElementarraydata.map((item) => {\r\n      if (\r\n        item.elementdata.ty === 3 &&\r\n        item.elementdata.cod &&\r\n        item.elementdata.con &&\r\n        item.elementdata.cstr\r\n      ) {\r\n\r\n        //dmdComb += \"|\" + item.elementdata.cod + \"|\";\r\n        dmdComb = \"|\" + item.elementdata.cod + \",\" + item.fieldname + \",\" + item.elementdata.cstr + \"|\";\r\n        //dmdctr = item.elementdata.cstr;\r\n\r\n        const found = item.elementdata.con.match(regex);\r\n        let val = item.elementdata.con;\r\n        if (found) {\r\n          found.forEach((pattern) => {\r\n            const key = pattern.replace(\"$#\", \"\").replace(\"#$\", \"\");\r\n            if (strResponse.body?.elmsData?.hasOwnProperty(key)) {\r\n              val = val.replace(pattern, strResponse.body.elmsData[key]);\r\n            }\r\n          });\r\n          // Now 'val' contains the updated string with all occurrences replaced\r\n        }\r\n\r\n        const cod = item.elementdata.cod.toLocaleUpperCase();\r\n        // const ctr = item.elementdata.cstr;\r\n        let optw = {};\r\n\r\n        optw = { [cod]: val };\r\n\r\n        dmdCombobj.push({\r\n          opt: dmdComb,\r\n          optw: optw,\r\n          // ctr: dmdctr,\r\n          fieldname: item.fieldname,\r\n        });\r\n\r\n        //const comcombres = await FetchCombodata(opt, optw, ctr);\r\n      }\r\n    });\r\n    // }\r\n\r\n\r\n\r\n    /* Loading Dependend combo list */\r\n    let dmdcomcombres = {};\r\n    for (const item of dmdCombobj) {\r\n      const dmdresponse = await FetchCombodata(item.opt, item.optw, \"Yes\");\r\n\r\n      const finaldmdCmbData = {};\r\n\r\n      // finaldmdCmbData[item.fieldname] =\r\n      //   dmdresponse?.body[strResponse.body.elms[item.fieldname].cod]?.length > 0\r\n      //     ? dmdresponse?.body[strResponse.body.elms[item.fieldname].cod]\r\n      //     : [];\r\n\r\n      finaldmdCmbData[item.fieldname] =\r\n        dmdresponse?.body.data[item.fieldname]?.length > 0\r\n          ? dmdresponse?.body.data[item.fieldname]\r\n          : [];\r\n\r\n      dmdcomcombres = { ...dmdcomcombres, ...finaldmdCmbData };\r\n\r\n    }\r\n\r\n\r\n    /* remvoed General Combo */\r\n    // let genres = {};\r\n    // if (generalComb) {\r\n    //   genres = await FetchCombodata(generalComb, optw);\r\n    // }\r\n\r\n\r\n    let comcombres = {};\r\n    debugger;\r\n    optw = { [\"STA\"]: \"stageid=\" + stgid };\r\n    if (compComb) {\r\n      comcombres = await FetchCombodata(compComb, optw, \"Yes\"); // ctr);\r\n    }\r\n\r\n\r\n    const finalcmbData = { ...comcombres.body.data };\r\n\r\n    // /* Load Combo Data against each element */\r\n    // const finalcmbData = {};\r\n    // for (const cmbdata in comcombres.body) {\r\n    //   const cmbelements = comboelementdata.filter(\r\n    //     (item) =>\r\n    //       item.elementdata.ty == 3 &&\r\n    //       !item.elementdata.con &&\r\n    //       item.elementdata.cod == cmbdata\r\n    //   );\r\n    //   cmbelements.forEach((element) => {\r\n    //     finalcmbData[element.fieldname] = comcombres.body[cmbdata];\r\n    //   });\r\n    // }\r\n\r\n\r\n    /* remvoed General Combo */\r\n    // const finalgencmbData = {};\r\n    // for (const genrescmb in genres.body) {\r\n    //   const cmbelements = comboelementdata.filter(\r\n    //     (item) =>\r\n    //       item.elementdata.ty == 3 &&\r\n    //       !item.elementdata.con &&\r\n    //       item.elementdata.cod == genrescmb\r\n    //   );\r\n    //   cmbelements.forEach((element) => {\r\n    //     finalgencmbData[element.fieldname] = genres.body[genrescmb];\r\n    //   });\r\n    // }\r\n    // const cmddata = { ...finalgencmbData, ...finalcmbData, ...dmdcomcombres, ...qryCmbList };\r\n\r\n\r\n    const cmddata = { ...finalcmbData, ...dmdcomcombres, ...qryCmbList, ...depQryCmbList };\r\n\r\n\r\n    //const cmddata = { ...genres.body, ...comcombres.body, ...dmdcomcombres };\r\n\r\n    /* storing grid refs */\r\n    let stagegridrefs = {};\r\n\r\n    /* storing grid List */\r\n    let stageGridList = {};\r\n\r\n\r\n\r\n    // const stagefields = Object.keys(stageElements.elms);\r\n\r\n    // stagefields.map((item) => {\r\n    //   if (strResponse.body.elms[item].ty === 10) {\r\n    //     stagegridrefs[item] = {};\r\n    //     stageGridList[item] = { isReady: false };\r\n    //   }\r\n    // });\r\n\r\n    const checkAndInitialize = (elements, parentKey = '') => {\r\n      Object.keys(elements).forEach((key) => {\r\n        const fullKey = parentKey ? `${parentKey}.${key}` : key; // Create a full key path\r\n        const element = elements[key];\r\n\r\n        if (key == \"FacilityComponentDetails\") {\r\n\r\n\r\n        }\r\n\r\n        if (strResponse.body.elms[key].ty === 10) {\r\n          stagegridrefs[key] = {};\r\n          stageGridList[key] = { isReady: false };\r\n        }\r\n\r\n        // Check if the element has child elements and recursively process them\r\n        if (element.child) {\r\n          checkAndInitialize(element.child, fullKey);\r\n        }\r\n      });\r\n    };\r\n\r\n    // Start the recursive check from the root of stageElements.elms\r\n    checkAndInitialize(stageElements.elms);\r\n\r\n    // console.log(stageElementarraydata);\r\n    // elementarraydata.map((item) => {\r\n    //   if (item.elementdata.ty === 10) {\r\n    //     stagegridrefs[item.fieldname] = {};\r\n\r\n    //     stageGridList[item.fieldname] = { isReady: false };\r\n    //   }\r\n    // });\r\n\r\n    setComboData(cmddata);\r\n    setElements([...stageElementarraydata]);\r\n    setstageElements(stageElements);\r\n    setControlsdata(controlsdata);\r\n    setStageGridRefs(stagegridrefs);\r\n    seteDefHldr(strResponse.body);\r\n    setstageGridList(stageGridList);\r\n    setqdet(qdets);\r\n\r\n    console.log(\"Load Screen Completed\");\r\n  };\r\n\r\n\r\n\r\n  const convertDate = (dateObj) => {\r\n\r\n\r\n    // Extract year, month, and day\r\n    const year = dateObj.getFullYear();\r\n    const month = ('0' + (dateObj.getMonth() + 1)).slice(-2); // Months are zero-indexed\r\n    const day = ('0' + dateObj.getDate()).slice(-2);\r\n\r\n    // Format to 'YYYY-MM-DD'\r\n    const formattedDate = `${year}-${month}-${day}`;\r\n\r\n    return formattedDate\r\n\r\n  }\r\n\r\n  /* Toggle Actions */\r\n  const toggleActions = (key) => {\r\n    document.getElementById(\"sidePanel\").classList.toggle(\"show\");\r\n    document.getElementById(key).classList.toggle(\"hide\");\r\n  };\r\n\r\n  /* This is to prevent form from submission on press of enter key */\r\n  const checkKeyDown = (e) => {\r\n    if (e.key === 'Enter') e.preventDefault();\r\n  };\r\n\r\n  /* Form Submit */\r\n  const onSubmit = useCallback(async (edata, event) => {\r\n    try {\r\n      console.log(\"submit called\");\r\n\r\n      debugger;\r\n\r\n\r\n      // let data = getValues();\r\n      event.preventDefault();\r\n\r\n      //Call Onbefore submit event\r\n      //  const beforeSubmit = await onBeforeSubmit();\r\n\r\n      const FormContext = {\r\n        getValues: getValues,\r\n        stageGridRefs: stageGridRefs,\r\n        stageElements: stageElements,\r\n        cntrData: cntrData,\r\n      };\r\n\r\n      let qdata = FormDataHelper.ProcessStageelementsData(\r\n        stageElements.elms,\r\n        \"\",\r\n        FormContext\r\n      );\r\n\r\n      setLoanding(false);\r\n\r\n      let griddata = {};\r\n\r\n      if (combodata[\"_cmbAction\"] && combodata[\"_cmbAction\"].length > 0) {\r\n        const action = getValues(\"_cmbAction\");\r\n\r\n        if (!action) {\r\n          toast.error(\"Action needs to be selected!\", \"Error!\", 2000);\r\n\r\n          toggleActions(formkey);\r\n\r\n          setactionHighlight(\"glow-border\");\r\n\r\n          setLoanding(true);\r\n\r\n          return;\r\n        }\r\n      }\r\n\r\n      /* for (var key in stageGridRefs) {\r\n      let rows = {};\r\n      stageGridRefs[key].current.api.forEachNode((node) => {\r\n        node.data._rid = node.id;\r\n        rows[node.id] = node.data;\r\n      });\r\n      griddata = { [key]: rows };\r\n    } */\r\n\r\n      griddata = FormDataHelper.ProcessStageGridData(FormContext);\r\n\r\n      /* Update form data with document id  */\r\n      for (var key in eDefHldr.fil) {\r\n        if (eDefHldr.fil.hasOwnProperty(key)) {\r\n          // qdata[key] = eDefHldr.fil[key][\"docid\"];\r\n          qdata[key] = {};\r\n          qdata[key][\"id\"] = eDefHldr.fil[key][\"docid\"];\r\n          qdata[key][\"name\"] = watch(key)[0].name;\r\n        }\r\n      }\r\n\r\n      //\r\n\r\n      //stageGridRefs.gr_CustomerDocuments.current.api.forEachNode(node => rowData.push(node.data));\r\n\r\n      griddata = { [\"_gridData\"]: JSON.stringify(griddata) };\r\n      qdata = { ...qdata, ...griddata };\r\n\r\n      //Get Qmovement Data\r\n\r\n      let starttime = new Date()\r\n\r\n      const Qmovement = {\r\n        _cmbAction: getValues(\"_cmbAction\"),\r\n        _txtComment: getValues(\"_txtComment\"),\r\n        _StartTime: starttime.toISOString()\r\n      };\r\n\r\n      qdata[\"_QMovement\"] = Qmovement;\r\n      let evntDet = {};\r\n      evntDet[\"scrverid\"] = eDefHldr.qdet[\"scrverid\"];\r\n      evntDet[\"scrid\"] = eDefHldr.qdet[\"scrid\"];\r\n      evntDet[\"qid\"] = eDefHldr.qdet[\"qid\"];\r\n      evntDet[\"stgid\"] = eDefHldr.qdet[\"stgid\"];\r\n      evntDet[\"befsubmitmethod\"] =\r\n        eDefHldr.stg.sev && eDefHldr.stg.sev?.Screen?.ev?.beforesubmit;\r\n      evntDet[\"aftsubmitmethod\"] =\r\n        eDefHldr.stg.sev && eDefHldr.stg.sev?.Screen?.ev?.aftersubmit;\r\n      evntDet[\"stagemovemethod\"] =\r\n        eDefHldr.stg.sev && eDefHldr.stg.sev?.Screen?.ev?.stagemove;\r\n\r\n      let data = getPostData(\"SubmitQ\", qdata, \"_sev\", evntDet);\r\n\r\n      const endpoints = appsettings.ApiEndpoints;\r\n\r\n      let result = await api.post(endpoints.SubmitQ, compressBase64(data));\r\n\r\n      let strResponse = JSON.parse(decompressBase64(result.data));\r\n\r\n      if (strResponse.hdr.rst == \"SUCCESS\") {\r\n        // Calling after submit event\r\n\r\n        setLoanding(true);\r\n\r\n        toast.success(\"Data Submitted!\", \"Successful!\", 2000);\r\n\r\n        navigate(\"/Home\");\r\n        // ShowAlert(\"Success\", \"Submitted successfully\");\r\n      } else {\r\n        setLoanding(true);\r\n\r\n        if (strResponse.fdr.length > 0) {\r\n          strResponse.fdr.map((data) => {\r\n            toast.error(data.rstmsg, \"Error!\", 4000);\r\n          });\r\n        } else {\r\n          toast.error(\"Something went wrong!\", \"Error!\", 2000);\r\n          //  ShowAlert(\"Error\", \"Something went wrong\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle validation errors\r\n      if (error.name === \"ValidationError\") {\r\n        console.log(\"Validation errors:\", error.errors);\r\n      } else {\r\n        console.error(\"An error occurred during form submission:\", error);\r\n      }\r\n    }\r\n  });\r\n\r\n  /*Form Cancel */\r\n  const onCancel = async () => {\r\n    const result = window.confirm(\r\n      \"Are you sure ? , Unsaved data will be lost!\"\r\n    );\r\n\r\n    if (result) {\r\n\r\n\r\n      let qdata = {};\r\n      let evntDet = {};\r\n      evntDet[\"scrverid\"] = eDefHldr.qdet[\"scrverid\"];\r\n      evntDet[\"scrid\"] = eDefHldr.qdet[\"scrid\"];\r\n      evntDet[\"qid\"] = eDefHldr.qdet[\"qid\"];\r\n      evntDet[\"stgid\"] = eDefHldr.qdet[\"stgid\"];\r\n\r\n      var data = getPostData(\"CancelQ\", qdata, \"_qdet\", eDefHldr.qdet);\r\n\r\n      const endpoints = appsettings.ApiEndpoints;\r\n\r\n      let result = await api.post(endpoints.CancelQ, compressBase64(data));\r\n\r\n      let strResponse = JSON.parse(decompressBase64(result.data));\r\n\r\n      if (strResponse.hdr.rst == \"SUCCESS\") {\r\n        setLoanding(false);\r\n\r\n        toast.success(\"form cancelled!\", \"Successful!\", 2000);\r\n\r\n        navigate(\"/Home\");\r\n        // ShowAlert(\"Success\", \"Submitted successfully\");\r\n      } else {\r\n        setLoanding(false);\r\n\r\n        if (strResponse.fdr.length > 0) {\r\n          strResponse.fdr.map((data) => {\r\n            toast.error(data.rstmsg, \"Error!\", 4000);\r\n          });\r\n        } else {\r\n          toast.error(\"Something went wrong!\", \"Error!\", 2000);\r\n          //  ShowAlert(\"Error\", \"Something went wrong\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /*Form Save */\r\n  const onSave = async () => {\r\n\r\n\r\n    const FormContext = {\r\n      getValues: getValues,\r\n      stageGridRefs: stageGridRefs,\r\n      stageElements: stageElements,\r\n      cntrData: cntrData,\r\n    };\r\n\r\n    let qdata = FormDataHelper.ProcessStageelementsData(\r\n      stageElements.elms,\r\n      \"\",\r\n      FormContext\r\n    );\r\n\r\n    setLoanding(false);\r\n\r\n    //  let qdata = getValues();\r\n\r\n    let griddata = {};\r\n\r\n    // for (var key in stageGridRefs) {\r\n    //   let rowData = {};\r\n    //   stageGridRefs[key].current.api.forEachNode((node) =>\r\n    //     Object.assign(rowData, { [node.data._rid]: node.data })\r\n    //   );\r\n    //   griddata = { [key]: rowData };\r\n    // }\r\n\r\n    griddata = FormDataHelper.ProcessStageGridData(FormContext);\r\n\r\n    /* Update form data with document id  */\r\n\r\n\r\n    for (var key in eDefHldr.fil) {\r\n      if (eDefHldr.fil.hasOwnProperty(key)) {\r\n        // qdata[key] = eDefHldr.fil[key][\"docid\"];\r\n        qdata[key] = {};\r\n        qdata[key][\"id\"] = eDefHldr.fil[key][\"docid\"];\r\n        qdata[key][\"name\"] = watch(key)[0].name;\r\n      }\r\n    }\r\n\r\n    griddata = { [\"_gridData\"]: JSON.stringify(griddata) };\r\n\r\n    qdata = { ...qdata, ...griddata };\r\n\r\n    var data = getPostData(\"SaveQ\", qdata, \"_qdet\", eDefHldr.qdet);\r\n\r\n    const endpoints = appsettings.ApiEndpoints;\r\n\r\n    let result = await api.post(endpoints.SaveQ, compressBase64(data));\r\n\r\n    let strResponse = JSON.parse(decompressBase64(result.data));\r\n\r\n    if (strResponse.hdr.rst == \"SUCCESS\") {\r\n      setLoanding(true);\r\n\r\n      toast.success(\"Data Saved!\", \"Successful!\", 2000);\r\n    } else {\r\n      setLoanding(true);\r\n\r\n      if (strResponse.fdr.length > 0) {\r\n        strResponse.fdr.map((data) => {\r\n          toast.error(data.rstmsg, \"Error!\", 4000);\r\n        });\r\n      } else {\r\n        toast.error(\"Something went wrong!\", \"Error!\", 2000);\r\n        //  ShowAlert(\"Error\", \"Something went wrong\");\r\n      }\r\n    }\r\n  };\r\n\r\n  /*Form Save Xit */\r\n  const onSaveXit = async () => {\r\n    let qdata = getValues();\r\n\r\n    let griddata = {};\r\n\r\n    for (var key in stageGridRefs) {\r\n      let rowData = {};\r\n      stageGridRefs[key].current.api.forEachNode((node) =>\r\n        Object.assign(rowData, { [node.data._rid]: node.data })\r\n      );\r\n      griddata = { [key]: rowData };\r\n    }\r\n\r\n    /* Update form data with document id  */\r\n    for (var key in eDefHldr.fil) {\r\n      if (eDefHldr.fil.hasOwnProperty(key)) {\r\n        qdata[key] = eDefHldr.fil[key][\"docid\"];\r\n      }\r\n    }\r\n\r\n    griddata = { [\"_gridData\"]: JSON.stringify(griddata) };\r\n\r\n    qdata = { ...data, ...griddata };\r\n\r\n    var data = getPostData(\"SaveAndXitQ\", qdata, \"_qdet\", eDefHldr.qdet);\r\n\r\n    const endpoints = appsettings.ApiEndpoints;\r\n\r\n    let result = await api.post(endpoints.SaveXit, compressBase64(data));\r\n\r\n    let strResponse = JSON.parse(decompressBase64(result.data));\r\n\r\n    if (strResponse.hdr.rst == \"SUCCESS\") {\r\n      setLoanding(false);\r\n\r\n      toast.success(\"Data Saved!\", \"Successful!\", 2000);\r\n      navigate(\"/Home\");\r\n      // ShowAlert(\"Success\", \"Submitted successfully\");\r\n    } else {\r\n      setLoanding(false);\r\n\r\n      if (strResponse.fdr.length > 0) {\r\n        strResponse.fdr.map((data) => {\r\n          toast.error(data.rstmsg, \"Error!\", 4000);\r\n        });\r\n      } else {\r\n        toast.error(\"Something went wrong!\", \"Error!\", 2000);\r\n        //  ShowAlert(\"Error\", \"Something went wrong\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const docurl = async (fieldname) => {\r\n\r\n\r\n    let file = watch(fieldname)?.[0];\r\n\r\n    if (file?.type == \"\") {\r\n      file = new Blob([file], { type: \"application/octet-stream\" });\r\n    }\r\n\r\n    if (file?.mode) {\r\n      let docdetails = await getFileDetails(file.id);\r\n      docdetails = new Blob([docdetails], { type: \"application/octet-stream\" });\r\n      return URL.createObjectURL(docdetails);\r\n    }\r\n\r\n    if (file) {\r\n      return URL.createObjectURL(file);\r\n    }\r\n  };\r\n\r\n  const Fetchdocurl = async (fieldname) => {\r\n\r\n\r\n    let file = watch(fieldname)?.[0];\r\n\r\n    if (!file) {\r\n\r\n      file = eDefHldr?.elmsData?.[fieldname]?.[0];\r\n\r\n    }\r\n    if (file?.type == \"\") {\r\n      file = new Blob([file], { type: \"application/octet-stream\" });\r\n    }\r\n\r\n    if (file?.mode) {\r\n      let docdetails = await getFileDetails(file.id);\r\n      docdetails = new Blob([docdetails], { type: \"application/octet-stream\" });\r\n      return URL.createObjectURL(docdetails);\r\n    }\r\n\r\n    if (file) {\r\n      return URL.createObjectURL(file);\r\n    }\r\n  };\r\n\r\n  const getFileDetails = async (docId) => {\r\n    const endpoints = appsettings.ApiEndpoints;\r\n    let docurl = null;\r\n    if (qid) {\r\n      docurl = endpoints.dwnld + \"?qid=\" + qid + \"&docid=\" + docId;\r\n    }\r\n    if (!qid) {\r\n      docurl = endpoints.dwnld + \"?docid=\" + docId;\r\n    }\r\n\r\n    let response = await api.get(docurl, {\r\n      responseType: \"blob\", // Set responseType to 'blob'\r\n    });\r\n    let docdetails = response.data;\r\n    return docdetails;\r\n  };\r\n\r\n  const Setdocfield = (fieldname) => {\r\n    setdocField(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    if (docField) {\r\n\r\n      fetchDocURL();\r\n\r\n    }\r\n  }, [watch(docField)?.[0]]);\r\n\r\n  const fetchDocURL = async () => {\r\n    debugger;\r\n    const docURL = await docurl(docField);\r\n    setDocURL(docURL);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"Starting Rendering Screen\", Date(Date.now()));\r\n    reset({});\r\n    loadScreen();\r\n    Setup();\r\n    //loadCombodata();\r\n    console.log(\"Completed Rendering Screen\", Date(Date.now()));\r\n    return;\r\n  }, [scrid]);\r\n\r\n  useEffect(() => {\r\n    // Check if all required variables are defined before calling onFormLoad\r\n\r\n\r\n\r\n    if (!formLoad && eDefHldr && getValues && stageGridRefs && setValue) {\r\n\r\n      const isAllGridReady = Object.values(gridList).every(\r\n        (obj) => obj.isReady === true\r\n      );\r\n\r\n      if (isAllGridReady) {\r\n        debugger;\r\n        console.log(\"formload called\")\r\n\r\n        onFormLoad();\r\n      }\r\n    }\r\n  }, [eDefHldr, getValues, stageGridRefs, setValue, () => gridList]);\r\n\r\n  const onFormLoad = async () => {\r\n\r\n\r\n    setIsFormLoad(true);\r\n\r\n    let method = \"Screen_\" + eDefHldr.qdet[\"stgid\"] + \"_OnLoad\";\r\n\r\n    const FormContextdata = {\r\n      getValues: getValues,\r\n      stageGridRefs: stageGridRefs,\r\n      stageElements: stageElements,\r\n      cntrData: cntrData,\r\n      combodata,\r\n      setComboData,\r\n      setEventLoading,\r\n      modalVisible,\r\n      setModalVisible,\r\n      multiSearchData,\r\n      setMultiSearchData,\r\n      eDefHldr\r\n    };\r\n\r\n\r\n    await ServerEventCaller(\r\n      eDefHldr,\r\n      getValues(),\r\n      method,\r\n      stageGridRefs,\r\n      setValue,\r\n      FormContextdata,\r\n      seteDefHldr\r\n    );\r\n\r\n    setLoanding(true);\r\n  };\r\n\r\n  const ErrorFallback = ({ error, resetErrorBoundary }) => {\r\n    // Trigger toast notification only once\r\n    React.useEffect(() => {\r\n      toast.error(\"Error in Rendering Form!\", \"Error!\", { autoClose: 2000 });\r\n    }, []);\r\n  };\r\n\r\n  /* Checking If form has is valid to submit */\r\n  useEffect(() => {\r\n    if (!isValid && isSubmitting) {\r\n\r\n      console.log(errors);\r\n      toast.error(\"mandatory fields required\", \"Error!\", 2000);\r\n    }\r\n  }, [isSubmitting]);\r\n\r\n  const onBeforeSubmit = async () => {\r\n\r\n\r\n    const beforesubmit = eDefHldr.stg.sev[\"Screen\"]?.ev?.beforesubmit;\r\n\r\n    if (beforesubmit) {\r\n      let method = beforesubmit;\r\n\r\n      const FormContext = {\r\n        getValues: getValues,\r\n        stageGridRefs: stageGridRefs,\r\n        stageElements: stageElements,\r\n        cntrData: cntrData,\r\n      };\r\n\r\n      try {\r\n        await ServerEventCaller(\r\n          eDefHldr,\r\n          getValues(),\r\n          method,\r\n          stageGridRefs,\r\n          setValue,\r\n          FormContext,\r\n          seteDefHldr\r\n        );\r\n      } catch (error) {\r\n        console.error(\"Error in onBeforeSubmit:\", error);\r\n        throw error;\r\n      }\r\n    } else {\r\n      // If beforesubmit is falsy, you might want to return a resolved promise\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const onAfterSubmit = async () => {\r\n\r\n\r\n    const aftersubmit = eDefHldr.stg.sev[\"Screen\"]?.ev?.aftersubmit;\r\n\r\n    if (aftersubmit) {\r\n      let method = aftersubmit;\r\n\r\n      const FormContext = {\r\n        getValues: getValues,\r\n        stageGridRefs: stageGridRefs,\r\n        stageElements: stageElements,\r\n        cntrData: cntrData,\r\n      };\r\n\r\n      try {\r\n        await ServerEventCaller(\r\n          eDefHldr,\r\n          getValues(),\r\n          method,\r\n          stageGridRefs,\r\n          setValue,\r\n          FormContext,\r\n          seteDefHldr\r\n        );\r\n      } catch (error) {\r\n        console.error(\"Error in onBeforeSubmit:\", error);\r\n        return false;\r\n      }\r\n    } else {\r\n      // If beforesubmit is falsy, you might want to return a resolved promise\r\n      return true;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  try {\r\n    return (\r\n      <>\r\n        <ErrorBoundary FallbackComponent={ErrorFallback}>\r\n          {!isLoading ? <Spinner></Spinner> : \"\"}\r\n          {!loadsuccess ? <AccessDenied></AccessDenied> : \"\"}\r\n          {elements.length > 0 ? (\r\n            <FormContext.Provider\r\n              value={{\r\n                ...formmethods,\r\n                combodata,\r\n                setComboData,\r\n                elements,\r\n                stageElements,\r\n                cntrData,\r\n                setStageGridRefs,\r\n                stageGridRefs,\r\n                gridList,\r\n                setstageGridList,\r\n                eDefHldr,\r\n                setdocField,\r\n                actionHighlight,\r\n                setEventLoading,\r\n                Fetchdocurl,\r\n                seteDefHldr,\r\n                modalVisible,\r\n                setModalVisible,\r\n                multiSearchData,\r\n                setMultiSearchData,\r\n                currentGridRowData,\r\n                setcurrentGridRowData,\r\n                qdets\r\n              }}\r\n            >\r\n              {isEventLoading && <LoadinLine />}\r\n\r\n              <form\r\n                onSubmit={handleSubmit(onSubmit)} onKeyDown={(e) => checkKeyDown(e)}\r\n                id={formKey}\r\n                className=\"form-container form-control-sm\"\r\n                key={formKey}\r\n              >\r\n\r\n\r\n\r\n                <nav id=\"onescreenmainNav\" className=\"navbar navbar-expand-lg navbar-light bg-light mb-4\" style={{ position: \"sticky\", top: \"60px\", zIndex: 1020 }}>\r\n                  <div className=\"container-fluid\">\r\n                    <div className=\"navbar-brand\">\r\n\r\n                      {\" \"}\r\n                      {eDefHldr &&\r\n                        eDefHldr.qdet.scrname +\r\n                        \" (\" +\r\n                        eDefHldr.qdet.stgname +\r\n                        \")\"}{\" \"}\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className=\"d-flex\">\r\n                      <button\r\n                        className=\"btn btn-hover color-5 btn-sm  m-2\"\r\n                        type=\"submit\"\r\n                      // onClick={(e) => onSubmit(e)}\r\n                      >\r\n                        Submit\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-hover color-3 btn-sm m-2\"\r\n                        type=\"button\"\r\n                        onClick={() => onSave()}\r\n                      >\r\n                        Save\r\n                      </button>\r\n                      {/* <button\r\n                      className=\"btn btn btn-hover color-10 btn-sm m-2\"\r\n                      type=\"button\"\r\n                      onClick={() => onSaveXit()}\r\n                    >\r\n                      Save & X-it\r\n                    </button> */}\r\n                      <button\r\n                        className=\"btn btn btn-hover color-10 btn-sm  m-2\"\r\n                        type=\"button\"\r\n                        onClick={() => onCancel()}\r\n                      >\r\n                        Cancel\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-hover color-9 btn-sm  m-2\"\r\n                        type=\"button\"\r\n                        onClick={() => toggleActions(formkey)}\r\n                      >\r\n                        Actions\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </nav>\r\n                <div className=\"form-content\">\r\n                  {/* {elements.map((item) => (\r\n                    <OneScreen\r\n                      dataprops={item.elementdata}\r\n                      key={item.fieldname}\r\n                      fieldname={item.fieldname}\r\n                      stagelementdata={stageElements}\r\n                      elementdefs={cntrData}\r\n                    />\r\n                  ))} */}\r\n\r\n                  {/* <RenderUI data={dynamicdata.body.stg.ui} /> */}\r\n                  <RenderUI\r\n                    data={stageElements.ui}\r\n                    elements={elements}\r\n                    stageElements={stageElements}\r\n                    cntrData={cntrData}\r\n                  />\r\n                  <MultiSearchControl></MultiSearchControl>\r\n                </div>\r\n                <div\r\n                  className=\"side-panel  shadow  justify-content-center\"\r\n                  id=\"sidePanel\"\r\n                >\r\n                  <Sidepanel scrid={scrid} qid={qid} />\r\n                </div>\r\n              </form>\r\n            </FormContext.Provider>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          <div\r\n            className=\"modal fade\"\r\n            id=\"exampleModalScrollable\"\r\n            tabIndex=\"-1\"\r\n            aria-labelledby=\"exampleModalScrollableTitle\"\r\n            data-bs-backdrop=\"static\"\r\n            data-bs-keyboard=\"false\"\r\n            aria-hidden=\"true\"\r\n            style={{ display: \"none\" }}\r\n          >\r\n            <div className=\"modal-dialog modal-dialog-scrollabl modal-lg\">\r\n              <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                  <h6 className=\"modal-title\" id=\"exampleModalScrollableTitle\">\r\n                    FinX Doc Viewer\r\n                  </h6>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn-close\"\r\n                    data-bs-dismiss=\"modal\"\r\n                    aria-label=\"Close\"\r\n                  ></button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                  {/* {docField  && ( \r\n               <DocViewer\r\n                documents={Array.from(watch(docField)).map((file) => (\r\n                  {\r\n                  uri: window.URL.createObjectURL(file),\r\n                  fileName: file.name,\r\n                }))} \r\n                pluginRenderers={DocViewerRenderers}\r\n              />  ) } */}\r\n                  {watch(docField)[0] && docURL && (\r\n                    <DocViewer\r\n                      //localUrl={docurl(docField)}\r\n                      localUrl={docURL}\r\n                      filename={watch(docField)[0].name}\r\n                    />\r\n                  )}\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => Setdocfield(null)}\r\n                    data-bs-dismiss=\"modal\"\r\n                  >\r\n                    Close\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ErrorBoundary>\r\n      </>\r\n    );\r\n  } catch (ex) {\r\n    console.log(\"error occured \", ex);\r\n    toast.error(\"Error in Rendering Form!\", \"Error!\", 2000);\r\n  }\r\n};\r\n\r\n\r\n\r\nexport default RenderScreen;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport RenderScreen from './RenderScreen'; \r\n\r\n\r\nconst LoadScreen = () => {\r\n\r\n\r\nconst [screenParam, setScreenParam] = useState('initialParam');\r\n  \r\nconst [searchParams, setSearchParams] = useSearchParams();\r\n\r\n\r\nconst scrid = searchParams.get(\"scrid\");\r\nconst stgid = searchParams.get(\"stgid\");\r\nconst ver = searchParams.get(\"ver\");\r\nconst qid = searchParams.get(\"qid\");\r\n\r\ndebugger;\r\n\r\n// Set a unique key to force re-render of RenderScreen when URL params change\r\nconst key = `${scrid}-${stgid}-${guidGenerator()}`;\r\n\r\n  return (\r\n    <div key={key}>\r\n      <RenderScreen scrid={scrid} stgid={stgid} formKey={key} qid={qid} />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction guidGenerator() {\r\n  var S4 = function() {\r\n     return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n  };\r\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\r\n}\r\n\r\nexport default LoadScreen;\r\n","import { useEffect, useLayoutEffect, useRef } from 'react';\r\nimport * as am5 from \"@amcharts/amcharts5\";\r\nimport * as am5percent from \"@amcharts/amcharts5/percent\";\r\nimport am5themes_Animated from \"@amcharts/amcharts5/themes/Animated\";\r\n\r\nfunction PieChart(props) {\r\n    const chartRef = useRef(null); // Reference for the chart div\r\n    \r\n    useEffect(() => {\r\n        if (!chartRef.current) return;\r\n\r\n        if(!props.elmtData || props.elmtData==\"\")return;\r\n\r\n        let root = am5.Root.new(chartRef.current); // Directly attach to the React-managed DOM node\r\n\r\n        root.setThemes([\r\n            am5themes_Animated.new(root)\r\n        ]);\r\n\r\n        let chart = root.container.children.push( \r\n            am5percent.PieChart.new(root, {\r\n              layout: root.verticalHorizontal\r\n            }) \r\n        );\r\n        \r\n        let data = [];\r\n\r\n        data = props.elmtData?  props.elmtData : data\r\n          \r\n        // Create series\r\n        let series = chart.series.push(\r\n            am5percent.PieSeries.new(root, {\r\n                name: \"Series\",\r\n                valueField: \"value\",\r\n                categoryField: \"key\"\r\n            })\r\n        );\r\n        series.data.setAll(data);\r\n\r\n         // Add animations explicitly to the series\r\n         series.appear(1000, 100); // 1000ms for duration, 100ms delay\r\n         chart.appear(1000, 100); // Animate the chart itself\r\n         \r\n          \r\n        // Add legend\r\n        let legend = chart.children.push(am5.Legend.new(root, {\r\n            centerX: am5.percent(50),\r\n            x: am5.percent(50),\r\n            layout: root.horizontalLayout\r\n        }));\r\n          \r\n        legend.data.setAll(series.dataItems);\r\n\r\n        return () => {\r\n            root.dispose(); // Cleanup when the component unmounts\r\n        };\r\n    }, [props.elmtData]);\r\n\r\n    return (\r\n        <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }}></div>\r\n    );\r\n}\r\n\r\nexport default PieChart;\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport parse, { domToReact } from 'html-react-parser';\r\nimport BarCharts from './Charts/BarCharts';\r\nimport PieChart from './Charts/PieChart';\r\n\r\nconst HTMLRenderer = ({ eid, fieldname, cap, col, mn, ev, val, mxLen, rid, dv }) => {\r\n    const { watch, Fetchdocurl, eDefHldr } = useContext(FormContext);\r\n    const [htmlContent, setHtmlContent] = useState('');\r\n    const [formValues, setFormValues] = useState({});\r\n    const [replacements , setreplacements] = useState({});\r\n    \r\n\r\n    const numberFormater = (number) => {\r\n        return number.toLocaleString();\r\n    }\r\n\r\n    // Function to unescape HTML content\r\n    const unescapeHTML = (html) => {\r\n        return html\r\n            .replace(/\\\\t/g, '\\t')\r\n            .replace(/\\\\n/g, '\\n')\r\n            .replace(/\\\\x3C/g, '<')\r\n            .replace(/\\\\x3E/g, '>')\r\n            .replace(/\\\\\\//g, '/')\r\n            .replace(/\\\\\"/g, '\"');\r\n    };\r\n\r\n    // Define a mapping from component names to React components\r\n    const componentMap = {\r\n        'charts': PieChart,\r\n    };\r\n\r\n    // Function to replace placeholders with dynamic values\r\n    const replacePlaceholders = async (content) => {\r\n        const placeholderRegex = /renderPlaceholders\\(\"([^\"]+)\"\\)/g;\r\n\r\n       \r\n        let match;\r\n        \r\n\r\n        let replacement_s = {}\r\n\r\n        while ((match = placeholderRegex.exec(content)) !== null) {\r\n            const fieldName = match[1];\r\n            if (!replacement_s[fieldName]) {\r\n                replacement_s[fieldName] = await renderPlaceholders(fieldName);\r\n            }\r\n        }\r\n\r\n        for (const [fieldName, value] of Object.entries(replacement_s)) {\r\n            content = content.replace(new RegExp(`renderPlaceholders\\\\(\"${fieldName}\"\\\\)`, 'g'), `\"${value}\"`);\r\n        }\r\n\r\n\r\n        return content;\r\n    };\r\n\r\n    // // Function to fetch value for placeholders\r\n    // const renderPlaceholders = async (fieldName) => {\r\n    //     if (eDefHldr.elms[fieldName]?.ty === 9) {\r\n    //         return await processImagePlaceholder(fieldName);\r\n    //     }\r\n    //     const value = formValues[fieldName] || '';\r\n    //     console.log(`Field: ${fieldName}, Value: ${value}`);\r\n    //     return value;\r\n    // };\r\n\r\n    const renderPlaceholders = async (fieldName, formater) => {\r\n\r\n        \r\n        if (eDefHldr.elms[fieldName]?.ty === 9) {\r\n            return await processImagePlaceholder(fieldName);\r\n        }\r\n\r\n        let value = formValues[fieldName];\r\n\r\n        if (!value && eDefHldr?.elmsData?.[fieldName]) {\r\n            value = eDefHldr?.elmsData?.[fieldName]; // Fallback to eDefHldr.elmsData if no data from watch\r\n        }\r\n\r\n        \r\n        if (value) {\r\n            value = value &&  typeof value === 'object' ? fieldName : value.toString().replace(/\\n/g, '');\r\n        }\r\n\r\n        if (value && eDefHldr.elms[fieldName]?.ty === 2) {\r\n            value = numberFormater(parseFloat(value));\r\n        }\r\n\r\n        return value || '';\r\n    };\r\n\r\n\r\n    const processImagePlaceholder = async (fieldName) => {\r\n        \r\n        let fieldValue = formValues[fieldName];\r\n\r\n        if (!fieldValue && eDefHldr?.elmsData?.[fieldName]) {\r\n            fieldValue = eDefHldr?.elmsData?.[fieldName]; // Fallback to eDefHldr.elmsData if no data from watch\r\n        }\r\n\r\n        if (fieldValue && fieldValue !== \"\" && fieldValue?.[0]?.name != null) {\r\n            return await Fetchdocurl(fieldName);\r\n        }\r\n        return '/FinxPage/custimg.svg';\r\n    };\r\n\r\n    // Function to evaluate expressions within the content\r\n    const evaluateExpressions = (content) => {\r\n        const expressionRegex = /\\$\\{([^}]+)\\}/g;\r\n        return content.replace(expressionRegex, (_, expressionText) => {\r\n            try {\r\n                const result = new Function('formValues', `with (formValues) { return ${expressionText}; }`)(formValues);\r\n                return result !== undefined ? result : '';\r\n            } catch (error) {\r\n                console.error(`Error evaluating expression: ${expressionText}`, error);\r\n                return '';\r\n            }\r\n        });\r\n    };\r\n    const htmlToReact = (html) => {\r\n        return  parse(html, {\r\n            replace: (domNode) => {\r\n                if (domNode.type === 'tag' && componentMap[domNode.name]) {\r\n                    const Component = componentMap[domNode.name];\r\n                  \r\n                    // Explicitly ensure that `elmtdata` is passed as a prop\r\n                    const elmtData = eDefHldr?.elmsData?.[domNode.attribs['elmtdata']];\r\n                    return <Component {...domNode.attribs} style={domNode.attribs.style} elmtData={elmtData}>{domToReact(domNode.children)}</Component>;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    \r\n\r\n\r\n    // useEffect(() => {\r\n    //     const subscription = watch((values) => {\r\n    //         setFormValues(values);\r\n    //     });\r\n    //     return () => subscription.unsubscribe();\r\n    // }, [watch]);\r\n\r\n    useEffect(() => {\r\n        const subscription = watch((values) => {\r\n            // Update form values from `watch`\r\n            setFormValues(values);\r\n        });\r\n    \r\n\r\n        const processContent = async () => {\r\n            let content = unescapeHTML(dv);\r\n            content = await replacePlaceholders(content); // First replace placeholders\r\n            content = evaluateExpressions(content); // Then evaluate expressions\r\n            setHtmlContent(content);\r\n        };\r\n\r\n        processContent();\r\n\r\n    \r\n        return () => subscription.unsubscribe();\r\n\r\n\r\n    }, [watch, eDefHldr]);\r\n    \r\n\r\n    // useEffect(() => {\r\n    //     const processContent = async () => {\r\n    //         let content = unescapeHTML(dv);\r\n    //         content = await replacePlaceholders(content); // First replace placeholders\r\n    //         content = evaluateExpressions(content); // Then evaluate expressions\r\n    //         setHtmlContent(content);\r\n    //     };\r\n\r\n    //     processContent();\r\n    // }, [dv, formValues, eDefHldr]);\r\n\r\n    return (\r\n\r\n        <div id={fieldname} key={fieldname} className={`${col} mb-3 ${eDefHldr.stg.prp[fieldname]?.disp == false ? \"d-none\" : \"\"}`}>\r\n            {htmlToReact(htmlContent)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HTMLRenderer;\r\n","import React, {\r\n    useState,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useCallback,\r\n} from \"react\";\r\n\r\nimport GrHeader from \"./GridComponents/GrHeader\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\";\r\nimport { useContext } from \"react\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport {\r\n    Setup,\r\n    ServerEventCaller,\r\n    GridEventCaller,\r\n    GridChildEventCaller,\r\n    GridChildEventCallerOnSave,\r\n} from \"../BusinessLogics/EventHandler\";\r\nimport RenderUI from \"../RenderUI\";\r\nimport { Modal } from \"bootstrap\"; // Import Bootstrap\r\nimport GrComboBox from \"./GridComponents/GrComboBox\";\r\nimport GrFile from \"./GridComponents/GrFile\";\r\nimport GrMultilineBox from \"./GridComponents/GrMultilineBox\";\r\nimport GrNumericBox from \"./GridComponents/GrNumericBox\";\r\nimport GrCheckbox from \"./GridComponents/GrCheckbox\";\r\nimport GrButton from \"./GridComponents/GrButton\";\r\nimport GrModal from \"./GridComponents/GrModal\";\r\nimport GrDateBox from \"./GridComponents/GrDateBox\";\r\n\r\nconst FormGrid = (defs) => {\r\n\r\n    const {\r\n        setStageGridRefs,\r\n        stageGridRefs,\r\n        combodata,\r\n        setstageGridList,\r\n        gridList,\r\n        eDefHldr,\r\n        setValue,\r\n        getValues,\r\n        stageElements,\r\n        cntrData,\r\n        setEventLoading,\r\n        modalVisible,\r\n        setModalVisible,\r\n        seteDefHldr,\r\n        setComboData,\r\n        elements,\r\n        currentGridRowData,\r\n        setcurrentGridRowData,\r\n        watch\r\n    } = useContext(FormContext);\r\n\r\n    const FormContextdata = {\r\n        getValues: getValues,\r\n        stageGridRefs: stageGridRefs,\r\n        stageElements: stageElements,\r\n        cntrData: cntrData,\r\n        setEventLoading,\r\n        modalVisible,\r\n        setModalVisible,\r\n        eDefHldr,\r\n        seteDefHldr,\r\n        setComboData,\r\n        combodata\r\n    };\r\n\r\n    const eDefHldrRef = useRef(eDefHldr);\r\n    const combodataref = useRef(combodata);\r\n\r\n    const modalRef = useRef(null);\r\n\r\n\r\n    const FormContextdataRef = useRef(FormContextdata);\r\n\r\n    useEffect(() => {\r\n        eDefHldrRef.current = eDefHldr; // Keep ref updated with latest state\r\n    }, [eDefHldr]);\r\n\r\n    useEffect(() => {\r\n        combodataref.current = combodata; // Keep ref updated with latest state\r\n    }, [combodata]);\r\n\r\n\r\n    useEffect(() => {\r\n        FormContextdataRef.current = FormContextdata; // Keep ref updated with latest state\r\n    }, [FormContextdata]);\r\n\r\n\r\n    const [gridApi, setGridApi] = useState(null);\r\n    const [columnApi, setColumnApi] = useState(null);\r\n\r\n    stageGridRefs[defs.fieldname] = useRef();\r\n    const gridRef = useRef();\r\n    const [formgriddata, setformgriddata] = useState(null);\r\n\r\n    let ChildGridElements = [];\r\n\r\n    let modaldefs = null;\r\n\r\n    const [rowData, setRowData] = useState(\r\n        defs.coldef.val == \"\" ? [] : defs.coldef.val\r\n    );\r\n\r\n\r\n\r\n    const element = {\r\n        ...defs.cntrlsdata[defs.fieldname],\r\n        ...defs.stagelementdata.prp[defs.fieldname],\r\n    };\r\n\r\n    element.child = {};\r\n    element.child[defs.fieldname] = {};\r\n    element.fieldname = defs.fieldname;\r\n    element.parentfieldanme = defs.fieldname;\r\n    element.UI = findElementById(defs.stagelementdata.ui, defs.fieldname);\r\n    ChildGridElements.push(element);\r\n\r\n    /* Load Custom components based on column control type */\r\n    const gridComponents = {\r\n        2: GrNumericBox,\r\n        3: GrComboBox,\r\n        4: GrDateBox,\r\n        9: GrFile,\r\n        12: \"agLargeTextCellEditor\",\r\n        13: GrButton,\r\n        14: GrModal,\r\n        7: GrCheckbox,\r\n    };\r\n\r\n    const colDef = [];\r\n\r\n    // // supporting reference data\r\n    // const carMappings = [\r\n    //   {\r\n    //     k: \"tyt\",\r\n    //     v: \"Toyota\",\r\n    //   },\r\n    //   {\r\n    //     k: \"frd\",\r\n    //     v: \"Ford\",\r\n    //   },\r\n    //   { k: \"prs\", v: \"Porsche\" },\r\n    //   { k: \"nss\", v: \"Nissan\" },\r\n    // ];\r\n\r\n    defs.childUI.forEach((item) => {\r\n        if (defs.cntrlsdata[item.id]) {\r\n            const field = item.id;\r\n            const element = {\r\n                ...defs.cntrlsdata[field],\r\n                ...defs.stagelementdata.prp[field],\r\n            };\r\n            if (element.ty == \"3\") {\r\n                // Create a column for the key\r\n                colDef.push({\r\n                    field: field,  // key column as is\r\n                    headerName: element.cap,  // Header name remains as is.\r\n                    hide: true\r\n                });\r\n\r\n                // Create a column for the value (add \"val\" suffix)\r\n                colDef.push({\r\n                    field: `_v_${field}`,  // value column with \"val\" suffix\r\n                    headerName: element.cap,  // Append \"val\" to the header name\r\n                });\r\n            }\r\n            else {\r\n\r\n                colDef.push({\r\n                    field: field,\r\n                    //flex : 2,\r\n                    headerName: element.cap,\r\n\r\n                })\r\n\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n    function customIsDelFilter(params) {\r\n        const filteredRows = params.rowData.filter((row) => !row._IsDel);\r\n        params.successCallback(filteredRows);\r\n    }\r\n\r\n    colDef.push({\r\n        field: \"_IsDel\",\r\n        filter: \"agTextColumnFilter\",\r\n        filterParams: { apply: customIsDelFilter },\r\n        hide: true,\r\n    });\r\n\r\n    const columnDefs = colDef;\r\n\r\n\r\n\r\n    function lookupValue(mappings, key) {\r\n        let obj = mappings.find((o) => o.k == key);\r\n\r\n        return !obj ? \"\" : obj.v;\r\n    }\r\n\r\n    function lookupKey(mappings, key) {\r\n        let obj = mappings.find((o) => o.k == key);\r\n        return !obj ? \"\" : obj.k;\r\n    }\r\n\r\n\r\n    // convert code to value\r\n    function makeValueFormatter(params) {\r\n        /* if(lookupValue(carMappings, params.value) ==\"\"){\r\n       \r\n             var rowNode = gridRef.current.api.getRowNode(params.data.id);\r\n             rowNode.setDataValue(params.colDef.field, \"\"newPrice\"\");\r\n       \r\n           } */\r\n        return lookupValue(params.colDef.cellEditorParams.values, params.value);\r\n    }\r\n\r\n    // convert value to code\r\n    function makeValueParser(params) {\r\n        return lookupKey(params.colDef.cellEditorParams.values, params.value);\r\n    }\r\n\r\n    async function onRowDoubleClicked(event) {\r\n\r\n\r\n        defs.childUI.forEach((item) => {\r\n            if (event.data[item.id]) {\r\n                setValue(item.id, event.data[item.id])\r\n            }\r\n        })\r\n\r\n\r\n        let currentgridRow = {\r\n            [defs.fieldname]: event.data\r\n        }\r\n\r\n        \r\n        /* Call on Form Grid Load Event */\r\n        let t = defs.stagelementdata?.sev?.[defs.fieldname]?.ev.frmgrload;\r\n        if (t) {\r\n            let r = stageGridRefs[defs.fieldname].current.api.getRowNode(event.data._rid);\r\n            await GridEventCaller(\r\n                eDefHldrRef.current, // Use the ref to get the latest value\r\n                \"\",\r\n                t,\r\n                stageGridRefs,\r\n                setValue,\r\n                defs.fieldname,\r\n                FormContextdataRef.current,\r\n                event.data._rid,\r\n                null,\r\n                r,\r\n                seteDefHldr\r\n            );\r\n        }\r\n\r\n\r\n        setcurrentGridRowData(currentgridRow); //Set Current row data , to identify grid element on change in formgrids , it will be referd in other controls.\r\n\r\n        setformgriddata(event.data);\r\n\r\n        openModal();\r\n\r\n    }\r\n\r\n    function uuidv4() {\r\n        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>\r\n            (\r\n                c ^\r\n                (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\r\n            ).toString(16)\r\n        );\r\n    }\r\n\r\n    function createNewRowData() {\r\n        /* Check if server event configured */\r\n\r\n        const newData = {\r\n            _rid: uuidv4(),\r\n            _IsDel: false, // Set _IsDel to false\r\n        };\r\n        return newData;\r\n    }\r\n\r\n    const onGridReady = (params) => {\r\n\r\n\r\n        //setGridApi(params.api);\r\n\r\n        // params.columnApi.autoSizeAllColumns();\r\n\r\n\r\n\r\n        setColumnApi(stageGridRefs[defs.fieldname].current.api);\r\n        hidecolumns(stageGridRefs[defs.fieldname].current.api);\r\n\r\n        // Apply the filter programmatically\r\n        applyIsDelFilter(params.api);\r\n\r\n        setstageGridList((prevGridList) => {\r\n            const updatedGridList = { ...prevGridList };\r\n\r\n            if (updatedGridList && defs.fieldname) {\r\n                updatedGridList[defs.fieldname].isReady = true;\r\n            }\r\n            return updatedGridList;\r\n        });\r\n    };\r\n\r\n    const applyIsDelFilter = (api) => {\r\n        // Define the filter model to be applied\r\n        const filterModel = {\r\n            _IsDel: {\r\n                // Column field name\r\n                filterType: \"text\",\r\n                type: \"equals\",\r\n                filter: \"false\", // Filter for true values\r\n            },\r\n        };\r\n\r\n        // Apply the filter model\r\n        api.setFilterModel(filterModel);\r\n    };\r\n\r\n    // Function to find the element with id \"pop_OthLoanDet\"\r\n    function findElementById(arr, id) {\r\n        for (const item of arr) {\r\n            if (item.id === id) {\r\n                return item;\r\n            }\r\n\r\n            if (item.child && Array.isArray(item.child)) {\r\n                const foundChild = findElementById(item.child, id);\r\n                if (foundChild) {\r\n                    return foundChild;\r\n                }\r\n            }\r\n            if (item.tabcontent && Array.isArray(item.tabcontent)) {\r\n                const foundChild = findElementById(item.tabcontent, id);\r\n                if (foundChild) {\r\n                    return foundChild;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /* Hide Grid Column based on the configuration given */\r\n  /* Hide Grid Column based on the configuration given */\r\n  const hidecolumns = (clmapi) => {\r\n\r\n    clmapi.getColumnDefs().map((item) => {\r\n      const cls =\r\n        defs.stagelementdata.prp[item.field] &&\r\n        defs.stagelementdata.prp[item.field].cls;\r\n\r\n      if (cls == \"d-none\") {\r\n        clmapi.setColumnVisible(item.field, false);\r\n      }\r\n    });\r\n  };\r\n    // Function to show modal programmatically\r\n    const openModal = () => {\r\n\r\n        const modalElement = modalRef.current;\r\n        const bsModal = new Modal(modalElement, {\r\n            backdrop: \"static\",\r\n            keyboard: false,\r\n        });\r\n        bsModal.show();\r\n    };\r\n\r\n    /*Updating Ag grid row based on the form grid values */\r\n\r\n    let gridcolumns = []\r\n\r\n    defs.childUI.forEach((item) => {\r\n        gridcolumns.push(item.id)\r\n    })\r\n\r\n    const watchedFields = watch(gridcolumns);\r\n\r\n    // Update AG Grid row when form values change\r\n    useEffect(() => {\r\n        \r\n        if (formgriddata) {\r\n            const rowNode = stageGridRefs[defs.fieldname].current.api.getRowNode(\r\n                formgriddata._rid\r\n            );\r\n\r\n            const data = {};\r\n\r\n            // Iterate through the object\r\n            for (const key in defs.stagelementdata.elms[defs.fieldname].child) {\r\n                if (defs.cntrlsdata[key].ty == \"3\") {\r\n                    let cmdgridcol = \"_v_\" + key \r\n                    data[cmdgridcol] = combodataref?.current[key]?.find(item => item.k == getValues(key))?.v;\r\n                }\r\n                data[key] = getValues(key);\r\n            }\r\n\r\n            const updatedRow = { ...rowNode.data, ...data };\r\n\r\n            //setformgriddata(updatedRow);\r\n\r\n            // Update AG Grid data\r\n            if (stageGridRefs[defs.fieldname].current) {\r\n                stageGridRefs[defs.fieldname].current.api.applyTransaction({ update: [updatedRow] });\r\n            }\r\n            \r\n        }\r\n    }, [watchedFields]);\r\n\r\n    // Function to handle modal close\r\n    const handleCloseModal = () => {\r\n        setformgriddata(null);\r\n        // Logic to close modal\r\n    };\r\n\r\n\r\n    const addItems = useCallback(async (addIndex) => {\r\n\r\n\r\n        const transactionResult = stageGridRefs[defs.fieldname].current.api.applyTransaction({\r\n            add: [createNewRowData()],\r\n            addIndex: addIndex,\r\n        });\r\n\r\n        // The added rows will be in the `add` property of the result\r\n        if (transactionResult && transactionResult.add) {\r\n            for (const rowNode of transactionResult.add) {\r\n                const rowId = rowNode.id;  // This is the ID of the newly added row\r\n\r\n                const rowAddEvent =\r\n                    defs.stagelementdata?.sev?.[defs.fieldname]?.ev?.rowadd;\r\n\r\n                let r = stageGridRefs[defs.fieldname].current.api.getRowNode(rowId);\r\n\r\n                if (rowAddEvent) {\r\n\r\n                    await GridEventCaller(\r\n                        eDefHldrRef.current, // Use the ref to get the latest value\r\n                        \"\",\r\n                        rowAddEvent,\r\n                        stageGridRefs,\r\n                        setValue,\r\n                        defs.fieldname,\r\n                        FormContextdataRef.current,\r\n                        rowId,\r\n                        null,\r\n                        r,\r\n                        seteDefHldr\r\n                    );\r\n\r\n\r\n                }\r\n                let currentgridRow = {\r\n                    [defs.fieldname]: r.data\r\n                }\r\n\r\n                let rowdata = r.data\r\n                setcurrentGridRowData(currentgridRow); //Set Current row data , to identify grid element on change in formgrids , it will referd in other controls.\r\n                setformgriddata(r.data);\r\n                /*Set Values to control */\r\n                defs.childUI.forEach((item) => {\r\n                    if (rowdata[item.id]) {\r\n                        setValue(item.id, rowdata[item.id])\r\n\r\n                    }\r\n\r\n                })\r\n            };\r\n\r\n\r\n            openModal();\r\n        }\r\n\r\n\r\n        // const result = await res.add[0].data\r\n    }, []);\r\n\r\n    const onRemoveSelected = useCallback(() => {\r\n        const selectedData =\r\n            stageGridRefs[defs.fieldname].current.api.getSelectedRows();\r\n        // Modify the selected rows by adding \"_IsDel\" as true\r\n        const updatedRows = selectedData.map((row) => ({ ...row, _IsDel: true }));\r\n\r\n        // Apply transaction to update the rows\r\n        stageGridRefs[defs.fieldname].current.api.applyTransaction({\r\n            update: updatedRows,\r\n        });\r\n    }, []);\r\n\r\n    const handleCellValueChanged = async (e) => {\r\n        let t = defs.stagelementdata?.sev?.[e.column.colId]?.ev.change;\r\n        if (t) {\r\n            let r = stageGridRefs[defs.fieldname].current.api.getRowNode(e.data._rid);\r\n            await GridEventCaller(\r\n                eDefHldrRef.current, // Use the ref to get the latest value\r\n                \"\",\r\n                t,\r\n                stageGridRefs,\r\n                setValue,\r\n                defs.fieldname,\r\n                FormContextdataRef.current,\r\n                e.data._rid,\r\n                null,\r\n                r,\r\n                seteDefHldr\r\n            );\r\n        }\r\n    };\r\n\r\n    const gridOptions = {\r\n        // suppressColumnVirtualisation: true,\r\n        //autoSizePadding: 20,\r\n        paginationPageSize: 10,\r\n        onCellValueChanged: handleCellValueChanged,\r\n        // autoSizeColumns:true\r\n\r\n        onGridReady: (params) => {\r\n            params.api.sizeColumnsToFit();\r\n        },\r\n        onFirstDataRendered: (params) => {\r\n            params.api.sizeColumnsToFit();\r\n        }\r\n    };\r\n\r\n    const defaultcoldefs = useMemo(\r\n        () => ({\r\n            singleClickEdit: false,\r\n            editable: false,\r\n            //alwaysShowHorizontalScroll : true,\r\n            resizable: true,\r\n            suppressColumnVirtualisation: true,\r\n            // autoSizePadding: 20,\r\n            minWidth: 200,\r\n            //maxWidth: 300\r\n        }),\r\n        []\r\n    );\r\n\r\n    const ResetData = () => {\r\n        for (const key in defs.stagelementdata.elms[defs.fieldname].child) {\r\n            setValue(key, null);\r\n            setformgriddata(null);\r\n            setcurrentGridRowData(null);\r\n        }\r\n    };\r\n\r\n    const getRowId = useMemo(() => {\r\n        return (params) => params.data._rid;\r\n    }, []);\r\n\r\n\r\n    // Function to be called on blur (when cell editing stops)\r\n    const onCellEditingStopped = useCallback((params) => {\r\n        // Your custom logic here\r\n        const updatedData = params.data;\r\n    }, []);\r\n\r\n\r\n\r\n    const SaveFormData = async () => {\r\n        \r\n        const rowNode = stageGridRefs[defs.fieldname].current.api.getRowNode(\r\n            formgriddata._rid\r\n        );\r\n\r\n        const data = {};\r\n\r\n        // Iterate through the object\r\n        for (const key in defs.stagelementdata.elms[defs.fieldname].child) {\r\n            data[key] = getValues(key);\r\n\r\n        }\r\n\r\n        await rowNode.setData({ ...rowNode.data, ...data });\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={`\"row g-0 mb-3  ${eDefHldr.stg.prp[defs.fieldname]?.disp == false ? \"d-none\" : \"\"} `}>\r\n                <GrHeader\r\n                    add={addItems}\r\n                    remove={onRemoveSelected}\r\n                    header={defs.coldef.cap}\r\n                    ar={defs.stagelementdata.prp[defs.fieldname]}\r\n                    key={defs.fieldname + \"_header\"}\r\n                ></GrHeader>\r\n\r\n                <div className=\"ag-theme-alpine\">\r\n                    <AgGridReact\r\n                        key={defs.fieldname}\r\n                        onGridReady={onGridReady}\r\n                        ref={stageGridRefs[defs.fieldname]}\r\n                        rowData={rowData}\r\n                        columnDefs={columnDefs}\r\n                        defaultColDef={defaultcoldefs}\r\n                        domLayout={\"autoHeight\"}\r\n                        stopEditingWhenCellsLoseFocus\r\n                        rowSelection={\"single\"}\r\n                        getRowId={getRowId}\r\n                        pagination\r\n                        gridOptions={gridOptions}\r\n                        onRowDoubleClicked={onRowDoubleClicked}\r\n                    // onCellEditingStopped={onCellEditingStopped}\r\n                    ></AgGridReact>\r\n                </div>\r\n\r\n                <div>\r\n\r\n\r\n                    <div\r\n                        className=\"modal fade\"\r\n                        id={defs.fieldname}\r\n                        data-bs-backdrop=\"static\"\r\n                        data-bs-keyboard=\"false\"\r\n                        tabIndex=\"-1\"\r\n                        aria-labelledby=\"staticBackdropLabel\"\r\n                        aria-hidden=\"true\"\r\n                        ref={modalRef}\r\n                    >\r\n                        <div className=\"modal-dialog\">\r\n                            <div className=\"modal-content\">\r\n                                <div className=\"modal-header\">\r\n                                    <h5 className=\"modal-title\" id=\"staticBackdropLabel\">\r\n                                        {defs.coldef.cap}\r\n                                    </h5>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"btn-close\"\r\n                                        data-bs-dismiss=\"modal\"\r\n                                        aria-label=\"Close\"\r\n                                    ></button>\r\n                                </div>\r\n                                <div className=\"modal-body\">\r\n                                    <RenderUI\r\n                                        data={element.UI.child}\r\n                                        elements={elements}\r\n                                        stageElements={stageElements}\r\n                                        cntrData={cntrData}\r\n                                        rid={formgriddata && formgriddata._rid}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"modal-footer\">\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"btn btn-secondary\"\r\n                                        data-bs-dismiss=\"modal\"\r\n                                        onClick={ResetData}\r\n                                    >\r\n                                        Close\r\n                                    </button>\r\n                                    {/* <button\r\n                                        type=\"button\"\r\n                                        className=\"btn btn-primary\"\r\n                                        data-bs-dismiss=\"modal\"\r\n                                        onClick={SaveFormData}\r\n                                    >\r\n                                        Save\r\n                                    </button> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default FormGrid;\r\n","import React from \"react\";\r\nimport TextBox from \"./controls/TextBox\";\r\nimport ComboBox from \"./controls/ComboBox\";\r\nimport NumericBox from \"./controls/NumericBox\";\r\nimport DateBox from \"./controls/DateBox\";\r\nimport DateTimeBox from \"./controls/DateTimeBox\";\r\nimport CheckBox from \"./controls/CheckBox\";\r\nimport RadioButton from \"./controls/RadioButton\";\r\nimport File from \"./controls/File\";\r\nimport Label from \"./controls/Label\";\r\nimport MultiLineTextBox from \"./controls/MultiLineTextBox\";\r\nimport Button from \"./controls/Button\";\r\nimport Grid from \"./controls/Grid\";\r\nimport PopupForm from \"./controls/PopupForm\";\r\nimport Footer from \"../Layout/footer\";\r\nimport HTMLRenderer from \"./controls/HTMLRenderer\";\r\nimport FormGrid from \"./controls/FormGrid\";\r\n\r\nconst OneScreen = ({ dataprops, fieldname, stagelementdata, elementdefs , cls , childUI ,rid , dv}) => {\r\n  switch (dataprops.ty) {\r\n    case 1:\r\n      return (\r\n        <TextBox\r\n          eid={dataprops.eid}\r\n          fieldname={fieldname}\r\n          cap={dataprops.cap}\r\n          col={\r\n             cls\r\n          }\r\n          mn={\r\n            stagelementdata.prp[fieldname] && stagelementdata.prp[fieldname].mn\r\n          }\r\n          val={dataprops.val}\r\n          mxLen={\r\n            stagelementdata.prp[fieldname] &&\r\n            stagelementdata.prp[fieldname].mxLen\r\n          }\r\n          ev={\r\n            stagelementdata.cev[fieldname] && stagelementdata.cev[fieldname].ev\r\n          }\r\n          rid = {rid}\r\n        />\r\n      );\r\n    case 2:\r\n      return (\r\n        <NumericBox\r\n          eid={dataprops.eid}\r\n          fieldname={fieldname}\r\n          cap={dataprops.cap}\r\n          col={\r\n            cls\r\n         }\r\n          mn={\r\n            stagelementdata.prp[fieldname] && stagelementdata.prp[fieldname].mn\r\n          }\r\n          val={dataprops.val}\r\n          mxLen={\r\n            stagelementdata.prp[fieldname] &&\r\n            stagelementdata.prp[fieldname].mxLen\r\n          }\r\n          ev={\r\n            stagelementdata.cev[fieldname] && stagelementdata.cev[fieldname].ev\r\n          }\r\n          rid = {rid}\r\n        />\r\n      );\r\n    case 3:\r\n      return (\r\n        <ComboBox\r\n          eid={dataprops.eid}\r\n          fieldname={fieldname}\r\n          cap={dataprops.cap}\r\n          col={\r\n            cls\r\n         }\r\n          mn={\r\n            stagelementdata.prp[fieldname] && stagelementdata.prp[fieldname].mn\r\n          }\r\n          val={dataprops.val}\r\n          mxLen={\r\n            stagelementdata.prp[fieldname] &&\r\n            stagelementdata.prp[fieldname].mxLen\r\n          }\r\n          ev={\r\n            stagelementdata.cev[fieldname] && stagelementdata.cev[fieldname].ev\r\n          }\r\n          cod={dataprops.cod}\r\n          rid = {rid}\r\n        />\r\n      );\r\n    case 4:\r\n      return (\r\n        <DateBox\r\n          eid={dataprops.eid}\r\n          fieldname={fieldname}\r\n          cap={dataprops.cap}\r\n          col={\r\n            cls\r\n         }\r\n          mn={\r\n            stagelementdata.prp[fieldname] && stagelementdata.prp[fieldname].mn\r\n          }\r\n          val={dataprops.val}\r\n          mxLen={\r\n            stagelementdata.prp[fieldname] &&\r\n            stagelementdata.prp[fieldname].mxLen\r\n          }\r\n          ev={\r\n            stagelementdata.cev[fieldname] && stagelementdata.cev[fieldname].ev\r\n          }\r\n          rid = {rid}\r\n        />\r\n      );\r\n    case 5:\r\n      return \"TimeStamp\";\r\n    case 6:\r\n      return (\r\n        <DateTimeBox\r\n          eid={dataprops.eid}\r\n          fieldname={fieldname}\r\n          cap={dataprops.cap}\r\n          col={\r\n            cls\r\n         }\r\n         rid = {rid}\r\n        />\r\n      );\r\n    case 7:\r\n      return (\r\n        <CheckBox\r\n          eid={dataprops.eid}\r\n          fieldname={fieldname}\r\n          cap={dataprops.cap}\r\n          col={\r\n            cls\r\n         }\r\n          mn={\r\n            stagelementdata.prp[fieldname] && stagelementdata.prp[fieldname].mn\r\n          }\r\n          val={dataprops.val}\r\n          mxLen={\r\n            stagelementdata.prp[fieldname] &&\r\n            stagelementdata.prp[fieldname].mxLen\r\n          }\r\n          ev={\r\n            stagelementdata.cev[fieldname] && stagelementdata.cev[fieldname].ev\r\n          }\r\n          rid = {rid}\r\n        />\r\n      );\r\n    case 8:\r\n      return (\r\n        <RadioButton\r\n          eid={dataprops.eid}\r\n          fieldname={fieldname}\r\n          cap={dataprops.cap}\r\n          rid = {rid}\r\n        />\r\n      );\r\n    case 9:\r\n      return (\r\n        <File\r\n          eid={dataprops.eid}\r\n          fieldname={fieldname}\r\n          cap={dataprops.cap}\r\n          col={\r\n            cls\r\n         }\r\n          mn={\r\n            stagelementdata.prp[fieldname] && stagelementdata.prp[fieldname].mn\r\n          }\r\n          val={dataprops.val}\r\n          mxLen={\r\n            stagelementdata.prp[fieldname] &&\r\n            stagelementdata.prp[fieldname].mxLen\r\n          }\r\n          ev={\r\n            stagelementdata.cev[fieldname] && stagelementdata.cev[fieldname].ev\r\n          }\r\n          rid = {rid}\r\n        />\r\n      );\r\n    case 10:\r\n\r\n      if(dataprops.fgr){\r\n        return (\r\n          <>\r\n            {\" \"}\r\n            <FormGrid\r\n              coldef={dataprops}\r\n              cntrlsdata={elementdefs}\r\n              stagelementdata={stagelementdata}\r\n              fieldname={fieldname}\r\n              childUI = {childUI}\r\n              rid = {rid}\r\n            ></FormGrid>{\" \"}\r\n          </>\r\n        );\r\n\r\n      }\r\n      return (\r\n        <>\r\n          {\" \"}\r\n          <Grid\r\n            coldef={dataprops}\r\n            cntrlsdata={elementdefs}\r\n            stagelementdata={stagelementdata}\r\n            fieldname={fieldname}\r\n            childUI = {childUI}\r\n            rid = {rid}\r\n          ></Grid>{\" \"}\r\n        </>\r\n      );\r\n\r\n    case 11:\r\n      return (\r\n        <Label eid={dataprops.eid} fieldname={fieldname} cap={dataprops.cap} />\r\n      );\r\n    case 12:\r\n      return (\r\n        <MultiLineTextBox\r\n          eid={dataprops.eid}\r\n          fieldname={fieldname}\r\n          cap={dataprops.cap}\r\n          col={\r\n            cls\r\n         }\r\n          mn={\r\n            stagelementdata.prp[fieldname] && stagelementdata.prp[fieldname].mn\r\n          }\r\n          val={dataprops.val}\r\n          mxLen={\r\n            stagelementdata.prp[fieldname] &&\r\n            stagelementdata.prp[fieldname].mxLen\r\n          }\r\n          ev={\r\n            stagelementdata.cev[fieldname] && stagelementdata.cev[fieldname].ev\r\n          }\r\n          rid = {rid}\r\n        />\r\n      );\r\n    case 13:\r\n      return (\r\n        <Button   eid={dataprops.eid}\r\n        fieldname={fieldname}\r\n        cap={dataprops.cap}\r\n        col={\r\n           cls\r\n        }\r\n        mn={\r\n          stagelementdata.prp[fieldname] && stagelementdata.prp[fieldname].mn\r\n        }\r\n        val={dataprops.val}\r\n        mxLen={\r\n          stagelementdata.prp[fieldname] &&\r\n          stagelementdata.prp[fieldname].mxLen\r\n        }\r\n        ev={\r\n          stagelementdata.cev[fieldname] && stagelementdata.cev[fieldname].ev\r\n        }\r\n        rid = {rid}\r\n     />\r\n      );\r\n    case 14:\r\n      return (\r\n        <PopupForm\r\n          eid={dataprops.eid}\r\n          fieldname={fieldname}\r\n          cap={dataprops.cap}\r\n          col={\r\n            cls\r\n         }\r\n          mn={\r\n            stagelementdata.prp[fieldname] && stagelementdata.prp[fieldname].mn\r\n          }\r\n          val={dataprops.val}\r\n          mxLen={\r\n            stagelementdata.prp[fieldname] &&\r\n            stagelementdata.prp[fieldname].mxLen\r\n          }\r\n          ev={\r\n            stagelementdata.cev[fieldname] && stagelementdata.cev[fieldname].ev\r\n          }\r\n          defs={dataprops}\r\n          elementdefs={elementdefs}\r\n          stagelementdata={stagelementdata}\r\n          childUI = {childUI}\r\n          rid = {rid}\r\n        />\r\n      );\r\n\r\n      case 16:\r\n        return (\r\n          <HTMLRenderer\r\n            eid={dataprops.eid}\r\n            fieldname={fieldname}\r\n            cap={dataprops.cap}\r\n            col={\r\n              cls\r\n           }\r\n            mn={\r\n              stagelementdata.prp[fieldname] && stagelementdata.prp[fieldname].mn\r\n            }\r\n            val={dataprops.val}\r\n            mxLen={\r\n              stagelementdata.prp[fieldname] &&\r\n              stagelementdata.prp[fieldname].mxLen\r\n            }\r\n            ev={\r\n              stagelementdata.cev[fieldname] && stagelementdata.cev[fieldname].ev\r\n            }\r\n            rid = {rid}\r\n            dv = {dv}\r\n          />\r\n        );\r\n\r\n      \r\n    default:\r\n      return null;\r\n  }\r\n};\r\nexport default OneScreen;\r\n","import React from \"react\";\r\nimport OneScreen from \"./OneScreen\";\r\n\r\nconst RenderUI = ({ data, elements, stageElements, cntrData , rid }) => {\r\n  try {\r\n\r\n    \r\n    function uuidv4() {\r\n      return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>\r\n        (\r\n          c ^\r\n          (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\r\n        ).toString(16)\r\n      );\r\n    }\r\n\r\n    \r\n  return (\r\n    <>\r\n      {data.map((item) => {\r\n        switch (item.typ) {\r\n          case \"div\":\r\n            return (\r\n              <>\r\n                <div className={`${item.cls}`} key={uuidv4}>\r\n                  {item.child && item.child.length > 0 && (\r\n                    <RenderUI\r\n                      data={item.child}\r\n                      elements={elements}\r\n                      stageElements={stageElements}\r\n                      cntrData={cntrData}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </>\r\n            );\r\n\r\n          case \"h\":\r\n            return (\r\n              <>\r\n                <item.tag className={`${item.cls}`}>{item.val}</item.tag>\r\n\r\n                {item.child && item.child.length > 0 && (\r\n                  <RenderUI\r\n                    data={item.child}\r\n                    elements={elements}\r\n                    stageElements={stageElements}\r\n                    cntrData={cntrData}\r\n                  />\r\n                )}\r\n              </>\r\n            );\r\n\r\n          case \"tab\":\r\n            return (\r\n              <>\r\n                <ul\r\n                  className=\"nav nav-tabs\"\r\n                  id=\"borderedTab\"\r\n                  role=\"tablist\"\r\n                >\r\n                  {item.tabs.map((x) => (\r\n                    <li key={x.id} className=\"nav-item\" role=\"presentation\">\r\n                      <button\r\n                        className={`nav-link ${x.cls}`}\r\n                        id={x.id}\r\n                        data-bs-toggle=\"tab\"\r\n                        data-bs-target={`#${item.tabcontent.find((element) => element.tid === x.id).id}`}\r\n                        type=\"button\"\r\n                        role=\"tab\"\r\n                        aria-controls=\"home\"\r\n                        aria-selected=\"true\"\r\n                      >\r\n                        {x.val}\r\n                      </button>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n                <div className=\"tab-content pt-2\" id=\"borderedTabContent\">\r\n                  {item.tabcontent.map((y) => (\r\n                    <div\r\n                      className= {`tab-pane fade ${y.cls}`} \r\n                      id={y.id}\r\n                      key={y.id}\r\n                      role=\"tabpanel\"\r\n                      aria-labelledby={y.tid}\r\n                    >\r\n                      <div className=\"row\">\r\n                      {y.child && y.child.length > 0 && (\r\n                        <RenderUI\r\n                          data={y.child}\r\n                          elements={elements}\r\n                          stageElements={stageElements}\r\n                          cntrData={cntrData}\r\n                          rid = {rid}\r\n                        />\r\n                      )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </>\r\n            );\r\n\r\n          case \"input\":\r\n            return (\r\n              <>\r\n                <OneScreen\r\n                  dataprops={\r\n                    elements.find((element) => element.fieldname === item.id)\r\n                      .elementdata\r\n                  }\r\n                  key={item.id}\r\n                  fieldname={item.id}\r\n                  stagelementdata={stageElements}\r\n                  elementdefs={cntrData}\r\n                  cls={item.cls}\r\n                  childUI = {item.child}\r\n                  rid={rid}\r\n                  dv={item.dv}\r\n                />\r\n              </>\r\n            );\r\n            case \"popup\":\r\n              return (\r\n                <>\r\n                  <OneScreen\r\n                    dataprops={\r\n                      elements.find((element) => element.fieldname === item.id)\r\n                        .elementdata\r\n                    }\r\n                    key={item.id}\r\n                    fieldname={item.id}\r\n                    stagelementdata={stageElements}\r\n                    elementdefs={cntrData}\r\n                    cls={item.cls}\r\n                    childUI = {item.child}\r\n                    rid={rid}\r\n                  />\r\n                </>\r\n              );\r\n\r\n            case \"grid\":\r\n              return (\r\n                <>\r\n                  <OneScreen\r\n                    dataprops={\r\n                      elements.find((element) => element.fieldname === item.id)\r\n                        .elementdata\r\n                    }\r\n                    key={ uuidv4}\r\n                    fieldname={item.id}\r\n                    stagelementdata={stageElements}\r\n                    elementdefs={cntrData}\r\n                    cls={item.cls}\r\n                    childUI = {item.child}\r\n                    rid={rid}\r\n                  />\r\n                </>\r\n              );\r\n\r\n          default:\r\n            return null;\r\n        }\r\n      })}\r\n    </>\r\n    \r\n  );\r\n}\r\ncatch(e){\r\n\r\n  console.log(\"Error in Render UI -\", e)\r\n}\r\n  \r\n};\r\n\r\nexport default RenderUI;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport { EventCaller, ServerEventCaller } from \"../BusinessLogics/EventHandler\";\r\n\r\nconst Button = ({ eid, fieldname, cap, col, mn, ev, val, mxLen }) => {\r\n  const {\r\n    register,\r\n    seteDefHldr,\r\n    formState: { errors },\r\n  } = useContext(FormContext);\r\n  const {\r\n    setValue,\r\n    getValues,\r\n    eDefHldr,\r\n    stageGridRefs,\r\n    watch,\r\n    trigger,\r\n    stageElements,\r\n    cntrData,\r\n    combodata,\r\n    setComboData,\r\n    setEventLoading,\r\n    modalVisible,\r\n    setModalVisible,\r\n    multiSearchData,\r\n    setMultiSearchData\r\n  } = useContext(FormContext);\r\n\r\n  const FormContextdata = {\r\n    getValues: getValues,\r\n    stageGridRefs: stageGridRefs,\r\n    stageElements: stageElements,\r\n    cntrData: cntrData,\r\n    combodata,\r\n    setComboData,\r\n    setEventLoading,\r\n    modalVisible,\r\n    setModalVisible,\r\n    multiSearchData,\r\n    setMultiSearchData,\r\n    eDefHldr\r\n  };\r\n  const [formData, setFormData] = useState({});\r\n\r\n  let clientevent = {};\r\n  if (ev & (ev != \"\")) {\r\n    clientevent = JSON.parse(ev.change);\r\n  }\r\n\r\n  const handleonClick = () => {\r\n    if (clientevent.fn) {\r\n      EventCaller(\r\n        clientevent.fn,\r\n        fieldname,\r\n        clientevent.outel,\r\n        getValues,\r\n        setValue\r\n      );\r\n    }\r\n    if (eDefHldr.stg.sev[fieldname]) {\r\n      debugger;\r\n      ServerEventCaller(\r\n        eDefHldr,\r\n        getValues(),\r\n        eDefHldr.stg.sev[fieldname].ev.click,\r\n        stageGridRefs,\r\n        setValue,\r\n        FormContextdata, seteDefHldr\r\n      );\r\n\r\n    }\r\n  };\r\n\r\n  {\r\n    return (\r\n      <div className={`${col} mb-3 form-check`}>\r\n        <button\r\n          name={fieldname}\r\n          id={fieldname}\r\n          type=\"button\"\r\n          className=\"form-control btn btn-primary\"\r\n          disabled={eDefHldr.stg.prp[fieldname].ro}\r\n          onClick={handleonClick}\r\n        >\r\n          {cap}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Button;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport { EventCaller, ServerEventCaller } from \"../BusinessLogics/EventHandler\";\r\n\r\nconst CheckBox = ({ eid, fieldname, cap, col, mn, ev, val, mxLen }) => {\r\n\r\n  const { register, formState: { errors } } = useContext(FormContext);\r\n  const { setValue, getValues, eDefHldr, stageGridRefs, watch, trigger, stageElements, cntrData, combodata, setComboData, setEventLoading, seteDefHldr, modalVisible,\r\n    setModalVisible ,     multiSearchData,\r\n    setMultiSearchData } = useContext(FormContext);\r\n\r\n\r\n  const FormContextdata = {\r\n    getValues: getValues,\r\n    stageGridRefs: stageGridRefs,\r\n    stageElements: stageElements,\r\n    cntrData: cntrData,\r\n    combodata,\r\n    setComboData,\r\n    setEventLoading, modalVisible,\r\n    setModalVisible,\r\n    multiSearchData,\r\n    setMultiSearchData,\r\n    eDefHldr\r\n  };\r\n\r\n\r\n\r\n  const [formData, setFormData] = useState({});\r\n\r\n  let clientevent = {}\r\n  if (ev & ev != \"\") {\r\n    clientevent = JSON.parse(ev.change);\r\n  }\r\n\r\n\r\n  /* store previous value to avoid event fire when tabout */\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prevState => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n\r\n  return (\r\n    <div className={`${col} mb-3 form-check`}>\r\n\r\n      <label\r\n        htmlFor={fieldname}\r\n        className={`${mn ? \"required\" : \"\"} form-check-label ${eDefHldr.stg.prp[fieldname]?.disp == false ? \"d-none\" : \"\"}`}\r\n      >\r\n        {cap}\r\n      </label>\r\n\r\n\r\n\r\n      <input\r\n        type=\"checkbox\"\r\n        aria-invalid={errors[fieldname] ? \"true\" : \"false\"}\r\n        className=\"form-check-input\"\r\n        id={fieldname}\r\n        disabled={eDefHldr.stg.prp[fieldname].ro}\r\n        style={{\r\n          color: eDefHldr.stg.prp[fieldname]?.flcr,\r\n          backgroundColor: eDefHldr.stg.prp[fieldname]?.bclr,\r\n        }}\r\n        {...register(fieldname, {\r\n          required: mn,\r\n          maxLength: { mxLen, message: \" is required\" },\r\n          value: val,\r\n          onChange: (e) => {\r\n\r\n            debugger;\r\n\r\n            if (clientevent.fn) {\r\n              EventCaller(\r\n                clientevent.fn,\r\n                fieldname,\r\n                clientevent.outel,\r\n                getValues,\r\n                setValue\r\n              )\r\n            }\r\n            if (eDefHldr.stg.sev[fieldname]) {\r\n\r\n              const currentValues = watch(fieldname);\r\n\r\n              const previousValue = formData[fieldname];\r\n\r\n              if (previousValue !== currentValues) {\r\n\r\n                ServerEventCaller(\r\n                  eDefHldr,\r\n                  getValues(),\r\n                  eDefHldr.stg.sev[fieldname].ev.change,\r\n                  stageGridRefs,\r\n                  setValue,\r\n                  FormContextdata, seteDefHldr\r\n                )\r\n                handleChange(e)\r\n              }\r\n            }\r\n          }\r\n        })}\r\n\r\n      />\r\n\r\n\r\n      {/* use role=\"alert\" to announce the error message */}\r\n\r\n      {errors[fieldname] && errors[fieldname].type == \"required\" && (\r\n\r\n        <span role=\"alert\" style={{\r\n          color: \"red\",\r\n          fontSize: \"12px\"\r\n        }}>This field is required</span>\r\n      )}\r\n      {errors[fieldname] && errors[fieldname].type == \"maxLength\" && (\r\n        <span role=\"alert\" style={{\r\n          color: \"red\",\r\n          fontSize: \"12px\"\r\n        }}>Max length exceeded</span>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckBox;\r\n\r\n","import React, { useContext, useState, useEffect , useRef } from \"react\";\r\n//import safeEval from \"safe-eval\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport { EventCaller, ServerEventCaller, GridEventCaller } from \"../BusinessLogics/EventHandler\";\r\nimport { compressBase64 } from \"../../utilities/utils\";\r\nimport Select from \"react-select\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport { FetchCombodata, FetchQryCombodata } from \"../../utilities/combodata\";\r\nconst ComboBox = ({ eid, fieldname, cap, col, mn, ev, val, cod, rid }) => {\r\n  const {\r\n    register,\r\n    getValues,\r\n    setValue,\r\n    combodata,\r\n    setComboData,\r\n    elements,\r\n    eDefHldr,\r\n    stageGridRefs,\r\n    watch,\r\n    trigger,\r\n    stageElements,\r\n    cntrData,\r\n    setEventLoading,\r\n    control,\r\n    seteDefHldr,\r\n    formState: { errors },\r\n    modalVisible,\r\n    setModalVisible,\r\n    multiSearchData,\r\n    setMultiSearchData,\r\n    currentGridRowData,\r\n    qdets\r\n  } = useContext(FormContext);\r\n\r\n  const eDefHldrRef = useRef(eDefHldr);\r\n\r\n  useEffect(() => {\r\n    eDefHldrRef.current = eDefHldr; // Keep ref updated with latest state\r\n}, [eDefHldr]);\r\n\r\n  const FormContextdata = {\r\n    getValues: getValues,\r\n    stageGridRefs: stageGridRefs,\r\n    stageElements: stageElements,\r\n    cntrData: cntrData,\r\n    combodata,\r\n    setComboData,\r\n    setEventLoading,\r\n    modalVisible,\r\n    setModalVisible,\r\n    multiSearchData,\r\n    setMultiSearchData,\r\n    eDefHldr : eDefHldrRef.current\r\n  };\r\n\r\n  // setValue(fieldname, val);\r\n  //useEffect(() => {}, [val]);\r\n\r\n  // useEffect(() => {\r\n  //   val = watch(fieldname);\r\n\r\n  //   console.log(\"wathc called\");\r\n  // }, [watch(fieldname)]);\r\n\r\n  function loadCombo(elementName) {\r\n    EventCaller(\r\n      \"reloadCombo\",\r\n      fieldname,\r\n      elementName,\r\n      getValues,\r\n      combodata,\r\n      setComboData,\r\n      elements\r\n    );\r\n  }\r\n\r\n  /* This function will return if the grid name based on the grid child control , so based on this it will decided whether to call grid event */\r\n  function findParent(elementName, elements) {\r\n    // Loop through each element in the given structure\r\n    for (let [key, value] of Object.entries(elements)) {\r\n      // If the current key matches the element name, return null (no parent)\r\n      if (key === elementName) {\r\n        return null; // root element, no parent\r\n      }\r\n\r\n      // If the current element has a \"child\" object, recurse into it\r\n      if (value.child) {\r\n        // Check if the element is found within the children\r\n        if (elementName in value.child) {\r\n          return key; // Return the parent key\r\n        }\r\n\r\n        // Recurse into the child object to keep searching for the element\r\n        const parent = findParent(elementName, value.child);\r\n        if (parent) {\r\n          return parent; // If found in recursion, return the parent\r\n        }\r\n      }\r\n    }\r\n\r\n    return null; // If no parent is found\r\n  }\r\n\r\n  useEffect(() => {\r\n    setValue(fieldname, val);\r\n  }, [val]);\r\n\r\n  useEffect(() => {\r\n    // Reset the form value when new options are loaded\r\n\r\n\r\n    if (Array.isArray(combodata)) {\r\n      if (\r\n        !val &&\r\n        !combodata[fieldname].find((option) => option.k == watch(fieldname))\r\n      ) {\r\n        setValue(fieldname, \"\"); // Reset the value to empty string\r\n      } else if (\r\n        val &&\r\n        watch(fieldname) &&\r\n        !combodata[fieldname].find((option) => option.k == watch(fieldname))\r\n      ) {\r\n        setValue(fieldname, \"\"); // Reset the value to empty string\r\n      }\r\n    }\r\n  }, [combodata[fieldname]]); // Trigger when options are loaded\r\n\r\n\r\n  const options =\r\n    combodata[fieldname] && Object.keys(combodata[fieldname]).length > 0\r\n      ? combodata[fieldname]\r\n      : [];\r\n\r\n  const newoptionsFormat = [];\r\n\r\n  options.map((item) => {\r\n    newoptionsFormat.push({\r\n      value: item.k,\r\n      label: item.v,\r\n    });\r\n  });\r\n\r\n  const [formData, setFormData] = useState({});\r\n\r\n  let clientevent = {};\r\n\r\n  if (eDefHldr.stg.cev[fieldname]) {\r\n    //clientevent = JSON.parse(ev.change);\r\n\r\n    clientevent = eDefHldr.stg.cev[fieldname].ev.change;\r\n  }\r\n\r\n  const handleChange = async (selectedOption, onChange) => {\r\n\r\n\r\n    if (clientevent) {\r\n      eval(clientevent);\r\n    }\r\n\r\n    if (eDefHldr.stg.sev[fieldname]) {\r\n      const currentValues = watch(fieldname);\r\n\r\n      const previousValue = formData[fieldname];\r\n\r\n      //  if (previousValue !== currentValues) {\r\n\r\n\r\n      let gridname = findParent(fieldname, eDefHldr.stg.elms)\r\n\r\n      if (gridname) {\r\n        let _rid = currentGridRowData[gridname]._rid\r\n        GridEventCaller(\r\n          eDefHldr, // Use the ref to get the latest value\r\n          \"\",\r\n          eDefHldr.stg.sev[fieldname].ev.change,\r\n          stageGridRefs,\r\n          setValue,\r\n          gridname,\r\n          FormContextdata,\r\n          _rid,\r\n          null,\r\n          null,\r\n          seteDefHldr\r\n        );\r\n\r\n      }\r\n\r\n      else {\r\n\r\n        ServerEventCaller(\r\n          eDefHldrRef.current,\r\n          getValues(),\r\n          eDefHldr.stg.sev[fieldname].ev.change,\r\n          stageGridRefs,\r\n          setValue,\r\n          FormContextdata,\r\n          seteDefHldr\r\n        );\r\n      }\r\n\r\n\r\n      //handleChange(e);\r\n      //  }\r\n    }\r\n  };\r\n\r\n  const storevalue = async (selectedOption, onChange) => {\r\n\r\n    await onChange(selectedOption.value); // this will store the value in form\r\n    let neweDefHldr = { ...eDefHldr }\r\n    neweDefHldr['elmsData'] = neweDefHldr['elmsData'] || {};\r\n    let field = \"_v_\" + fieldname;\r\n    neweDefHldr['elmsData'][field] = selectedOption.label;\r\n    seteDefHldr(neweDefHldr);\r\n  }\r\n  const customclass = eDefHldr.stg.prp[fieldname].cls;\r\n\r\n  return (\r\n    <div className={`${col}  ${customclass}  ${eDefHldr.stg.prp[fieldname]?.disp == false ? \"d-none\" : \"\"}`}>\r\n      <label\r\n        htmlFor={fieldname}\r\n        className={`${mn ? \"required\" : \"\"} form-label`}\r\n      >\r\n        {cap}\r\n      </label>\r\n      <Controller\r\n        name={fieldname}\r\n        control={control}\r\n        register={fieldname}\r\n        rules={{\r\n          required: mn,\r\n        }}\r\n        render={({ field: { onChange, value, onBlur } }) => (\r\n          <Select\r\n            aria-label=\"Default select example\"\r\n            isDisabled={eDefHldr.stg.prp[fieldname].ro}\r\n            onChange={(e) => storevalue(e, onChange)}\r\n            onBlur={(e) => handleChange(e, onChange)}\r\n            options={newoptionsFormat}\r\n            name={fieldname}\r\n            value={\r\n              newoptionsFormat.find((option) => option.value == value)\r\n                ? newoptionsFormat.find((option) => option.value == value)\r\n                : null\r\n            }\r\n          >\r\n          </Select>\r\n        )}\r\n      ></Controller>\r\n\r\n      {/* use role=\"alert\" to announce the error message */}\r\n\r\n      {errors[fieldname] && errors[fieldname].type == \"required\" && (\r\n        <span role=\"alert\" style={{ color: \"red\", fontSize: \"12px\" }}>\r\n          This field is required\r\n        </span>\r\n      )}\r\n      {errors[fieldname] && errors[fieldname].type == \"maxLength\" && (\r\n        <span role=\"alert\">Max length exceeded</span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComboBox;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport { EventCaller, ServerEventCaller } from \"../BusinessLogics/EventHandler\";\r\n\r\nexport const DateBox = ({\r\n  eid,\r\n  fieldname,\r\n  cap,\r\n  col,\r\n  mn,\r\n  ev,\r\n  val,\r\n  mxLen,\r\n  rid,\r\n  seteDefHldr\r\n}) => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useContext(FormContext);\r\n\r\n \r\n\r\n  const {\r\n    setValue,\r\n    getValues,\r\n    eDefHldr,\r\n    stageGridRefs,\r\n    watch,\r\n    trigger,\r\n    stageElements,\r\n    cntrData,\r\n    setComboData,\r\n    combodata,\r\n    setEventLoading,\r\n    modalVisible, \r\n    setModalVisible,\r\n    multiSearchData,\r\n    setMultiSearchData\r\n  } = useContext(FormContext);\r\n\r\n  const FormContextdata =  {\r\n    getValues: getValues,\r\n    stageGridRefs: stageGridRefs,\r\n    stageElements: stageElements,\r\n    cntrData: cntrData,\r\n    combodata,\r\n    setComboData,\r\n    setEventLoading,\r\n    modalVisible, \r\n    setModalVisible,\r\n    multiSearchData,\r\n    setMultiSearchData,\r\n    eDefHldr\r\n  };\r\n\r\n\r\n  const [formData, setFormData] = useState({});\r\n  let clientevent = null;\r\n  if (eDefHldr.stg.cev[fieldname]) {\r\n    clientevent = eDefHldr.stg.cev[fieldname].ev.change;\r\n  }\r\n\r\n  /* store previous value to avoid event fire when tabout */\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n\r\n  const initialDateValue = val ? val.length > 0 ? val.substring(0, 10) : \"\" : \"\";\r\n\r\n\r\n  return (\r\n    <div className={`${col} mb-3 ${eDefHldr.stg.prp[fieldname]?.disp == false ? \"d-none\" : \"\"}`}>\r\n      <label\r\n        htmlFor={fieldname}\r\n        className={`${mn ? \"required\" : \"\"} form-label`}\r\n      >\r\n        {cap}\r\n      </label>\r\n      <input\r\n        name={fieldname}\r\n        id={fieldname}\r\n        type=\"date\"\r\n        className=\"form-control\"\r\n        disabled = {eDefHldr.stg.prp[fieldname].ro}\r\n        style={{\r\n          color: eDefHldr.stg.prp[fieldname]?.flcr,\r\n          backgroundColor: eDefHldr.stg.prp[fieldname]?.bclr,\r\n        }}\r\n        {...register(fieldname, {\r\n          required: mn,\r\n          maxLength: { mxLen, message: \" is required\" },\r\n          value: val ,\r\n          onBlur: (e) => {\r\n            // if (clientevent.fn) {\r\n            //   EventCaller(\r\n            //     clientevent.fn,\r\n            //     fieldname,\r\n            //     clientevent.outel,\r\n            //     getValues,\r\n            //     setValue\r\n            //   )\r\n            // }\r\n            if (clientevent) {\r\n              eval(clientevent);\r\n            }\r\n\r\n            if (eDefHldr.stg.sev[fieldname]) {\r\n              const currentValues = watch(fieldname);\r\n\r\n              const previousValue = formData[fieldname];\r\n\r\n              if (previousValue !== currentValues) {\r\n                ServerEventCaller(\r\n                  eDefHldr,\r\n                  getValues(),\r\n                  eDefHldr.stg.sev[fieldname].ev.change,\r\n                  stageGridRefs,\r\n                  setValue,\r\n                  FormContextdata,seteDefHldr\r\n                );\r\n                handleChange(e);\r\n              }\r\n            }\r\n          },\r\n        })}\r\n      />\r\n\r\n      {/* use role=\"alert\" to announce the error message */}\r\n\r\n      {errors[fieldname] && errors[fieldname].type == \"required\" && (\r\n        <span role=\"alert\" style={{ color: \"red\", fontSize: \"12px\" }}>\r\n          This field is required\r\n        </span>\r\n      )}\r\n      {errors[fieldname] && errors[fieldname].type == \"maxLength\" && (\r\n        <span role=\"alert\" style={{ color: \"red\", fontSize: \"12px\" }}>\r\n          Max length exceeded\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateBox;\r\n","import React from 'react'\r\n\r\nconst DateTimeBox = ({ eid , fieldname , cap}) => {\r\n\r\n  return (\r\n   \r\n    <div className=\"col-sm-4 mb-3\">\r\n  <label htmlFor={fieldname} className=\"form-label\">{cap}</label>\r\n  <input name={fieldname}  type=\"datetime-local\"  className=\"form-control\" id={eid} />\r\n</div>\r\n\r\n  )\r\n}\r\n\r\nexport default DateTimeBox","import React, { useState, useContext } from \"react\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport appsettings from \"../../../appsettings.json\";\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../../utilities/utils\";\r\nimport api from \"../../api/Webcall\";\r\nimport DocViewer, { DocViewerRenderers } from \"@cyntler/react-doc-viewer\";\r\nimport ConfirmationModal from \"../../htmlcomponents/ConfimationModal\";\r\n\r\nconst File = ({ eid, fieldname, cap, col, mn, ev, val, mxLen, rid }) => {\r\n  const apiendpoints = appsettings.ApiEndpoints;\r\n  const { eDefHldr, watch, setdocField, getValues, setValue, trigger, setEventLoading, seteDefHldr } =\r\n    useContext(FormContext);\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n\r\n  const onchagefile = async (event) => {\r\n    debugger;\r\n    if (event.target.files[0]) {\r\n      let docID = -1;\r\n\r\n      eDefHldr.qdet[\"eid\"] = eDefHldr.elms[fieldname].eid;\r\n\r\n      const formData = new FormData();\r\n\r\n      formData.append(\"_qdet\", JSON.stringify(eDefHldr.qdet));\r\n\r\n      formData.append(\"file\", event.target.files[0]);\r\n\r\n      for (var key of formData.entries()) {\r\n        console.log(key[0] + \", \" + key[1]);\r\n      }\r\n\r\n      //formData[\"_qdet\"] = JSON.stringify(eDefHldr.qdet);\r\n      //formData[\"file\"] =  event.target.files[0];\r\n\r\n      /* Header */\r\n      const convID = generateUUID();\r\n\r\n      const data = formData;\r\n      const url = apiendpoints.FileUpload;\r\n\r\n      let response = await api.post(url, formData);\r\n\r\n      let strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n      if (strResponse.hdr.rst == \"SUCCESS\") {\r\n        docID = strResponse[\"body\"][\"docid\"];\r\n\r\n        eDefHldr.fil = !eDefHldr.fil ? {} : eDefHldr.fil;\r\n        eDefHldr.fil[fieldname] = new Array();\r\n        eDefHldr.fil[fieldname][\"docid\"] = docID;\r\n      }\r\n\r\n      delete eDefHldr.qdet[\"eid\"];\r\n    }\r\n  };\r\n\r\n  const deletedoc = (fieldname) => {\r\n    setShowConfirmation(true);\r\n  };\r\n\r\n  const handleConfirmation = (confirmed) => {\r\n    setShowConfirmation(false);\r\n\r\n    if (confirmed) {\r\n      if (eDefHldr?.fil?.[fieldname]) {\r\n        delete eDefHldr.fil[fieldname];\r\n      }\r\n      setValue(fieldname, [{ id: \"-1\" }]);\r\n\r\n      trigger(fieldname);\r\n    }\r\n    // If the user clicks \"Cancel\", nothing happens.\r\n  };\r\n\r\n  const { register } = useContext(FormContext);\r\n\r\n  const Setdocfield = (fieldname) => {\r\n    debugger;\r\n\r\n    setdocField(fieldname);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`${col} mb-3 ${eDefHldr.stg.prp[fieldname]?.disp == false ? \"d-none\" : \"\"}`}>\r\n        <label\r\n          htmlFor={fieldname}\r\n          className={`${mn ? \"required\" : \"\"} form-label`}\r\n        >\r\n          {cap}\r\n        </label>\r\n\r\n        <div className={`col-12 input-group mb-3 `}>\r\n          <input\r\n            name={fieldname}\r\n            type=\"file\"\r\n            id={fieldname}\r\n            key={fieldname}\r\n            className=\"form-control d-none\"\r\n            disabled={eDefHldr.stg.prp[fieldname].ro}\r\n            data-browse-on-zone-click=\"true\"\r\n            accept=\"image/*,.pdf\"\r\n            style={{\r\n              color: eDefHldr.stg.prp[fieldname]?.flcr,\r\n              backgroundColor: eDefHldr.stg.prp[fieldname]?.bclr,\r\n            }}\r\n            {...register(fieldname, {\r\n              required: { mn, message: \" is required\" },\r\n              value: val,\r\n              onChange: onchagefile,\r\n            })}\r\n          ></input>\r\n          {!eDefHldr.stg.prp[fieldname].ro && (\r\n            <button\r\n              className=\"browse btn btn-primary px-2\"\r\n              style={{ backgroundColor: \"#4154f1\" }}\r\n              type=\"button\"\r\n              onClick={() => document.getElementById(fieldname).click()}\r\n            >\r\n              <i className=\"bi bi-upload\"></i>\r\n            </button>\r\n          )}\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control form-control\"\r\n            placeholder=\"Upload file\"\r\n            disabled={eDefHldr.stg.prp[fieldname].ro}\r\n            value={\r\n              getValues(fieldname)?.[0]?.name\r\n                ? getValues(fieldname)?.[0]?.name\r\n                : \"\"\r\n            }\r\n            readOnly\r\n          ></input>\r\n          {getValues(fieldname)?.[0]?.name && (\r\n            <>\r\n              <button\r\n                type=\"button\"\r\n                style={{ backgroundColor: \"#4154f1\" }}\r\n                className=\"browse btn btn-primary px-2\"\r\n                data-bs-toggle=\"modal\"\r\n                onClick={() => Setdocfield(fieldname)}\r\n                data-bs-target=\"#exampleModalScrollable\"\r\n              >\r\n                <i className=\"bi bi-eye\"></i>\r\n              </button>\r\n              {!eDefHldr.stg.prp[fieldname].ro && (\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"browse btn btn-danger px-2\"\r\n                  onClick={() => deletedoc(fieldname)}\r\n                >\r\n                  <i className=\"bi bi-trash\"></i>\r\n                </button>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Reusable Confirmation Modal */}\r\n      <ConfirmationModal\r\n        show={showConfirmation}\r\n        onHide={() => handleConfirmation(false)}\r\n        onConfirm={() => handleConfirmation(true)}\r\n        message=\"Are you sure you want to delete the document?\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default File;\r\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useCallback,\r\n} from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport GrComboBox from \"./GridComponents/GrComboBox\";\r\nimport GrFile from \"./GridComponents/GrFile\";\r\nimport GrMultilineBox from \"./GridComponents/GrMultilineBox\";\r\nimport GrNumericBox from \"./GridComponents/GrNumericBox\";\r\nimport GrCheckbox from \"./GridComponents/GrCheckbox\";\r\nimport GrButton from \"./GridComponents/GrButton\";\r\nimport GrHeader from \"./GridComponents/GrHeader\";\r\nimport GrModal from \"./GridComponents/GrModal\";\r\nimport GrDateBox from \"./GridComponents/GrDateBox\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\";\r\nimport GrGrid from \"./GridComponents/GrGrid\";\r\nimport gridcoldefs from \"./gridcoldefs.json\";\r\nimport PopupForm from \"./PopupForm\";\r\nimport { useContext } from \"react\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport GrPopupForm from \"./GridComponents/GrPopupForm\";\r\nimport {\r\n  Setup,\r\n  ServerEventCaller,\r\n  GridEventCaller,\r\n  GridChildEventCaller,\r\n  GridChildEventCallerOnSave,\r\n} from \"../BusinessLogics/EventHandler\";\r\nimport { array, type } from \"@amcharts/amcharts5\";\r\nimport CustomDropdownEditor from \"./GridComponents/CustomDropdownEditor\";\r\n\r\nconst Grid = (defs) => {\r\n\r\n  const {\r\n    setStageGridRefs,\r\n    stageGridRefs,\r\n    combodata,\r\n    setstageGridList,\r\n    gridList,\r\n    eDefHldr,\r\n    setValue,\r\n    getValues,\r\n    stageElements,\r\n    cntrData,\r\n    setEventLoading,\r\n    modalVisible,\r\n    setModalVisible,\r\n    seteDefHldr,\r\n    setComboData\r\n  } = useContext(FormContext);\r\n\r\n  const FormContextdata = {\r\n    getValues: getValues,\r\n    stageGridRefs: stageGridRefs,\r\n    stageElements: stageElements,\r\n    cntrData: cntrData,\r\n    setEventLoading,\r\n    modalVisible,\r\n    setModalVisible,\r\n    eDefHldr,\r\n    seteDefHldr,\r\n    setComboData,\r\n    combodata\r\n  };\r\n\r\n  const eDefHldrRef = useRef(eDefHldr);\r\n\r\n\r\n  const FormContextdataRef = useRef(FormContextdata);\r\n\r\n  useEffect(() => {\r\n    eDefHldrRef.current = eDefHldr; // Keep ref updated with latest state\r\n  }, [eDefHldr]);\r\n\r\n  useEffect(() => {\r\n    FormContextdataRef.current = FormContextdata; // Keep ref updated with latest state\r\n  }, [FormContextdata]);\r\n\r\n\r\n\r\n\r\n\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [columnApi, setColumnApi] = useState(null);\r\n\r\n  stageGridRefs[defs.fieldname] = useRef();\r\n  const gridRef = useRef();\r\n  const [modaldata, setModalData] = useState(null);\r\n\r\n  let ChildGridElements = [];\r\n\r\n  let modaldefs = null;\r\n\r\n  const [rowData, setRowData] = useState(\r\n    defs.coldef.val == \"\" ? [] : defs.coldef.val\r\n  );\r\n\r\n  /* Load Custom components based on column control type */\r\n  const gridComponents = {\r\n    2: GrNumericBox,\r\n    //3: GrComboBox,\r\n    3 : GrComboBox,\r\n    4: GrDateBox,\r\n    9: GrFile,\r\n    12: \"agLargeTextCellEditor\",\r\n    13: GrButton,\r\n    14: GrModal,\r\n    7: GrCheckbox,\r\n  };\r\n\r\n  const colDef = [];\r\n\r\n  // // supporting reference data\r\n  // const carMappings = [\r\n  //   {\r\n  //     k: \"tyt\",\r\n  //     v: \"Toyota\",\r\n  //   },\r\n  //   {\r\n  //     k: \"frd\",\r\n  //     v: \"Ford\",\r\n  //   },\r\n  //   { k: \"prs\", v: \"Porsche\" },\r\n  //   { k: \"nss\", v: \"Nissan\" },\r\n  // ];\r\n\r\n\r\n  \r\n  // Convert child object to array\r\n\r\n\r\n  function getChildElements(elementName) {\r\n\r\n    let data = eDefHldr.elms;\r\n    const parentElement = data[elementName];\r\n    if (!parentElement) {\r\n        return [];\r\n    }\r\n\r\n    const parentEid = parentElement.eid;\r\n    const childElements = [];\r\n\r\n    // Loop through the data and find elements where pid matches the parentEid\r\n    for (const key in data) {\r\n        if (data[key].pid === parentEid) {\r\n            childElements.push({ key, element: data[key] });\r\n        }\r\n    }\r\n\r\n    return childElements;\r\n}\r\n\r\n// Example usage\r\nlet childArray  = getChildElements(defs.fieldname);\r\n\r\n\r\n\r\n  childArray.map(item => {\r\n\r\n    if (!defs.childUI.find(k => k.id == item.key)) {\r\n      defs.childUI.push({\r\n        \"cap\": item.key,\r\n        \"id\": item.key,\r\n        \"typ\": \"hidden\"\r\n      })\r\n    }\r\n  })\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n  defs.childUI.forEach((item) => {\r\n    const field = item.id;\r\n    const element = {\r\n      ...defs.cntrlsdata[field],\r\n      ...defs.stagelementdata.prp[field],\r\n    };\r\n\r\n    // if (element.ty == \"10\" || element.ty == \"14\" && defs.fieldname) {\r\n    if (element.ty == \"10\" || (element.ty == \"14\" && defs.fieldname)) {\r\n      element.child = {};\r\n      element.child[field] = {};\r\n      element.fieldname = field;\r\n      element.parentfieldanme = defs.fieldname;\r\n      element.UI = findElementById(defs.stagelementdata.ui, field);\r\n      ChildGridElements.push(element);\r\n      //ChildGridElements.push(defs.stagelementdata.elms[defs.fieldname].child[field])\r\n    }\r\n\r\n    /* Defining Grid Column */\r\n    if (gridComponents[element.ty]) {\r\n      if (element.ty == \"12\") {\r\n        element.internal = true;\r\n        element.cellEditorPopup = true;\r\n        // element.flex = 2\r\n      } else if (element.ty == \"9\" || element.ty == \"10\") {\r\n        element.renderer = true;\r\n        // element.flex = 2\r\n      } else if (element.ty == \"14\") {\r\n        element.renderer = true;\r\n        element.cellRendererParams = {};\r\n        element.cellRendererParams.clicked = \"clicked\";\r\n        element.cap = defs.cntrlsdata[element.fieldname].cap;\r\n      } else if (element.ty == \"3\") {\r\n        element.editor = true;\r\n        element.valueFormatter = \"makeValueFormatter\";\r\n        element.valueParser = \"makeValueParser\";\r\n\r\n        //  element.flex = 2\r\n      } else if (element.ty == \"7\") {\r\n        // element.flex = 2\r\n      } else {\r\n        element.editor = true;\r\n\r\n        // element.flex = 2\r\n      }\r\n    }\r\n\r\n\r\n\r\n    if(element.ty != \"9\"){\r\n      colDef.push({\r\n        field: field,\r\n        hide : item.typ == \"hidden\" ? true : false,\r\n        //flex : 2,\r\n        headerName: element.cap,\r\n        ...(element.editor &&\r\n          !element.internal && {\r\n            cellEditor: gridComponents[element.ty],\r\n        }),\r\n        ...( element.renderer && { editable: false }),\r\n        ...(!element.renderer && { editable: !element.ro ? true : false }),\r\n        ...(element.ty == \"3\" && {\r\n          cellEditorParams: {\r\n            values: combodata[field]\r\n              ? combodata[field]\r\n              : [],\r\n          },\r\n          valueFormatter: eval(element.valueFormatter),\r\n          valueParser: eval(element.valueParser),\r\n        }),\r\n        ...(element.ty == \"7\" && {\r\n          cellRenderer: gridComponents[element.ty],\r\n          editable: false,\r\n          cellRendererParams: {\r\n            onChange: (params) => {\r\n              params.node.setDataValue(field, params.event.target.checked);\r\n            },\r\n          },\r\n        }),\r\n        ...(element.editor &&\r\n          element.internal && {\r\n          cellEditor: element.ty,\r\n          cellEditorPopup: element.cellEditorPopup,\r\n        }),\r\n        ...(element.renderer ||\r\n          (element.ty == \"10\" && {\r\n            cellRenderer:\r\n              gridComponents[element.ty == \"10\" ? \"14\" : element.ty],\r\n            cellRendererParams: {\r\n              fieldname: field,\r\n              cap: element.cap,\r\n              elementdefs: defs.cntrlsdata,\r\n              stagelementdata: defs.stagelementdata,\r\n            },\r\n          })),\r\n  \r\n        ...(element.renderer &&\r\n          element.ty != \"10\" && {\r\n          cellRenderer: gridComponents[element.ty],\r\n          ...(element.cellRendererParams && {\r\n            cellRendererParams: {\r\n              clicked: eval(element.cellRendererParams.clicked),\r\n              fieldname: field,\r\n              cap: element.cap,\r\n              defs,\r\n              elementdefs: defs.cntrlsdata,\r\n              stagelementdata: defs.stagelementdata,\r\n            },\r\n          }),\r\n        }),\r\n        \r\n      });\r\n\r\n    }\r\n\r\n\r\n    if (element.ty == \"9\") {\r\n      // Create a column for the key\r\n      colDef.push({\r\n          field: `_v_${field}`,  // key column as is\r\n          headerName: element.cap,  // Header name remains as is.\r\n          cellRenderer: gridComponents[element.ty],\r\n          hide : item.typ == \"hidden\" ? true : false,\r\n      });\r\n\r\n      // Create a column for the value (add \"val\" suffix)\r\n      colDef.push({\r\n          field: field,  // value column with \"val\" suffix\r\n          headerName: element.cap,  // Append \"val\" to the header name\r\n          hide : true\r\n      });\r\n  }\r\n\r\n\r\n  });\r\n\r\n\r\n  function customIsDelFilter(params) {\r\n    const filteredRows = params.rowData.filter((row) => !row._IsDel);\r\n    params.successCallback(filteredRows);\r\n  }\r\n\r\n  colDef.push({\r\n    field: \"_IsDel\",\r\n    filter: \"agTextColumnFilter\",\r\n    cellDataType : \"text\",\r\n    hide: true,\r\n  });\r\n\r\n\r\n  const columnDefs = colDef;\r\n\r\n\r\n\r\n  function lookupValue(mappings, key) {\r\n    let obj = mappings.find((o) => o.k == key);\r\n\r\n    return !obj ? \"\" : obj.v;\r\n  }\r\n\r\n  function lookupKey(mappings, key) {\r\n    let obj = mappings.find((o) => o.k == key);\r\n    return !obj ? \"\" : obj.k;\r\n  }\r\n  // convert code to value\r\n  function makeValueFormatter(params) {\r\n    /* if(lookupValue(carMappings, params.value) ==\"\"){\r\n   \r\n         var rowNode = gridRef.current.api.getRowNode(params.data.id);\r\n         rowNode.setDataValue(params.colDef.field, \"\"newPrice\"\");\r\n   \r\n       } */\r\n    return lookupValue(params.colDef.cellEditorParams.values, params.value);\r\n  }\r\n\r\n  // convert value to code\r\n  function makeValueParser(params) {\r\n    return lookupKey(params.colDef.cellEditorParams.values, params.value);\r\n  }\r\n\r\n  async function clicked(field) {\r\n    const popupFormOnLoadEv =\r\n      defs.stagelementdata?.sev?.[field.field]?.ev?.pupfload;\r\n\r\n    setModalData(field);\r\n    if (popupFormOnLoadEv) {\r\n      await GridChildEventCaller(\r\n        eDefHldr,\r\n        \"\",\r\n        popupFormOnLoadEv,\r\n        stageGridRefs,\r\n        setValue,\r\n        defs.fieldname,\r\n        FormContextdata,\r\n        field._rid,\r\n        field.field\r\n      );\r\n    }\r\n  }\r\n\r\n  function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>\r\n      (\r\n        c ^\r\n        (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\r\n      ).toString(16)\r\n    );\r\n  }\r\n\r\n  function createNewRowData() {\r\n    /* Check if server event configured */\r\n\r\n    const newData = {\r\n      _rid: uuidv4(),\r\n      _IsDel: false, // Set _IsDel to false\r\n    };\r\n    return newData;\r\n  }\r\n\r\n  const onGridReady = (params) => {\r\n\r\n\r\n   // setGridApi(params.api);\r\n\r\n    // params.columnApi.autoSizeAllColumns();\r\n\r\n\r\n    setColumnApi(stageGridRefs[defs.fieldname].current.api);\r\n    hidecolumns(stageGridRefs[defs.fieldname].current.api);\r\n\r\n    // Apply the filter programmatically\r\n   applyIsDelFilter(params.api);\r\n\r\n    setstageGridList((prevGridList) => {\r\n      const updatedGridList = { ...prevGridList };\r\n\r\n      if (updatedGridList && defs.fieldname) {\r\n        updatedGridList[defs.fieldname].isReady = true;\r\n      }\r\n      return updatedGridList;\r\n    });\r\n  };\r\n\r\n  const applyIsDelFilter = useCallback((api) => {\r\n    const filterModel = {\r\n      _IsDel: {\r\n        filterType: 'text',\r\n        type: 'equals',\r\n        filter: \"false\", // Use \"True\" or \"False\" based on the display mapping\r\n      },\r\n    };\r\n  \r\n    api.setFilterModel(filterModel);\r\n  \r\n    // Debugging filter application\r\n  }, []);\r\n  \r\n\r\n\r\n  // Function to find the element with id \"pop_OthLoanDet\"\r\n  function findElementById(arr, id) {\r\n    for (const item of arr) {\r\n      if (item.id === id) {\r\n        return item;\r\n      }\r\n\r\n      if (item.child && Array.isArray(item.child)) {\r\n        const foundChild = findElementById(item.child, id);\r\n        if (foundChild) {\r\n          return foundChild;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* Hide Grid Column based on the configuration given */\r\n  const hidecolumns = (clmapi) => {\r\n\r\n    clmapi.getColumnDefs().map((item) => {\r\n      const cls =\r\n        defs.stagelementdata.prp[item.field] &&\r\n        defs.stagelementdata.prp[item.field].cls;\r\n\r\n      if (cls == \"d-none\") {\r\n        clmapi.setColumnVisible(item.field, false);\r\n      }\r\n    });\r\n  };\r\n\r\n  const addItems = useCallback((addIndex) => {\r\n\r\n    const rowAddEvent =\r\n      defs.stagelementdata?.sev?.[defs.fieldname]?.ev?.rowadd;\r\n\r\n    if (rowAddEvent) {\r\n      GridEventCaller(\r\n        eDefHldr,\r\n        \"\",\r\n        rowAddEvent,\r\n        stageGridRefs,\r\n        setValue,\r\n        defs.fieldname,\r\n        FormContextdata,\r\n        null,\r\n        null,\r\n        null,\r\n        seteDefHldr\r\n      );\r\n\r\n\r\n    } else {\r\n      stageGridRefs[defs.fieldname].current.api.applyTransaction({\r\n        add: [createNewRowData()],\r\n        addIndex: addIndex,\r\n      });\r\n    }\r\n    // const result = await res.add[0].data\r\n  }, []);\r\n\r\n  const onRemoveSelected = useCallback(() => {\r\n    \r\n    const selectedData =\r\n      stageGridRefs[defs.fieldname].current.api.getSelectedRows();\r\n    // Modify the selected rows by adding \"_IsDel\" as true\r\n    const updatedRows = selectedData.map((row) => ({ ...row, _IsDel: true }));\r\n\r\n    // Apply transaction to update the rows\r\n    stageGridRefs[defs.fieldname].current.api.applyTransaction({\r\n      update: updatedRows,\r\n    });\r\n\r\n    applyIsDelFilter(stageGridRefs[defs.fieldname].current.api);\r\n  }, []);\r\n\r\n  const handleCellValueChanged = async (e) => {\r\n\r\n    let t = defs.stagelementdata?.sev?.[e.column.colId]?.ev.change;\r\n    if (t) {\r\n      let r = stageGridRefs[defs.fieldname].current.api.getRowNode(e.data._rid);\r\n      await GridEventCaller(\r\n        eDefHldrRef.current, // Use the ref to get the latest value\r\n        \"\",\r\n        t,\r\n        stageGridRefs,\r\n        setValue,\r\n        defs.fieldname,\r\n        FormContextdataRef.current,\r\n        e.data._rid,\r\n        null,\r\n        r,\r\n        seteDefHldr\r\n      );\r\n    }\r\n  };\r\n\r\n  const gridOptions = {\r\n    // suppressColumnVirtualisation: true,\r\n    //autoSizePadding: 20,\r\n   // paginationPageSize: 10,\r\n    onCellValueChanged: handleCellValueChanged,\r\n    // autoSizeColumns:true\r\n\r\n    onGridReady: (params) => {\r\n      params.api.sizeColumnsToFit();\r\n    },\r\n    onFirstDataRendered: (params) => {\r\n      params.api.sizeColumnsToFit();\r\n    }\r\n  };\r\n\r\n  const defaultcoldefs = useMemo(\r\n    () => ({\r\n      singleClickEdit: true,\r\n      editable: false,\r\n      //alwaysShowHorizontalScroll : true,\r\n      resizable: true,\r\n      //suppressColumnVirtualisation: true,\r\n      //filter:true,\r\n      // autoSizePadding: 20,\r\n      minWidth: 200,\r\n      //maxWidth: 300\r\n    }),\r\n    []\r\n  );\r\n\r\n  const getRowId = useMemo(() => {\r\n    return (params) => params.data._rid;\r\n  }, []);\r\n\r\n\r\n  // Function to be called on blur (when cell editing stops)\r\n  const onCellEditingStopped = useCallback((params) => {\r\n    // Your custom logic here\r\n    const updatedData = params.data;\r\n  }, []);\r\n\r\n  const rowSelection = useMemo(() => { \r\n    return {\r\n          mode: 'singleRow',\r\n          checkboxes: false,\r\n          enableClickSelection: true\r\n      };\r\n  }, []);\r\n\r\n  // // Function to fit columns\r\n  // useEffect(() => {\r\n  //   if (stageGridRefs[defs.fieldname].current && stageGridRefs[defs.fieldname].current.api) {\r\n  //     stageGridRefs[defs.fieldname].current.api.sizeColumnsToFit();\r\n  //   }\r\n  // }, []);\r\n\r\n  // // Function to fit columns\r\n  // useEffect(() => {\r\n  //   if (stageGridRefs[defs.fieldname].current && stageGridRefs[defs.fieldname].current.api) {\r\n  //     stageGridRefs[defs.fieldname].current.api.sizeColumnsToFit();\r\n  //   }\r\n  // }, [colDef]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className={`\"row g-0 mb-3  ${eDefHldr.stg.prp[defs.fieldname]?.disp == false ? \"d-none\" : \"\"} `}>\r\n        <GrHeader\r\n          add={addItems}\r\n          remove={onRemoveSelected}\r\n          header={defs.coldef.cap}\r\n          ar={defs.stagelementdata.prp[defs.fieldname]}\r\n          key={defs.fieldname + \"_header\"}\r\n        ></GrHeader>\r\n\r\n        <div className=\"ag-theme-alpine\">\r\n          <AgGridReact\r\n            key={defs.fieldname}\r\n            onGridReady={onGridReady}\r\n            ref={stageGridRefs[defs.fieldname]}\r\n            rowData={rowData}\r\n            columnDefs={columnDefs}\r\n            defaultColDef={defaultcoldefs}\r\n            domLayout={\"autoHeight\"}\r\n            stopEditingWhenCellsLoseFocus\r\n            rowSelection={rowSelection} \r\n            getRowId={getRowId}\r\n            pagination\r\n            gridOptions={gridOptions}\r\n          //  paginationPageSizeSelector={true}\r\n          // onCellEditingStopped={onCellEditingStopped}\r\n          ></AgGridReact>\r\n        </div>\r\n\r\n        {ChildGridElements.length > 0 &&\r\n          ChildGridElements.map((item) => (\r\n            <GrPopupForm\r\n              eid={\"\"}\r\n              fieldname={item.fieldname}\r\n              cap={item.cap}\r\n              col={item.col}\r\n              mn={item.mn}\r\n              val={item.val}\r\n              mxLen={item.mxLen}\r\n              ev=\"undefined\"\r\n              defs={item}\r\n              elementdefs={defs.cntrlsdata}\r\n              stagelementdata={defs.stagelementdata}\r\n              parentfieldanme={defs.fieldname}\r\n              childUI={item.UI.child}\r\n              modaldata={modaldata}\r\n              setModalData={setModalData}\r\n              eDefHldr={eDefHldr}\r\n              cntrData={cntrData}\r\n            />\r\n          ))}\r\n      </div>\r\n    </>\r\n  );\r\n\r\n\r\n};\r\n\r\nexport default Grid;\r\n","import React, {\r\n    memo,\r\n    forwardRef,\r\n    useState,\r\n    useRef,\r\n    useImperativeHandle,\r\n    useCallback,\r\n    useEffect,\r\n  } from \"react\";\r\n  \r\n  const GrButton = memo(\r\n    forwardRef((props, ref) => {\r\n      const [value, setValue] = useState(props.value);\r\n      const refInput = useRef(null);\r\n  \r\n      // Cell Editor interface, that the grid calls\r\n      useImperativeHandle(ref, () => {\r\n        return {\r\n          // the final value to send to the grid, on completion of editing\r\n          getValue() {\r\n            // this simple editor doubles any value entered into the input\r\n            return value;\r\n          },\r\n        };\r\n      });\r\n  \r\n      const onChangeListener = useCallback(\r\n        (event) => props.setValue(event.target.value),\r\n        []\r\n      );\r\n      useEffect(() => refInput.current.focus(), []);\r\n  \r\n      return (\r\n        <input\r\n          type=\"button\"\r\n          className=\"form-control\"\r\n          ref={refInput}\r\n          value={value}\r\n          onClick={onChangeListener}\r\n        />\r\n      );\r\n    })\r\n  );\r\n  \r\n  export default GrButton;\r\n  ","import React, {\r\n    memo,\r\n    forwardRef,\r\n    useState,\r\n    useRef,\r\n    useImperativeHandle,\r\n    useCallback,\r\n    useEffect,\r\n    useContext\r\n} from \"react\";\r\nimport { FormContext } from \"../../Contexts/FormContext\";\r\n\r\nconst GrCheckbox = memo(\r\n    forwardRef((props, ref) => {\r\n\r\n        const [value, setValue] = useState(props.value);\r\n\r\n        const { eDefHldr} = useContext(FormContext);\r\n        const refInput = useRef(null);\r\n\r\n        useEffect(() => {\r\n            setValue(props.value);\r\n        }, [props.value]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //   // Cell Editor interface, that the grid calls\r\n        //   useImperativeHandle(ref, () => {\r\n\r\n        //     debugger\r\n        //     return {\r\n        //       // the final value to send to the grid, on completion of editing\r\n        //       getValue() {\r\n        //         // this simple editor doubles any value entered into the input\r\n        //         return value;\r\n        //       },\r\n        //     };\r\n        //   });\r\n\r\n        //   const onChangeListener = useCallback(\r\n        //     (event) => {\r\n        //         debugger;\r\n        //         setValue(event.target.checked)},\r\n        //     []\r\n        //   );\r\n\r\n        const onChangeListener = useCallback(\r\n            (event) => {\r\n                props.onChange({ event, node: props.node });\r\n            },\r\n            [props]\r\n        );\r\n\r\n\r\n        //useEffect(() => refInput.current.focus(), []);\r\n\r\n        return (\r\n            <input\r\n                type=\"checkbox\"\r\n                id=\"fdf\"\r\n                ref={refInput}\r\n                checked={value}\r\n                onChange={onChangeListener}\r\n                disabled = {eDefHldr.stg.prp[props.column.colId].ro}\r\n            />\r\n        );\r\n    })\r\n);\r\n\r\nexport default GrCheckbox;\r\n","import React, {\r\n  memo,\r\n  forwardRef,\r\n  useState,\r\n  useRef,\r\n  useImperativeHandle,\r\n  useCallback,\r\n  useEffect,\r\n} from \"react\";\r\n\r\nconst GrComboBox = memo(\r\n  forwardRef((props, ref) => {\r\n    let options = props.colDef.cellEditorParams.values\r\n    const { value ,  values , onValueChange} = props;\r\n    debugger;\r\n    //const [value, setValue] = useState(props.value);\r\n    const refInput = useRef(null);\r\n\r\n    // // Cell Editor interface, that the grid calls\r\n    // useImperativeHandle(ref, () => {\r\n    //   return {\r\n    //     // the final value to send to the grid, on completion of editing\r\n    //     getValue() {\r\n    //       // this simple editor doubles any value entered into the input\r\n    //       return value;\r\n    //     },\r\n    //   };\r\n    // });\r\n\r\n    const onChangeListener = useCallback(\r\n      (event) => {\r\n      //  setValue(event.target.value) \r\n        onValueChange(event.target.value);\r\n      },\r\n      []\r\n    );\r\n    \r\n   useEffect(() => refInput.current.focus(), []);\r\n\r\n       // let val = props.getValue();\r\n\r\n    return (\r\n      <select className=\"form-select\"\r\n        ref={refInput}\r\n        value={value}\r\n        onChange={onChangeListener}\r\n      >\r\n\r\n    <option key=\"0\" value=\"\">\r\n            --Select--\r\n          </option>\r\n        {\r\n        \r\n        options.map((item) => (\r\n          <option key={item.k} value={item.k}>\r\n            {item.v}\r\n          </option>\r\n        ))}\r\n\r\n      </select>\r\n    );\r\n  })\r\n);\r\n\r\nexport default GrComboBox;\r\n","import React, {\r\n  memo,\r\n  forwardRef,\r\n  useState,\r\n  useRef,\r\n  useImperativeHandle,\r\n  useCallback,\r\n  useEffect,\r\n} from \"react\";\r\n\r\nconst GrDateBox = memo(\r\n  forwardRef((props, ref) => {\r\n    const [value, setValue] = useState(props.value);\r\n    const refInput = useRef(null);\r\n\r\n    // Cell Editor interface, that the grid calls\r\n    useImperativeHandle(ref, () => {\r\n      return {\r\n        // the final value to send to the grid, on completion of editing\r\n        getValue() {\r\n          // this simple editor doubles any value entered into the input\r\n          return value;\r\n        },\r\n      };\r\n    });\r\n\r\n    const onChangeListener = useCallback(\r\n      (event) => setValue(event.target.value),\r\n      []\r\n    );\r\n    useEffect(() => refInput.current.focus(), []);\r\n\r\n    return (\r\n      <input\r\n        type=\"date\"\r\n        className=\"form-control\"\r\n        ref={refInput}\r\n        value={value}\r\n        onChange={onChangeListener}\r\n      />\r\n    );\r\n  })\r\n);\r\n\r\nexport default GrDateBox;\r\n","import React, {\r\n  memo,\r\n  forwardRef,\r\n  useState,\r\n  useRef,\r\n  useImperativeHandle,\r\n  useCallback,\r\n  useEffect,\r\n  useContext\r\n} from \"react\";\r\nimport appsettings from \"../../../../appsettings.json\";\r\nimport { FormContext } from \"../../Contexts/FormContext\";\r\nimport {\r\n  generateUUID,\r\n  compressBase64,\r\n  decompressBase64,\r\n} from \"../../../utilities/utils\";\r\n\r\nimport api from \"../../../api/Webcall\";\r\nimport ConfirmationModal from \"../../../htmlcomponents/ConfimationModal\";\r\n\r\nconst GrFile = memo(\r\n  forwardRef((props, ref) => {\r\n    debugger;\r\n\r\n    const { value, values, onValueChange } = props;\r\n    const { eDefHldr, watch, setdocField, getValues, setValue, trigger, setEventLoading, seteDefHldr , register } =\r\n      useContext(FormContext);\r\n\r\n    const apiendpoints = appsettings.ApiEndpoints;\r\n    \r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n\r\n    const refInput = useRef(null);\r\n\r\n    // Cell Editor interface, that the grid calls\r\n    // useImperativeHandle(ref, () => {\r\n\r\n    //   return {\r\n\r\n\r\n    //     // the final value to send to the grid, on completion of editing\r\n    //     getValue() {\r\n    //       // this simple editor doubles any value entered into the input\r\n    //       return value;\r\n    //     },\r\n    //   };\r\n    // });\r\n\r\n\r\n    // const onchangefile = useCallback(\r\n    //     (event) => {\r\n    //   prp.setValue(event.target.value)\r\n    // });\r\n\r\n    const onchagefile = async (event) => {\r\n      debugger;\r\n      if (event.target.files[0]) {\r\n        let docID = -1;\r\n\r\n        eDefHldr.qdet[\"eid\"] = eDefHldr.elms[props.colDef.field.replace(\"_v_\", \"\")].eid;\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append(\"_qdet\", JSON.stringify(eDefHldr.qdet));\r\n\r\n        formData.append(\"file\", event.target.files[0]);\r\n\r\n        for (var key of formData.entries()) {\r\n          console.log(key[0] + \", \" + key[1]);\r\n        }\r\n\r\n        //formData[\"_qdet\"] = JSON.stringify(eDefHldr.qdet);\r\n        //formData[\"file\"] =  event.target.files[0];\r\n\r\n\r\n        const data = formData;\r\n        const url = apiendpoints.FileUpload;\r\n\r\n        let response = await api.post(url, formData);\r\n\r\n        let strResponse = JSON.parse(decompressBase64(response.data));\r\n\r\n        if (strResponse.hdr.rst == \"SUCCESS\") {\r\n          docID = strResponse[\"body\"][\"docid\"];\r\n\r\n          // eDefHldr.fil = !eDefHldr.fil ? {} : eDefHldr.fil;\r\n          // eDefHldr.fil[fieldname] = new Array();\r\n          // eDefHldr.fil[fieldname][\"docid\"] = docID;\r\n\r\n          let docField = props.colDef.field.replace(\"_v_\", \"\")\r\n\r\n          let docdata = {};\r\n\r\n          // docdata[docField] = {};\r\n          docdata[\"id\"] = docID;\r\n          docdata[\"name\"] = event.target.files[0].name;\r\n          \r\n\r\n\r\n\r\n\r\n          return docdata;\r\n        }\r\n\r\n        //delete eDefHldr.qdet[\"eid\"];\r\n      }\r\n    };\r\n\r\n    const Setdocfield = (fieldname) => { \r\n      setdocField(fieldname);\r\n    };\r\n  \r\n\r\n\r\n    const onChangeListener = useCallback(\r\n      async (event) => {\r\n        //  setValue(event.target.value) \r\n        debugger;\r\n        // props.node.setDataValue(props.colDef.field , parseFloat(onchagefile(event)));\r\n        // props.setValue(parseFloat(onchagefile(event)));\r\n\r\n        let filedata = await onchagefile(event)\r\n\r\n        props.setValue(event.target.files);\r\n        \r\n        props.node.setDataValue(props.colDef.field.replace(\"_v_\", \"\"), filedata);\r\n\r\n\r\n      },\r\n      []\r\n    );\r\n\r\n    const deletedoc = (fieldname) => {\r\n      setShowConfirmation(true);\r\n    };\r\n  \r\n    const handleConfirmation = (confirmed) => {\r\n      setShowConfirmation(false);\r\n  \r\n      if (confirmed) {\r\n        props.node.setDataValue(props.colDef.field.replace(\"_v_\", \"\"), null);\r\n        props.setValue(null);\r\n        setValue(props.data._rid + '_' + props.colDef.field , null)\r\n      }\r\n      // If the user clicks \"Cancel\", nothing happens.\r\n    };\r\n\r\n    // useEffect(() => refInput.current.focus(), []);\r\n\r\n\r\n\r\n\r\n    // useEffect(() => refInput.current.focus(), []);\r\n    return (\r\n      <>\r\n        {/* <input\r\n        type=\"file\"\r\n        key={props.data._rid +'_' + props.colDef.field}\r\n        name={props.data._rid +'_' + props.colDef.field}\r\n        className=\"form-control\"\r\n        ref={refInput}\r\n       value={value}\r\n       onChange={onChangeListener}\r\n      /> */}\r\n\r\n\r\n        <div className={`col-12 input-group mb-3 `}>\r\n\r\n          <input\r\n            name={props.data._rid + '_' + props.colDef.field}\r\n            type=\"file\"\r\n            id={props.data._rid + '_' + props.colDef.field}\r\n            key={props.data._rid + '_' + props.colDef.field}\r\n            className=\"form-control d-none\"\r\n            // disabled={eDefHldr.stg.prp[fieldname].ro}\r\n            data-browse-on-zone-click=\"true\"\r\n            accept=\"image/*,.pdf\"\r\n            // style={{\r\n            //   color: eDefHldr.stg.prp[fieldname]?.flcr,\r\n            //   backgroundColor: eDefHldr.stg.prp[fieldname]?.bclr,\r\n            // }}\r\n            onChange={onChangeListener}\r\n            {...register(props.data._rid + '_' + props.colDef.field, {\r\n              value: value,\r\n              onChange: onChangeListener,\r\n            })}\r\n          ></input>\r\n\r\n          <button\r\n            className=\"browse btn btn-primary px-2\"\r\n            style={{ backgroundColor: \"#4154f1\" }}\r\n            type=\"button\"\r\n            onClick={() => document.getElementById(props.data._rid + '_' + props.colDef.field).click()}\r\n          >\r\n            <i className=\"bi bi-upload\"></i>\r\n          </button>\r\n\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control form-control\"\r\n            placeholder=\"Upload file\"\r\n            //  disabled={eDefHldr.stg.prp[fieldname].ro}\r\n            value={\r\n              value?.[0]?.name\r\n                ? value?.[0]?.name\r\n                : \"\"\r\n            }\r\n            readOnly\r\n          ></input>\r\n          {value?.[0]?.name && (\r\n            <>\r\n              <button\r\n                type=\"button\"\r\n                style={{ backgroundColor: \"#4154f1\" }}\r\n                className=\"browse btn btn-primary px-2\"\r\n                data-bs-toggle=\"modal\"\r\n                onClick={() => Setdocfield(props.data._rid + '_' + props.colDef.field)}\r\n                data-bs-target=\"#exampleModalScrollable\"\r\n              >\r\n                <i className=\"bi bi-eye\"></i>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"browse btn btn-danger px-2\"\r\n              onClick={() => deletedoc(props.data._rid + '_' + props.colDef.field)}\r\n              >\r\n                <i className=\"bi bi-trash\"></i>\r\n              </button>\r\n\r\n              \r\n\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n\r\n      {/* Reusable Confirmation Modal */}\r\n      <ConfirmationModal\r\n        show={showConfirmation}\r\n        onHide={() => handleConfirmation(false)}\r\n        onConfirm={() => handleConfirmation(true)}\r\n        message=\"Are you sure you want to delete the document?\"\r\n      />\r\n\r\n      </>\r\n    );\r\n  })\r\n);\r\n\r\nexport default GrFile;\r\n","import React from \"react\";\r\n\r\nexport default function GrHeader(props) {\r\n\r\n  const style = {\r\n    backgroundColor: \"#f8f8f8\",\r\n    borderColor: \"#babfc7 !important\"\r\n  };\r\n\r\n  // Dynamically add !important to borderColor\r\n  style.borderColor = \"#babfc7 !important\";\r\n\r\n\r\n  return (\r\n   \r\n    <div className=\"ag-header border\" style={style}>\r\n      <div className=\"col-8 ms-2 d-flex align-items-center fw-bold mb-2 mt-2\">\r\n        <div> {props.header}</div>\r\n      </div>\r\n      {props.ar && !props.ar.ro ? (\r\n        <div className=\"col-4 \" style={{backgroundColor: \"#f8f8f8\"}}>\r\n          <div className=\"d-flex justify-content-end\">\r\n              <i className=\"bi bi-plus me-2\" style={{ fontSize: \"25px\" , cursor: \"pointer\" }} onClick={props.add}></i>\r\n            \r\n              <i className=\"bi bi-trash me-2\" style={{ fontSize: \"25px\" , cursor: \"pointer\" }} onClick={props.remove}></i>\r\n        \r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, {\r\n  memo,\r\n  forwardRef,\r\n  useState,\r\n  useRef,\r\n  useImperativeHandle,\r\n  useCallback,\r\n  useEffect,\r\n} from \"react\";\r\n\r\nconst GrModal = memo(\r\n  forwardRef((props, ref) => {\r\n\r\n\r\n    \r\n  function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>\r\n      (\r\n        c ^\r\n        (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\r\n      ).toString(16)\r\n    );\r\n  }\r\n    debugger;\r\n    console.log(props);\r\n\r\n    const modaldata = {cap : props.colDef.cellRendererParams.cap, \r\n      fieldname : props.colDef.cellRendererParams.fieldname , \r\n      elementdefs : props.colDef.cellRendererParams.elementdefs,\r\n      stagelementdata : props.colDef.cellRendererParams.stagelementdata  }\r\n  \r\n\r\n\r\n    const [value, setValue] = useState(props.value);\r\n    const refInput = useRef(null);\r\n\r\n    // Cell Editor interface, that the grid calls\r\n    useImperativeHandle(ref, () => {\r\n      return {\r\n        // the final value to send to the grid, on completion of editing\r\n        getValue() {\r\n          // this simple editor doubles any value entered into the input\r\n          return value;\r\n        },\r\n      };\r\n    });\r\n\r\n    const onChangeListener = useCallback(\r\n      (event) => setValue(event.target.value),\r\n      []\r\n    );\r\n\r\n    function btnClickedHandler() {\r\n     \r\n        const field = modaldata.fieldname;\r\n        props.clicked({...props.data, field});\r\n        \r\n       }\r\n\r\n    //   useEffect(() => refInput.current.focus(), []);\r\n\r\n    // let val = props.getValue();\r\n\r\n    return (\r\n      <>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          data-bs-toggle=\"modal\"\r\n          data-bs-target={\"#\" + modaldata.fieldname}\r\n          onClick={btnClickedHandler}\r\n          key={uuidv4()}\r\n          name={modaldata.fieldname}\r\n        > \r\n         {modaldata.cap ? modaldata.cap : modaldata.fieldname}\r\n        </button>\r\n      </>\r\n    );\r\n  })\r\n);\r\n\r\nexport default GrModal;\r\n","import React, {\r\n    memo,\r\n    forwardRef,\r\n    useState,\r\n    useRef,\r\n    useImperativeHandle,\r\n    useCallback,\r\n    useEffect,\r\n  } from \"react\";\r\n  \r\n  const GrNumericBox = memo(\r\n    forwardRef((props, ref) => {\r\n       \r\n      const { value ,  values , onValueChange} = props;\r\n\r\n    //  const [value, setValue] = useState(props.value);\r\n      const refInput = useRef(null);\r\n  \r\n      // // Cell Editor interface, that the grid calls\r\n      // useImperativeHandle(ref, () => {\r\n      //   console.log(\"useImperativeHandle\");\r\n\r\n      //   debugger;\r\n      //   return {\r\n\r\n      //     // the final value to send to the grid, on completion of editing\r\n      //     getValue() {\r\n      //       // this simple editor doubles any value entered into the input\r\n\r\n      //       console.log(\"ag grid cell valuue is\" , value);\r\n      //       return value;\r\n      //     },\r\n      //   };\r\n      // });\r\n\r\n      debugger;\r\n  \r\n      const onChangeListener = useCallback(\r\n        (event) => {\r\n          //  setValue(event.target.value) \r\n          debugger;\r\n            onValueChange(parseFloat(event.target.value));\r\n          },\r\n        []\r\n      );\r\n      useEffect(() => refInput.current.focus(), []);\r\n  \r\n      return (\r\n        <input\r\n          type=\"Number\"\r\n          key={props.data._rid +'_' + props.colDef.field}\r\n          className=\"form-control\"\r\n          ref={refInput}\r\n          value={value}\r\n          onChange={onChangeListener}\r\n        />\r\n      );\r\n    })\r\n  );\r\n  \r\n\r\n  export default GrNumericBox;\r\n  ","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { FormContext } from \"../../Contexts/FormContext\";\r\nimport RenderUI from \"../../RenderUI\";\r\nimport {\r\n  Setup,\r\n  ServerEventCaller,\r\n  GridEventCaller,\r\n  GridChildEventCaller,\r\n  GridChildEventCallerOnSave,\r\n} from \"../../BusinessLogics/EventHandler\";\r\n\r\nconst GrPopupForm = ({\r\n  eid,\r\n  fieldname,\r\n  cap,\r\n  col,\r\n  mn,\r\n  ev,\r\n  val,\r\n  mxLen,\r\n  defs,\r\n  elementdefs,\r\n  stagelementdata,\r\n  parentfieldanme,\r\n  childUI,\r\n  modaldata,\r\n  setModalData,\r\n  eDefHldr,\r\n  cntrData\r\n}) => {\r\n  const { register, elements, stageGridRefs } = useContext(FormContext);\r\n  const { setValue, getValues } = useContext(FormContext);\r\n\r\n  const FormContextdata = {\r\n    getValues: getValues,\r\n    stageGridRefs: stageGridRefs,\r\n    stageElements: stagelementdata,\r\n    cntrData: cntrData,\r\n  };\r\n\r\n  // const [Childelements, setChildElements] = useState([]);\r\n\r\n  const  SaveFormData = async () => {\r\n    debugger;\r\n    const rowNode = stageGridRefs[parentfieldanme].current.api.getRowNode(\r\n      modaldata._rid\r\n    );\r\n\r\n    const data = {};\r\n\r\n    // Iterate through the object\r\n    for (const key in stagelementdata.elms[parentfieldanme].child[fieldname]\r\n      .child) {\r\n      if (stagelementdata.elms[parentfieldanme].child[fieldname]) {\r\n        data[key] = getValues(key);\r\n      }\r\n    }\r\n\r\n    await rowNode.setDataValue(fieldname, data);\r\n\r\n    const popupFormOnSaveEv = stagelementdata?.sev?.[modaldata.field]?.ev?.pupfsave;\r\n\r\n    if (popupFormOnSaveEv) {\r\n     await GridChildEventCallerOnSave(\r\n        eDefHldr,\r\n        \"\",\r\n        popupFormOnSaveEv,\r\n        stageGridRefs,\r\n        setValue,\r\n        parentfieldanme,\r\n        FormContextdata,\r\n        modaldata._rid,\r\n        modaldata.field,\r\n        rowNode\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    debugger;\r\n\r\n    if (modaldata && modaldata._rid) {\r\n      const rowNode = stageGridRefs[parentfieldanme].current.api.getRowNode(\r\n        modaldata._rid\r\n      );\r\n\r\n      // Iterate through the object\r\n      for (const key in stagelementdata.elms[parentfieldanme].child[fieldname]\r\n        .child) {\r\n        if (rowNode.data[fieldname]) {\r\n          rowNode.data[fieldname][key] &&\r\n            setValue(key, rowNode.data[fieldname][key]);\r\n        } else {\r\n          setValue(key, null);\r\n        }\r\n      }\r\n    }\r\n  }, [modaldata]);\r\n\r\n  const ResetData = () => {\r\n    for (const key in stagelementdata.elms[parentfieldanme].child[fieldname]\r\n      .child) {\r\n      setValue(key, null);\r\n      setModalData(null);\r\n    }\r\n  };\r\n\r\n  let controlsdata = elementdefs;\r\n\r\n  let popelementsdata = defs;\r\n\r\n  let stageElements = stagelementdata;\r\n\r\n  const elementarraydata = [];\r\n\r\n  for (var element in popelementsdata.child) {\r\n    controlsdata[element][\"val\"] = controlsdata[element][\"val\"]\r\n      ? controlsdata[element][\"val\"]\r\n      : \"\";\r\n    elementarraydata.push({\r\n      fieldname: element,\r\n      elementdata: controlsdata[element],\r\n    });\r\n  }\r\n\r\n  const stageElementarraydata = [];\r\n\r\n  for (var element in popelementsdata.child) {\r\n    stageElementarraydata.push({\r\n      fieldname: element,\r\n      elementdata: popelementsdata.child[element],\r\n    });\r\n  }\r\n\r\n  let stgelts = {};\r\n\r\n  stageElementarraydata.map(\r\n    (item) => (\r\n      (stgelts = !{\r\n        ...elementarraydata.find((e) => e.fieldname == item.fieldname),\r\n      }\r\n        ? {}\r\n        : { ...elementarraydata.find((e) => e.fieldname == item.fieldname) }),\r\n      (item.elementdata = {\r\n        ...stgelts.elementdata,\r\n        ...item.elementdata,\r\n      })\r\n    )\r\n  );\r\n\r\n  const Childelements = [...stageElementarraydata];\r\n\r\n  /* Check if child is direct Grid Control */\r\n  if (popelementsdata.ty == \"10\") {\r\n    delete Childelements[0].elementdata.child;\r\n\r\n    Childelements[0].elementdata[\"child\"] =\r\n      stagelementdata.elms[parentfieldanme].child[fieldname].child;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {Childelements ? (\r\n        <div>\r\n          <div\r\n            className=\"modal fade\"\r\n            id={fieldname}\r\n            data-bs-backdrop=\"static\"\r\n            data-bs-keyboard=\"false\"\r\n            tabIndex=\"-1\"\r\n            aria-labelledby=\"staticBackdropLabel\"\r\n            aria-hidden=\"true\"\r\n          >\r\n            <div className=\"modal-dialog\">\r\n              <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                  <h5 className=\"modal-title\" id=\"staticBackdropLabel\">\r\n                    {cap}\r\n                  </h5>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn-close\"\r\n                    data-bs-dismiss=\"modal\"\r\n                    aria-label=\"Close\"\r\n                  ></button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                  {/* {Childelements.map((item) => (\r\n               \r\n                <OneScreenGridModal\r\n                  dataprops={item.elementdata}\r\n                  key={item.fieldname}\r\n                  fieldname={item.fieldname}\r\n                  stagelementdata={stageElements}\r\n                  elementdefs={controlsdata}               \r\n                />))\r\n              \r\n              \r\n              }  */}\r\n\r\n                  <RenderUI\r\n                    data={childUI}\r\n                    elements={elements}\r\n                    stageElements={stageElements}\r\n                    cntrData={controlsdata}\r\n                    rid={modaldata && modaldata._rid}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secondary\"\r\n                    data-bs-dismiss=\"modal\"\r\n                    onClick={ResetData}\r\n                  >\r\n                    Close\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    data-bs-dismiss=\"modal\"\r\n                    onClick={SaveFormData}\r\n                  >\r\n                    Save\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <> </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GrPopupForm;\r\n","import React from 'react'\r\n\r\nconst Label = ({ eid , fieldname , cap}) => {\r\n  return (\r\n    <div id= {eid} >{cap} : Label</div>\r\n  )\r\n}\r\n\r\nexport default Label","import React, { useContext } from \"react\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport { GetAge } from \"../BusinessLogics/EventHandler\";\r\n\r\nconst MultiLineTextBox = ({ eid, fieldname, cap, col, mn, ev, val, mxLen }) => {\r\n  const { handleOnChange } = useContext(FormContext);\r\n  const { register , formState: { errors } } = useContext(FormContext);\r\n  const { setValue, getValues, eDefHldr, stageGridRefs, watch, trigger , setEventLoading } = useContext(FormContext);\r\n\r\n  return (\r\n    <div className={`${col} mb-3`}>\r\n      <label\r\n        htmlFor={fieldname}\r\n        className={`${mn ? \"required\" : \"\"} form-label`}\r\n      >\r\n        {cap}\r\n      </label>\r\n      <textarea\r\n        aria-invalid={errors[fieldname] ? \"true\" : \"false\"}\r\n        className=\"form-control\"\r\n        disabled = {eDefHldr.stg.prp[fieldname].ro}\r\n        {...register(fieldname, {\r\n          required: mn,\r\n          maxLength: { mxLen, message: \" is required\" },\r\n          value: val          \r\n        })}\r\n        // {...register(fieldname, { required: true })}\r\n\r\n        // id={fieldname}\r\n        // value={val}\r\n        // onChange={event=> handleOnChange(eid, event)}\r\n        //onChange={setValue(\"ntxt_Age\", \"30\")}\r\n      />\r\n\r\n         {/* use role=\"alert\" to announce the error message */}\r\n        \r\n         {errors[fieldname] && errors[fieldname].type == \"required\" && (\r\n          \r\n        <span role=\"alert\">This is required</span>\r\n      )}\r\n      {errors[fieldname] && errors[fieldname].type == \"maxLength\" && (\r\n        <span role=\"alert\">Max length exceeded</span>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultiLineTextBox;\r\n\r\n\r\n\r\n","import React, { useContext, useState, useRef, useEffect } from \"react\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport { EventCaller, ServerEventCaller, GridEventCaller } from \"../BusinessLogics/EventHandler\";\r\nimport { pushAll } from \"@amcharts/amcharts5/.internal/core/util/Array\";\r\n\r\n\r\nconst NumericBox = ({ eid, fieldname, cap, col, mn, ev, val, mxLen, rid }) => {\r\n\r\n  const { register, formState: { errors }, seteDefHldr } = useContext(FormContext);\r\n  const { setValue, getValues, eDefHldr, stageGridRefs, watch, trigger, stageElements, cntrData, combodata,\r\n    setComboData, setEventLoading, modalVisible,\r\n    setModalVisible, multiSearchData,\r\n    setMultiSearchData, currentGridRowData } = useContext(FormContext);\r\n  const eDefHldrRef = useRef(eDefHldr);\r\n  const FormContextdata = {\r\n    getValues: getValues,\r\n    stageGridRefs: stageGridRefs,\r\n    stageElements: stageElements,\r\n    cntrData: cntrData,\r\n    combodata,\r\n    setComboData,\r\n    setEventLoading,\r\n    modalVisible,\r\n    setModalVisible,\r\n    multiSearchData,\r\n    setMultiSearchData,\r\n    eDefHldr: eDefHldrRef.current\r\n  };\r\n\r\n  const handleWheel = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n\r\n  const [formData, setFormData] = useState({});\r\n\r\n  let clientevent = {}\r\n  if (ev) {\r\n    clientevent = eDefHldr.stg.cev[fieldname].ev.change;\r\n  }\r\n  useEffect(() => {\r\n    eDefHldrRef.current = eDefHldr; // Keep ref updated with latest state\r\n  }, [eDefHldr]);\r\n  useEffect(() => {\r\n    if (clientevent) {\r\n      eval(clientevent);\r\n    }\r\n  }, [watch(fieldname)]);\r\n  /* This function will return if the grid name based on the grid child control , so based on this it will decided whether to call grid event */\r\n  function findParent(elementName, elements) {\r\n    // Loop through each element in the given structure\r\n    for (let [key, value] of Object.entries(elements)) {\r\n      // If the current key matches the element name, return null (no parent)\r\n      if (key === elementName) {\r\n        return null; // root element, no parent\r\n      }\r\n\r\n      // If the current element has a \"child\" object, recurse into it\r\n      if (value.child) {\r\n        // Check if the element is found within the children\r\n        if (elementName in value.child) {\r\n          return key; // Return the parent key\r\n        }\r\n\r\n        // Recurse into the child object to keep searching for the element\r\n        const parent = findParent(elementName, value.child);\r\n        if (parent) {\r\n          return parent; // If found in recursion, return the parent\r\n        }\r\n      }\r\n    }\r\n\r\n    return null; // If no parent is found\r\n  }\r\n  /* store previous value to avoid event fire when tabout */\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prevState => ({ ...prevState, [name]: value }));\r\n  };\r\n  return (\r\n    <div className={`${col} mb-3`}>\r\n      <label\r\n        htmlFor={fieldname}\r\n        className={`${mn ? \"required\" : \"\"} form-label`}\r\n      >\r\n        {cap}\r\n      </label>\r\n      <input\r\n        name={fieldname}\r\n        type=\"number\"\r\n        step=\"any\"\r\n        className=\"form-control\"\r\n        onWheel={handleWheel}\r\n        onKeyDown={handleKeyDown}\r\n        disabled={eDefHldr.stg.prp[fieldname].ro}\r\n        {...register(fieldname, {\r\n          required: mn,\r\n          maxLength: { mxLen, message: \" is required\" },\r\n          value: val == \"\" ? 0 : val,\r\n          onBlur: async (e) => {\r\n            if (eDefHldr.stg.sev[fieldname]) {\r\n              const currentValues = watch(fieldname);\r\n              const previousValue = formData[fieldname];\r\n              if (previousValue !== currentValues) {\r\n                let gridname = findParent(fieldname, eDefHldr.stg.elms)\r\n                if (gridname) {\r\n                  let _rid = currentGridRowData[gridname]._rid\r\n                  await GridEventCaller(\r\n                    eDefHldr, // Use the ref to get the latest value\r\n                    \"\",\r\n                    eDefHldr.stg.sev[fieldname].ev.change,\r\n                    stageGridRefs,\r\n                    setValue,\r\n                    gridname,\r\n                    FormContextdata,\r\n                    _rid,\r\n                    null,\r\n                    null,\r\n                    seteDefHldr\r\n                  );\r\n                }\r\n                else {\r\n                  await ServerEventCaller(\r\n                    eDefHldr,\r\n                    getValues(),\r\n                    eDefHldr.stg.sev[fieldname].ev.change,\r\n                    stageGridRefs,\r\n                    setValue,\r\n                    FormContextdata, seteDefHldr\r\n                  )\r\n\r\n                }\r\n              }\r\n            }\r\n\r\n\r\n\r\n\r\n            handleChange(e)\r\n\r\n          }\r\n        })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumericBox;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport OneScreen from \"../OneScreen\";\r\nimport OneScreenGridModal from \"../OneScreenGridModal\";\r\nimport RenderUI from \"../RenderUI\";\r\n \r\n\r\nconst PopupForm = ({ eid, fieldname, cap, col, mn, ev, val, mxLen, defs , elementdefs, stagelementdata , parentfieldanme, childUI}) => {\r\n  debugger;\r\n  const { register , elements } = useContext(FormContext);\r\n  const { setValue } = useContext(FormContext);\r\n\r\n // const [Childelements, setChildElements] = useState([]);\r\n\r\n\r\n  let controlsdata = elementdefs;\r\n\r\n  let popelementsdata = defs \r\n\r\n    let stageElements = stagelementdata\r\n\r\n    const elementarraydata = [];\r\n\r\n    for (var element in popelementsdata.child) {\r\n      controlsdata[element][\"val\"] = controlsdata[element][\"val\"]\r\n        ? controlsdata[element][\"val\"]\r\n        : \"\";\r\n      elementarraydata.push({\r\n        fieldname: element,\r\n        elementdata: controlsdata[element],\r\n      });\r\n    }\r\n\r\n    const stageElementarraydata = [];\r\n\r\n    for (var element in popelementsdata.child) {\r\n      stageElementarraydata.push({\r\n        fieldname: element,\r\n        elementdata: popelementsdata.child[element],\r\n      });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    let stgelts = {};\r\n\r\n\r\n    stageElementarraydata.map(\r\n      (item) =>\r\n      \r\n        ( stgelts =  !{...elementarraydata.find((e) => e.fieldname == item.fieldname)} ? {} : {...elementarraydata.find((e) => e.fieldname == item.fieldname)} , \r\n          \r\n          item.elementdata = {\r\n            ...stgelts.elementdata,\r\n          ...item.elementdata,\r\n        })\r\n\r\n    );\r\n\r\n   const  Childelements = [...stageElementarraydata] ;\r\n\r\n\r\n   \r\n    /* Check if child is direct Grid Control */\r\n    if(popelementsdata.ty == \"10\"){\r\n\r\n\r\n      delete Childelements[0].elementdata.child\r\n\r\n\r\n      Childelements[0].elementdata[\"child\"] = stagelementdata.elms[parentfieldanme].child[fieldname].child\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      {Childelements ? \r\n      <div>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-primary\"\r\n        data-bs-toggle=\"modal\"\r\n        data-bs-target={\"#\" + fieldname}\r\n      >\r\n        {cap}\r\n      </button>\r\n\r\n      <div\r\n        className=\"modal fade\"\r\n        id={fieldname}\r\n        data-bs-backdrop=\"static\"\r\n        data-bs-keyboard=\"false\"\r\n        tabIndex=\"-1\"\r\n        aria-labelledby=\"staticBackdropLabel\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <div className=\"modal-dialog modal-xl\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\" id=\"staticBackdropLabel\">\r\n                {cap}\r\n              </h5>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close\"\r\n                data-bs-dismiss=\"modal\"\r\n                aria-label=\"Close\"\r\n              ></button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n\r\n              {/* {Childelements.map((item) => (\r\n               \r\n                <OneScreenGridModal\r\n                  dataprops={item.elementdata}\r\n                  key={item.fieldname}\r\n                  fieldname={item.fieldname}\r\n                  stagelementdata={stageElements}\r\n                  elementdefs={controlsdata}               \r\n                />))\r\n              \r\n              \r\n              }  */}\r\n\r\n                <RenderUI\r\n                    data={childUI}\r\n                    elements={elements}\r\n                    stageElements={stageElements}\r\n                    cntrData={controlsdata}\r\n                    key={\"POPup_1\"}\r\n                  />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-bs-dismiss=\"modal\"\r\n              >\r\n                Close\r\n              </button>\r\n              {/* <button type=\"button\" className=\"btn btn-primary\">\r\n                Save\r\n              </button> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div> \r\n      </div>: <> </> }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PopupForm;\r\n","import React from 'react'\r\n\r\nconst RadioButton = ({ eid , fieldname , cap}) => {\r\n  return (\r\n    <div className=\"mb-3\">\r\n    <label htmlFor={fieldname} className=\"form-label\">{cap}</label>\r\n    <input name={fieldname}  type=\"radio\"  className=\"form-control\" id={eid} />\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default RadioButton","import React, { useContext, useState } from \"react\";\r\nimport { FormContext } from \"../Contexts/FormContext\";\r\nimport { EventCaller, ServerEventCaller , GridEventCaller } from \"../BusinessLogics/EventHandler\";\r\n\r\nconst TextBox = ({ eid, fieldname, cap, col, mn, ev, val, mxLen, rid }) => {\r\n  const {\r\n    register,\r\n    seteDefHldr,\r\n    formState: { errors },\r\n  } = useContext(FormContext);\r\n  const {\r\n    setValue,\r\n    getValues,\r\n    eDefHldr,\r\n    stageGridRefs,\r\n    watch,\r\n    trigger,\r\n    stageElements,\r\n    cntrData,\r\n    combodata,\r\n    setComboData,\r\n    setEventLoading,\r\n    modalVisible,\r\n    setModalVisible,\r\n    multiSearchData,\r\n    setMultiSearchData,\r\n    currentGridRowData\r\n  } = useContext(FormContext);\r\n\r\n  const FormContextdata = {\r\n    getValues: getValues,\r\n    stageGridRefs: stageGridRefs,\r\n    stageElements: stageElements,\r\n    cntrData: cntrData,\r\n    combodata,\r\n    setComboData,\r\n    setEventLoading,\r\n    modalVisible,\r\n    setModalVisible,\r\n    multiSearchData,\r\n    setMultiSearchData,\r\n    eDefHldr\r\n  };\r\n\r\n  const [formData, setFormData] = useState({});\r\n\r\n  let clientevent = {};\r\n  if (ev & (ev != \"\")) {\r\n    clientevent = JSON.parse(ev.change);\r\n  }\r\n\r\n  /* This function will return if the grid name based on the grid child control , so based on this it will decided whether to call grid event */\r\n  function findParent(elementName, elements) {\r\n    // Loop through each element in the given structure\r\n    for (let [key, value] of Object.entries(elements)) {\r\n      // If the current key matches the element name, return null (no parent)\r\n      if (key === elementName) {\r\n        return null; // root element, no parent\r\n      }\r\n\r\n      // If the current element has a \"child\" object, recurse into it\r\n      if (value.child) {\r\n        // Check if the element is found within the children\r\n        if (elementName in value.child) {\r\n          return key; // Return the parent key\r\n        }\r\n\r\n        // Recurse into the child object to keep searching for the element\r\n        const parent = findParent(elementName, value.child);\r\n        if (parent) {\r\n          return parent; // If found in recursion, return the parent\r\n        }\r\n      }\r\n    }\r\n\r\n    return null; // If no parent is found\r\n  }\r\n\r\n\r\n  /* store previous value to avoid event fire when tabout */\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <div className={`${col}  ${eDefHldr.stg.prp[fieldname]?.disp == false ? \"d-none\" : \"\"}`}>\r\n      <label\r\n        htmlFor={fieldname}\r\n        className={`${mn ? \"required\" : \"\"} form-label`}\r\n      >\r\n        {cap}\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        aria-invalid={errors[fieldname] ? \"true\" : \"false\"}\r\n        id={fieldname}\r\n        disabled={eDefHldr.stg.prp[fieldname].ro}\r\n        className=\"form-control\"\r\n        style={{\r\n          color: eDefHldr.stg.prp[fieldname]?.flcr,\r\n          backgroundColor: eDefHldr.stg.prp[fieldname]?.bclr,\r\n        }}\r\n        {...register(fieldname, {\r\n          required: mn,\r\n          maxLength: { mxLen, message: \" is required\" },\r\n          value: val,\r\n\r\n          onBlur: (e) => {\r\n            if (clientevent.fn) {\r\n              EventCaller(\r\n                clientevent.fn,\r\n                fieldname,\r\n                clientevent.outel,\r\n                getValues,\r\n                setValue\r\n              );\r\n            }\r\n            if (eDefHldr.stg.sev[fieldname]) {\r\n              const currentValues = watch(fieldname);\r\n\r\n              const previousValue = formData[fieldname];\r\n\r\n              if (previousValue !== currentValues) {\r\n\r\n\r\n                let gridname = findParent(fieldname, eDefHldr.stg.elms)\r\n\r\n                if (gridname) {\r\n                  let _rid = currentGridRowData[gridname]._rid\r\n                  GridEventCaller(\r\n                    eDefHldr, // Use the ref to get the latest value\r\n                    \"\",\r\n                    eDefHldr.stg.sev[fieldname].ev.change,\r\n                    stageGridRefs,\r\n                    setValue,\r\n                    gridname,\r\n                    FormContextdata,\r\n                    _rid,\r\n                    null,\r\n                    null,\r\n                    seteDefHldr\r\n                  );\r\n\r\n                }\r\n                else {\r\n\r\n                  ServerEventCaller(\r\n                    eDefHldr,\r\n                    getValues(),\r\n                    eDefHldr.stg.sev[fieldname].ev.change,\r\n                    stageGridRefs,\r\n                    setValue,\r\n                    FormContextdata, seteDefHldr\r\n                  );\r\n\r\n                }\r\n\r\n\r\n                handleChange(e);\r\n              }\r\n            }\r\n          },\r\n        })}\r\n      />\r\n\r\n      {/* use role=\"alert\" to announce the error message */}\r\n\r\n      {errors[fieldname] && errors[fieldname].type == \"required\" && (\r\n        <span role=\"alert\" style={{ color: \"red\", fontSize: \"12px\" }}>\r\n          This field is required\r\n        </span>\r\n      )}\r\n      {errors[fieldname] && errors[fieldname].type == \"maxLength\" && (\r\n        <span role=\"alert\" style={{ color: \"red\", fontSize: \"12px\" }}>\r\n          Max length exceeded\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default TextBox;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm, message }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Confirmation</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{message}</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={onHide}>\r\n          Cancel\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={onConfirm}>\r\n          Delete\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import { generateUUID } from \"./utils\";\r\n\r\nexport function getPostData(tag, frmData, adTag, adData){\r\n\r\n    var frmHdr = {};\r\n    frmHdr[\"convid\"] = generateUUID();\r\n    frmHdr[\"tag\"] = tag;\r\n    frmHdr[\"orgid\"] = \"\"\r\n    frmHdr[\"vendid\"] = \"0\"\r\n\r\n    var data = {};\r\n    data[\"hdr\"] = frmHdr;\r\n    data[\"body\"] = frmData;\r\n    if (adData) {\r\n        data[adTag] = adData;\r\n    }\r\n\r\n    return data;\r\n\r\n}"],"names":["context","reloadCombo","async","srcElementname","setValuepar","getValues","setValue","setConmddata","elements","cmbelementdata","find","e","fieldname","elementdata","opt","cod","regex","found","con","match","val","replace","toLocaleUpperCase","ctr","cstr","optw","comcombres","FetchCombodata","finalcmbData","body","length","console","log","extractFilename","fileText","fileId","fileName","split","Setup","convertDate","dateObj","getFullYear","getMonth","slice","getDate","EventCaller","funcname","fnName","ctx","args","Array","prototype","call","arguments","apply","execFn","ServerEventCaller","eDefHldr","frmData","v","stageGridRefs","FormContext","seteDefHldr","setEventLoading","evntDet","griddata","key","FormDataHelper","ProcessStageGridData","JSON","stringify","ProcessStageelementsData","stageElements","elms","fil","hasOwnProperty","name","qdet","data","getPostData","endpoints","appsettings","result","api","post","ServerEvent","compressBase64","strResponse","parse","decompressBase64","status","hdr","rst","neweDefHldr","forEach","element","elm","cmddata","combodata","setComboData","setMultiSearchData","setModalVisible","requestAnimationFrame","_FormContext$cntrData","_FormContext$cntrData2","_FormContext$cntrData3","_prp","item","index","fieldKey","Object","keys","stg","prp","gridKey","gridData","newdata","map","_IsDel","allRowNodes","current","forEachNode","node","push","applyTransaction","remove","add","autoSizeAllColumns","cntrData","ty","dateValue","Date","formattedDate","_extractFilename","_extractFilename2","filedetails","id","mode","shouldValidate","_FormContext$cntrData4","_FormContext$cntrData5","_extractFilename3","_extractFilename4","fdr","toast","error","rstmsg","ex","MultiSearchServerEventCaller","selectedRowData","_FormContext$cntrData6","_FormContext$cntrData7","_FormContext$cntrData8","_extractFilename5","_extractFilename6","_FormContext$cntrData9","_FormContext$cntrData10","_extractFilename7","_extractFilename8","GridEventCaller","gridName","rowId","popupField","rownode","rowData","rowid","row","_rid","update","columnApi","transformedData","setRowData","GridChildEventCaller","child","GridChildEventCallerOnSave","setDataValue","path","qdata","processPopupformData","_getValues","k","elmsData","_cntrData$k","_eDefHldr$elmsData$k","parentNode","popupformData","childKey","childData","assign","createContext","_ref","localUrl","postUrl","imageUrls","setImageUrls","useState","currentImageIndex","setCurrentImageIndex","zoom","setZoom","imgRef","useRef","useEffect","loadLocalImage","_jsxs","children","_jsx","className","onClick","handleZoomIn","handleZoomOut","style","display","justifyContent","src","ref","width","url","filename","a","document","createElement","href","download","click","URL","revokeObjectURL","FaDownload","pdfjs","workerSrc","numPages","setNumPages","scale","setScale","pageNumber","setPageNumber","handlePageChange","newPageNumber","FaSearchPlus","FaSearchMinus","disabled","Document","file","onLoadSuccess","Page","filetype","extension","toString","pop","ImageViewer","PdfViewer","OtherViewer","AccessDenied","_Fragment","adimg","alt","TimelineData","formatDate","datetimeString","date","toLocaleDateString","undefined","year","month","day","toLocaleTimeString","hour","minute","hour12","MovementTime","StageFrom","StageTo","UserComment","RoleName","UserName","Sidepanel","props","scrid","qid","register","actionHighlight","formState","errors","useContext","setTimeLineData","convid","generateUUID","tag","orgid","vendid","Qmvhist","response","_strResponse$body","qremark","getTimelineData","options","role","cursor","value","rows","Timeline","watch","trigger","modalVisible","multiSearchData","FormContextdata","gridApi","setGridApi","gridColumnApi","setGridColumnApi","setrowData","columnDefs","setcolumnDefs","handleClose","colDefs","field","headerName","filter","filterParams","buttons","Modal","show","onHide","size","Header","closeButton","Title","Body","height","AgGridReact","rowSelection","onGridReady","params","pagination","paginationPageSize","Footer","Button","variant","handleSelect","selectedRow","getSelectedRows","selectmethod","_watch3","stgid","formKey","navigate","useNavigate","setactionHighlight","formkey","setFormKey","isLoading","setLoanding","loadsuccess","setLoadStatus","formmethods","useForm","setstageElements","setStageGridRefs","setElements","setControlsdata","searchParams","setSearchParams","useSearchParams","docField","setdocField","gridList","setstageGridList","isFormValid","setFormValid","docURL","setDocURL","formLoad","setIsFormLoad","isEventLoading","currentGridRowData","setcurrentGridRowData","qdets","setqdet","ver","get","handleSubmit","reset","isValid","isDirty","isSubmitting","isSubmitted","submitCount","toggleActions","getElementById","classList","toggle","onSubmit","useCallback","edata","event","_eDefHldr$stg$sev","_eDefHldr$stg$sev$Scr","_eDefHldr$stg$sev$Scr2","_eDefHldr$stg$sev2","_eDefHldr$stg$sev2$Sc","_eDefHldr$stg$sev2$Sc2","_eDefHldr$stg$sev3","_eDefHldr$stg$sev3$Sc","_eDefHldr$stg$sev3$Sc2","preventDefault","starttime","Qmovement","_cmbAction","_txtComment","_StartTime","toISOString","sev","Screen","ev","beforesubmit","aftersubmit","stagemove","SubmitQ","success","Fetchdocurl","_watch2","_file3","_file4","_eDefHldr$elmsData","_eDefHldr$elmsData$fi","type","Blob","docdetails","getFileDetails","createObjectURL","docurl","dwnld","docId","responseType","fetchDocURL","_watch","_file","_file2","now","OpenQ","CreateQ","rstcode","controlsdata","qDet","elementarraydata","_gridData","values","grdrow","_controlsdata$key","_strResponse$body$elm","_strResponse$body$elm2","_strResponse$body$elm3","docvalue","pid","eid","findChildElementByPid","stageElementarraydata","json","prop","obj","compComb","dmdComb","dmdCombobj","comboelementdata","updateEmptyChildObjects","entries","cmbReq","cmb","qry","qryCmbList","FetchQryCombodata","depQryCmbList","depCmbReq","depQryCmbLstItems","pattern","_strResponse$body$elm4","dmdcomcombres","_dmdresponse$body$dat","dmdresponse","finaldmdCmbData","stagegridrefs","stageGridList","checkAndInitialize","parentKey","fullKey","isReady","loadScreen","every","onFormLoad","method","ErrorFallback","resetErrorBoundary","React","autoClose","ErrorBoundary","FallbackComponent","Spinner","Provider","LoadinLine","onKeyDown","checkKeyDown","position","top","zIndex","scrname","stgname","SaveQ","onSave","window","confirm","CancelQ","onCancel","RenderUI","ui","MultiSearchControl","tabIndex","DocViewer","LoadScreen","screenParam","setScreenParam","S4","Math","random","substring","guidGenerator","RenderScreen","chartRef","elmtData","root","am5","new","setThemes","am5themes_Animated","chart","container","am5percent","layout","verticalHorizontal","series","valueField","categoryField","setAll","appear","centerX","x","horizontalLayout","dataItems","dispose","_eDefHldr$stg$prp$fie","cap","col","mn","mxLen","rid","dv","htmlContent","setHtmlContent","formValues","setFormValues","replacements","setreplacements","componentMap","PieChart","renderPlaceholders","fieldName","formater","_eDefHldr$elms$fieldN","_eDefHldr$elms$fieldN2","processImagePlaceholder","_eDefHldr$elmsData2","parseFloat","toLocaleString","_eDefHldr$elmsData3","_fieldValue","_fieldValue$","fieldValue","_eDefHldr$elmsData4","subscription","content","placeholderRegex","replacement_s","exec","RegExp","replacePlaceholders","_","expressionText","Function","evaluateExpressions","processContent","unsubscribe","disp","html","domNode","_eDefHldr$elmsData5","Component","attribs","domToReact","defs","_eDefHldr$stg$prp$def","eDefHldrRef","combodataref","modalRef","FormContextdataRef","setColumnApi","formgriddata","setformgriddata","coldef","cntrlsdata","stagelementdata","parentfieldanme","UI","findElementById","arr","isArray","foundChild","tabcontent","GrNumericBox","GrComboBox","GrDateBox","GrFile","GrButton","GrModal","GrCheckbox","colDef","childUI","hide","filteredRows","successCallback","applyIsDelFilter","setFilterModel","filterType","hidecolumns","clmapi","getColumnDefs","cls","setColumnVisible","openModal","modalElement","backdrop","keyboard","gridcolumns","watchedFields","rowNode","getRowNode","_combodataref$current","_combodataref$current2","updatedRow","addItems","transactionResult","c","crypto","getRandomValues","Uint8Array","addIndex","_defs$stagelementdata4","_defs$stagelementdata5","_defs$stagelementdata6","_defs$stagelementdata7","rowAddEvent","rowadd","r","currentgridRow","rowdata","onRemoveSelected","updatedRows","gridOptions","onCellValueChanged","_defs$stagelementdata8","_defs$stagelementdata9","_defs$stagelementdata10","t","column","colId","change","sizeColumnsToFit","onFirstDataRendered","defaultcoldefs","useMemo","singleClickEdit","editable","resizable","suppressColumnVirtualisation","minWidth","getRowId","GrHeader","header","ar","prevGridList","updatedGridList","defaultColDef","domLayout","stopEditingWhenCellsLoseFocus","onRowDoubleClicked","_defs$stagelementdata","_defs$stagelementdata2","_defs$stagelementdata3","frmgrload","ResetData","dataprops","elementdefs","TextBox","cev","NumericBox","ComboBox","DateBox","DateTimeBox","CheckBox","RadioButton","File","fgr","FormGrid","Grid","Label","MultiLineTextBox","PopupForm","HTMLRenderer","uuidv4","typ","tabs","tid","y","OneScreen","formData","setFormData","clientevent","handleonClick","fn","outel","ro","_eDefHldr$stg$prp$fie2","_eDefHldr$stg$prp$fie3","htmlFor","color","flcr","backgroundColor","bclr","required","maxLength","message","onChange","currentValues","target","prevState","handleChange","fontSize","control","loadCombo","elementName","findParent","parent","option","newoptionsFormat","label","selectedOption","eval","previousValue","gridname","storevalue","customclass","Controller","rules","render","_ref2","onBlur","Select","isDisabled","initialDateValue","_getValues$","_getValues2","_getValues2$","_getValues3","_getValues3$","apiendpoints","showConfirmation","setShowConfirmation","handleConfirmation","confirmed","_eDefHldr$fil","accept","files","docID","FormData","append","FileUpload","placeholder","readOnly","Setdocfield","ConfirmationModal","onConfirm","gridRef","modaldata","setModalData","ChildGridElements","modaldefs","gridComponents","getChildElements","parentElement","parentEid","childElements","childArray","customIsDelFilter","internal","cellEditorPopup","renderer","cellRendererParams","clicked","editor","valueFormatter","valueParser","cellEditor","cellEditorParams","cellRenderer","checked","cellDataType","lookupValue","mappings","o","lookupKey","makeValueFormatter","makeValueParser","popupFormOnLoadEv","pupfload","createNewRowData","handleCellValueChanged","_defs$stagelementdata11","onCellEditingStopped","checkboxes","enableClickSelection","GrPopupForm","memo","forwardRef","refInput","useImperativeHandle","getValue","onChangeListener","focus","onValueChange","_value$","_value$2","_value$3","filedata","docdata","onchagefile","borderColor","popelementsdata","stgelts","Childelements","_stagelementdata$sev","_stagelementdata$sev$","_stagelementdata$sev$2","popupFormOnSaveEv","pupfsave","handleOnChange","handleWheel","handleKeyDown","step","onWheel","adTag","adData","frmHdr"],"sourceRoot":""}